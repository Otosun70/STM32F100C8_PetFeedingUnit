
STM32F100C8_PetFeedingUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f0  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d84  080067c0  080067c0  000167c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007544  08007544  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08007544  08007544  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007544  08007544  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800754c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  20000088  080075d4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008fc  080075d4  000208fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016454  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003031  00000000  00000000  00036505  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  00039538  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  0003a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010b08  00000000  00000000  0003b728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff70  00000000  00000000  0004c230  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000594e2  00000000  00000000  0005c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5682  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bcc  00000000  00000000  000b5700  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080067a8 	.word	0x080067a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	080067a8 	.word	0x080067a8

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000216:	f000 fd98 	bl	8000d4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021a:	f000 f845 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021e:	f000 fa99 	bl	8000754 <MX_GPIO_Init>
  MX_DMA_Init();
 8000222:	f000 fa79 	bl	8000718 <MX_DMA_Init>
  MX_ADC1_Init();
 8000226:	f000 f89b 	bl	8000360 <MX_ADC1_Init>
  MX_I2C1_Init();
 800022a:	f000 f8d7 	bl	80003dc <MX_I2C1_Init>
  MX_RTC_Init();
 800022e:	f000 f903 	bl	8000438 <MX_RTC_Init>
  MX_TIM3_Init();
 8000232:	f000 f94b 	bl	80004cc <MX_TIM3_Init>
  MX_TIM15_Init();
 8000236:	f000 f9c3 	bl	80005c0 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800023a:	f004 fc5b 	bl	8004af4 <OLED_Init>
 // Build_Menu();
  displaySelectKey=GIRIS_EKRANI;
 800023e:	4b14      	ldr	r3, [pc, #80]	; (8000290 <main+0x80>)
 8000240:	22a0      	movs	r2, #160	; 0xa0
 8000242:	701a      	strb	r2, [r3, #0]
  kayitOnayDurum=false;
 8000244:	4b13      	ldr	r3, [pc, #76]	; (8000294 <main+0x84>)
 8000246:	2200      	movs	r2, #0
 8000248:	701a      	strb	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800024a:	2108      	movs	r1, #8
 800024c:	4812      	ldr	r0, [pc, #72]	; (8000298 <main+0x88>)
 800024e:	f003 fe93 	bl	8003f78 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  displaySelect();
 8000252:	f005 faf1 	bl	8005838 <displaySelect>
	  pilGoster();
 8000256:	f004 fc19 	bl	8004a8c <pilGoster>
	  OLED_SetCursor(0, 0);
 800025a:	2100      	movs	r1, #0
 800025c:	2000      	movs	r0, #0
 800025e:	f004 ff03 	bl	8005068 <OLED_SetCursor>
	  sprintf(keyYer, "%3d", deger[1]);
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <main+0x8c>)
 8000264:	885b      	ldrh	r3, [r3, #2]
 8000266:	461a      	mov	r2, r3
 8000268:	1d3b      	adds	r3, r7, #4
 800026a:	490d      	ldr	r1, [pc, #52]	; (80002a0 <main+0x90>)
 800026c:	4618      	mov	r0, r3
 800026e:	f005 fe81 	bl	8005f74 <siprintf>
	  OLED_WriteString(keyYer, Font_7x10, White);
 8000272:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <main+0x94>)
 8000274:	1d38      	adds	r0, r7, #4
 8000276:	2301      	movs	r3, #1
 8000278:	ca06      	ldmia	r2, {r1, r2}
 800027a:	f004 fecf 	bl	800501c <OLED_WriteString>
	  OLED_UpdateScreen();
 800027e:	f004 fdbd 	bl	8004dfc <OLED_UpdateScreen>
	  ADC_DMA_degerOkuma();
 8000282:	f004 fbef 	bl	8004a64 <ADC_DMA_degerOkuma>
	  alarmDeneme(T1DEGER);
 8000286:	20d0      	movs	r0, #208	; 0xd0
 8000288:	f005 fbb4 	bl	80059f4 <alarmDeneme>
	  displaySelect();
 800028c:	e7e1      	b.n	8000252 <main+0x42>
 800028e:	bf00      	nop
 8000290:	200008ce 	.word	0x200008ce
 8000294:	200008cc 	.word	0x200008cc
 8000298:	200006b8 	.word	0x200006b8
 800029c:	2000072c 	.word	0x2000072c
 80002a0:	080067c0 	.word	0x080067c0
 80002a4:	2000000c 	.word	0x2000000c

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b092      	sub	sp, #72	; 0x48
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0320 	add.w	r3, r7, #32
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f005 fe54 	bl	8005f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	f107 030c 	add.w	r3, r7, #12
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002cc:	463b      	mov	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002d6:	2305      	movs	r3, #5
 80002d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002da:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_BYPASS;
 80002e4:	2305      	movs	r3, #5
 80002e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e8:	2302      	movs	r3, #2
 80002ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80002f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80002f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	f107 0320 	add.w	r3, r7, #32
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fa1f 	bl	8002740 <HAL_RCC_OscConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000308:	f000 fa9c 	bl	8000844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	230f      	movs	r3, #15
 800030e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000310:	2302      	movs	r3, #2
 8000312:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000320:	f107 030c 	add.w	r3, r7, #12
 8000324:	2100      	movs	r1, #0
 8000326:	4618      	mov	r0, r3
 8000328:	f002 fc8a 	bl	8002c40 <HAL_RCC_ClockConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000332:	f000 fa87 	bl	8000844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000336:	2303      	movs	r3, #3
 8000338:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800033a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800033e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000340:	2300      	movs	r3, #0
 8000342:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000344:	463b      	mov	r3, r7
 8000346:	4618      	mov	r0, r3
 8000348:	f002 fde6 	bl	8002f18 <HAL_RCCEx_PeriphCLKConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000352:	f000 fa77 	bl	8000844 <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3748      	adds	r7, #72	; 0x48
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000370:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <MX_ADC1_Init+0x74>)
 8000372:	4a19      	ldr	r2, [pc, #100]	; (80003d8 <MX_ADC1_Init+0x78>)
 8000374:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000376:	4b17      	ldr	r3, [pc, #92]	; (80003d4 <MX_ADC1_Init+0x74>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800037c:	4b15      	ldr	r3, [pc, #84]	; (80003d4 <MX_ADC1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <MX_ADC1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <MX_ADC1_Init+0x74>)
 800038a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800038e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000390:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <MX_ADC1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000396:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <MX_ADC1_Init+0x74>)
 8000398:	2201      	movs	r2, #1
 800039a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800039c:	480d      	ldr	r0, [pc, #52]	; (80003d4 <MX_ADC1_Init+0x74>)
 800039e:	f000 fd2d 	bl	8000dfc <HAL_ADC_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003a8:	f000 fa4c 	bl	8000844 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003b8:	1d3b      	adds	r3, r7, #4
 80003ba:	4619      	mov	r1, r3
 80003bc:	4805      	ldr	r0, [pc, #20]	; (80003d4 <MX_ADC1_Init+0x74>)
 80003be:	f000 feef 	bl	80011a0 <HAL_ADC_ConfigChannel>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80003c8:	f000 fa3c 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200006fc 	.word	0x200006fc
 80003d8:	40012400 	.word	0x40012400

080003dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e0:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_I2C1_Init+0x50>)
 80003e2:	4a13      	ldr	r2, [pc, #76]	; (8000430 <MX_I2C1_Init+0x54>)
 80003e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80003e6:	4b11      	ldr	r3, [pc, #68]	; (800042c <MX_I2C1_Init+0x50>)
 80003e8:	4a12      	ldr	r2, [pc, #72]	; (8000434 <MX_I2C1_Init+0x58>)
 80003ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <MX_I2C1_Init+0x50>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80003f2:	4b0e      	ldr	r3, [pc, #56]	; (800042c <MX_I2C1_Init+0x50>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f8:	4b0c      	ldr	r3, [pc, #48]	; (800042c <MX_I2C1_Init+0x50>)
 80003fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <MX_I2C1_Init+0x50>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000406:	4b09      	ldr	r3, [pc, #36]	; (800042c <MX_I2C1_Init+0x50>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040c:	4b07      	ldr	r3, [pc, #28]	; (800042c <MX_I2C1_Init+0x50>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_I2C1_Init+0x50>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <MX_I2C1_Init+0x50>)
 800041a:	f001 fd53 	bl	8001ec4 <HAL_I2C_Init>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000424:	f000 fa0e 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000428:	bf00      	nop
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000540 	.word	0x20000540
 8000430:	40005400 	.word	0x40005400
 8000434:	000186a0 	.word	0x000186a0

08000438 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2100      	movs	r1, #0
 8000442:	460a      	mov	r2, r1
 8000444:	801a      	strh	r2, [r3, #0]
 8000446:	460a      	mov	r2, r1
 8000448:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800044a:	2300      	movs	r3, #0
 800044c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800044e:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <MX_RTC_Init+0x8c>)
 8000450:	4a1d      	ldr	r2, [pc, #116]	; (80004c8 <MX_RTC_Init+0x90>)
 8000452:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_RTC_Init+0x8c>)
 8000456:	f04f 32ff 	mov.w	r2, #4294967295
 800045a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <MX_RTC_Init+0x8c>)
 800045e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000462:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000464:	4817      	ldr	r0, [pc, #92]	; (80004c4 <MX_RTC_Init+0x8c>)
 8000466:	f002 fe55 	bl	8003114 <HAL_RTC_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000470:	f000 f9e8 	bl	8000844 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8000474:	2300      	movs	r3, #0
 8000476:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000478:	2300      	movs	r3, #0
 800047a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800047c:	2300      	movs	r3, #0
 800047e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2201      	movs	r2, #1
 8000484:	4619      	mov	r1, r3
 8000486:	480f      	ldr	r0, [pc, #60]	; (80004c4 <MX_RTC_Init+0x8c>)
 8000488:	f002 feda 	bl	8003240 <HAL_RTC_SetTime>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000492:	f000 f9d7 	bl	8000844 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000496:	2301      	movs	r3, #1
 8000498:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800049a:	2301      	movs	r3, #1
 800049c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800049e:	2301      	movs	r3, #1
 80004a0:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80004a6:	463b      	mov	r3, r7
 80004a8:	2201      	movs	r2, #1
 80004aa:	4619      	mov	r1, r3
 80004ac:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_RTC_Init+0x8c>)
 80004ae:	f003 f837 	bl	8003520 <HAL_RTC_SetDate>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80004b8:	f000 f9c4 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000820 	.word	0x20000820
 80004c8:	40002800 	.word	0x40002800

080004cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d2:	f107 0320 	add.w	r3, r7, #32
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004ee:	4b32      	ldr	r3, [pc, #200]	; (80005b8 <MX_TIM3_Init+0xec>)
 80004f0:	4a32      	ldr	r2, [pc, #200]	; (80005bc <MX_TIM3_Init+0xf0>)
 80004f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004f4:	4b30      	ldr	r3, [pc, #192]	; (80005b8 <MX_TIM3_Init+0xec>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004fa:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <MX_TIM3_Init+0xec>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000500:	4b2d      	ldr	r3, [pc, #180]	; (80005b8 <MX_TIM3_Init+0xec>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000506:	4b2c      	ldr	r3, [pc, #176]	; (80005b8 <MX_TIM3_Init+0xec>)
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050c:	4b2a      	ldr	r3, [pc, #168]	; (80005b8 <MX_TIM3_Init+0xec>)
 800050e:	2200      	movs	r2, #0
 8000510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000512:	4829      	ldr	r0, [pc, #164]	; (80005b8 <MX_TIM3_Init+0xec>)
 8000514:	f003 fd05 	bl	8003f22 <HAL_TIM_PWM_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800051e:	f000 f991 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000522:	2300      	movs	r3, #0
 8000524:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000526:	2300      	movs	r3, #0
 8000528:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	4619      	mov	r1, r3
 8000530:	4821      	ldr	r0, [pc, #132]	; (80005b8 <MX_TIM3_Init+0xec>)
 8000532:	f004 fa01 	bl	8004938 <HAL_TIMEx_MasterConfigSynchronization>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800053c:	f000 f982 	bl	8000844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000540:	2360      	movs	r3, #96	; 0x60
 8000542:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000548:	2300      	movs	r3, #0
 800054a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	4619      	mov	r1, r3
 8000556:	4818      	ldr	r0, [pc, #96]	; (80005b8 <MX_TIM3_Init+0xec>)
 8000558:	f003 fd5a 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000562:	f000 f96f 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2204      	movs	r2, #4
 800056a:	4619      	mov	r1, r3
 800056c:	4812      	ldr	r0, [pc, #72]	; (80005b8 <MX_TIM3_Init+0xec>)
 800056e:	f003 fd4f 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000578:	f000 f964 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2208      	movs	r2, #8
 8000580:	4619      	mov	r1, r3
 8000582:	480d      	ldr	r0, [pc, #52]	; (80005b8 <MX_TIM3_Init+0xec>)
 8000584:	f003 fd44 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800058e:	f000 f959 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	220c      	movs	r2, #12
 8000596:	4619      	mov	r1, r3
 8000598:	4807      	ldr	r0, [pc, #28]	; (80005b8 <MX_TIM3_Init+0xec>)
 800059a:	f003 fd39 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80005a4:	f000 f94e 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <MX_TIM3_Init+0xec>)
 80005aa:	f000 fa9b 	bl	8000ae4 <HAL_TIM_MspPostInit>

}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	; 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200006b8 	.word	0x200006b8
 80005bc:	40000400 	.word	0x40000400

080005c0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b096      	sub	sp, #88	; 0x58
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
 80005ee:	615a      	str	r2, [r3, #20]
 80005f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2220      	movs	r2, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f005 fcb3 	bl	8005f64 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80005fe:	4b44      	ldr	r3, [pc, #272]	; (8000710 <MX_TIM15_Init+0x150>)
 8000600:	4a44      	ldr	r2, [pc, #272]	; (8000714 <MX_TIM15_Init+0x154>)
 8000602:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000604:	4b42      	ldr	r3, [pc, #264]	; (8000710 <MX_TIM15_Init+0x150>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060a:	4b41      	ldr	r3, [pc, #260]	; (8000710 <MX_TIM15_Init+0x150>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 0;
 8000610:	4b3f      	ldr	r3, [pc, #252]	; (8000710 <MX_TIM15_Init+0x150>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000616:	4b3e      	ldr	r3, [pc, #248]	; (8000710 <MX_TIM15_Init+0x150>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800061c:	4b3c      	ldr	r3, [pc, #240]	; (8000710 <MX_TIM15_Init+0x150>)
 800061e:	2200      	movs	r2, #0
 8000620:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000622:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <MX_TIM15_Init+0x150>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000628:	4839      	ldr	r0, [pc, #228]	; (8000710 <MX_TIM15_Init+0x150>)
 800062a:	f003 fc4f 	bl	8003ecc <HAL_TIM_Base_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8000634:	f000 f906 	bl	8000844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800063e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000642:	4619      	mov	r1, r3
 8000644:	4832      	ldr	r0, [pc, #200]	; (8000710 <MX_TIM15_Init+0x150>)
 8000646:	f003 fda9 	bl	800419c <HAL_TIM_ConfigClockSource>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8000650:	f000 f8f8 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000654:	482e      	ldr	r0, [pc, #184]	; (8000710 <MX_TIM15_Init+0x150>)
 8000656:	f003 fc64 	bl	8003f22 <HAL_TIM_PWM_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8000660:	f000 f8f0 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000664:	2300      	movs	r3, #0
 8000666:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000668:	2300      	movs	r3, #0
 800066a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800066c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000670:	4619      	mov	r1, r3
 8000672:	4827      	ldr	r0, [pc, #156]	; (8000710 <MX_TIM15_Init+0x150>)
 8000674:	f004 f960 	bl	8004938 <HAL_TIMEx_MasterConfigSynchronization>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 800067e:	f000 f8e1 	bl	8000844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000682:	2360      	movs	r3, #96	; 0x60
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068a:	2300      	movs	r3, #0
 800068c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800068e:	2300      	movs	r3, #0
 8000690:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000696:	2300      	movs	r3, #0
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800069a:	2300      	movs	r3, #0
 800069c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a2:	2200      	movs	r2, #0
 80006a4:	4619      	mov	r1, r3
 80006a6:	481a      	ldr	r0, [pc, #104]	; (8000710 <MX_TIM15_Init+0x150>)
 80006a8:	f003 fcb2 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80006b2:	f000 f8c7 	bl	8000844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ba:	2204      	movs	r2, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <MX_TIM15_Init+0x150>)
 80006c0:	f003 fca6 	bl	8004010 <HAL_TIM_PWM_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 80006ca:	f000 f8bb 	bl	8000844 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	4807      	ldr	r0, [pc, #28]	; (8000710 <MX_TIM15_Init+0x150>)
 80006f2:	f004 f965 	bl	80049c0 <HAL_TIMEx_ConfigBreakDeadTime>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_TIM15_Init+0x140>
  {
    Error_Handler();
 80006fc:	f000 f8a2 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <MX_TIM15_Init+0x150>)
 8000702:	f000 f9ef 	bl	8000ae4 <HAL_TIM_MspPostInit>

}
 8000706:	bf00      	nop
 8000708:	3758      	adds	r7, #88	; 0x58
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000594 	.word	0x20000594
 8000714:	40014000 	.word	0x40014000

08000718 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_DMA_Init+0x38>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <MX_DMA_Init+0x38>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_DMA_Init+0x38>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	200b      	movs	r0, #11
 800073c:	f000 fff1 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000740:	200b      	movs	r0, #11
 8000742:	f001 f80a 	bl	800175a <HAL_NVIC_EnableIRQ>

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000768:	4b33      	ldr	r3, [pc, #204]	; (8000838 <MX_GPIO_Init+0xe4>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a32      	ldr	r2, [pc, #200]	; (8000838 <MX_GPIO_Init+0xe4>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <MX_GPIO_Init+0xe4>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0310 	and.w	r3, r3, #16
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000780:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <MX_GPIO_Init+0xe4>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <MX_GPIO_Init+0xe4>)
 8000786:	f043 0320 	orr.w	r3, r3, #32
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <MX_GPIO_Init+0xe4>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0320 	and.w	r3, r3, #32
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b27      	ldr	r3, [pc, #156]	; (8000838 <MX_GPIO_Init+0xe4>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a26      	ldr	r2, [pc, #152]	; (8000838 <MX_GPIO_Init+0xe4>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b24      	ldr	r3, [pc, #144]	; (8000838 <MX_GPIO_Init+0xe4>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b0:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MX_GPIO_Init+0xe4>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a20      	ldr	r2, [pc, #128]	; (8000838 <MX_GPIO_Init+0xe4>)
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_GPIO_Init+0xe4>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSLEEP_Pin|SERVO_POWER_Pin, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f248 0120 	movw	r1, #32800	; 0x8020
 80007ce:	481b      	ldr	r0, [pc, #108]	; (800083c <MX_GPIO_Init+0xe8>)
 80007d0:	f001 fb60 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KEY_1_Pin|KEY_2_Pin|KEY_3_Pin|KEY_4_Pin 
 80007d4:	2200      	movs	r2, #0
 80007d6:	21f8      	movs	r1, #248	; 0xf8
 80007d8:	4819      	ldr	r0, [pc, #100]	; (8000840 <MX_GPIO_Init+0xec>)
 80007da:	f001 fb5b 	bl	8001e94 <HAL_GPIO_WritePin>
                          |KEY_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NSLEEP_Pin SERVO_POWER_Pin */
  GPIO_InitStruct.Pin = NSLEEP_Pin|SERVO_POWER_Pin;
 80007de:	f248 0320 	movw	r3, #32800	; 0x8020
 80007e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	4619      	mov	r1, r3
 80007f6:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_GPIO_Init+0xe8>)
 80007f8:	f001 f9f2 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 80007fc:	2304      	movs	r3, #4
 80007fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_GPIO_Init+0xec>)
 8000810:	f001 f9e6 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_1_Pin KEY_2_Pin KEY_3_Pin KEY_4_Pin 
                           KEY_5_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_2_Pin|KEY_3_Pin|KEY_4_Pin 
 8000814:	23f8      	movs	r3, #248	; 0xf8
 8000816:	613b      	str	r3, [r7, #16]
                          |KEY_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2302      	movs	r3, #2
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_GPIO_Init+0xec>)
 800082c:	f001 f9d8 	bl	8001be0 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	40010800 	.word	0x40010800
 8000840:	40010c00 	.word	0x40010c00

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <HAL_MspInit+0x5c>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a14      	ldr	r2, [pc, #80]	; (80008ac <HAL_MspInit+0x5c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <HAL_MspInit+0x5c>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_MspInit+0x5c>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <HAL_MspInit+0x5c>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <HAL_MspInit+0x5c>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000886:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <HAL_MspInit+0x60>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_MspInit+0x60>)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010000 	.word	0x40010000

080008b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a28      	ldr	r2, [pc, #160]	; (8000970 <HAL_ADC_MspInit+0xbc>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d149      	bne.n	8000968 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <HAL_ADC_MspInit+0xc0>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a26      	ldr	r2, [pc, #152]	; (8000974 <HAL_ADC_MspInit+0xc0>)
 80008da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <HAL_ADC_MspInit+0xc0>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <HAL_ADC_MspInit+0xc0>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a20      	ldr	r2, [pc, #128]	; (8000974 <HAL_ADC_MspInit+0xc0>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <HAL_ADC_MspInit+0xc0>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000904:	231f      	movs	r3, #31
 8000906:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000908:	2303      	movs	r3, #3
 800090a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	4819      	ldr	r0, [pc, #100]	; (8000978 <HAL_ADC_MspInit+0xc4>)
 8000914:	f001 f964 	bl	8001be0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_ADC_MspInit+0xc8>)
 800091a:	4a19      	ldr	r2, [pc, #100]	; (8000980 <HAL_ADC_MspInit+0xcc>)
 800091c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_ADC_MspInit+0xc8>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_ADC_MspInit+0xc8>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_ADC_MspInit+0xc8>)
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_ADC_MspInit+0xc8>)
 8000932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000936:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000938:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_ADC_MspInit+0xc8>)
 800093a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800093e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_ADC_MspInit+0xc8>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_ADC_MspInit+0xc8>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800094c:	480b      	ldr	r0, [pc, #44]	; (800097c <HAL_ADC_MspInit+0xc8>)
 800094e:	f000 ff1f 	bl	8001790 <HAL_DMA_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000958:	f7ff ff74 	bl	8000844 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a07      	ldr	r2, [pc, #28]	; (800097c <HAL_ADC_MspInit+0xc8>)
 8000960:	621a      	str	r2, [r3, #32]
 8000962:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_ADC_MspInit+0xc8>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	3720      	adds	r7, #32
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40012400 	.word	0x40012400
 8000974:	40021000 	.word	0x40021000
 8000978:	40010800 	.word	0x40010800
 800097c:	200007d8 	.word	0x200007d8
 8000980:	40020008 	.word	0x40020008

08000984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <HAL_I2C_MspInit+0x90>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d132      	bne.n	8000a0a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <HAL_I2C_MspInit+0x94>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <HAL_I2C_MspInit+0x94>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <HAL_I2C_MspInit+0x94>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	613b      	str	r3, [r7, #16]
 80009ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c2:	2312      	movs	r3, #18
 80009c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4812      	ldr	r0, [pc, #72]	; (8000a1c <HAL_I2C_MspInit+0x98>)
 80009d2:	f001 f905 	bl	8001be0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_I2C_MspInit+0x9c>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
 80009dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009de:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
 80009ec:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <HAL_I2C_MspInit+0x9c>)
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_I2C_MspInit+0x94>)
 80009f4:	69db      	ldr	r3, [r3, #28]
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <HAL_I2C_MspInit+0x94>)
 80009f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009fc:	61d3      	str	r3, [r2, #28]
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_I2C_MspInit+0x94>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	; 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40005400 	.word	0x40005400
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010c00 	.word	0x40010c00
 8000a20:	40010000 	.word	0x40010000

08000a24 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <HAL_RTC_MspInit+0x3c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d110      	bne.n	8000a58 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000a36:	f001 fe77 	bl	8002728 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <HAL_RTC_MspInit+0x40>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <HAL_RTC_MspInit+0x40>)
 8000a40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <HAL_RTC_MspInit+0x40>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_RTC_MspInit+0x44>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40002800 	.word	0x40002800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	4242043c 	.word	0x4242043c

08000a6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x34>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d10b      	bne.n	8000a96 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x38>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x38>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	61d3      	str	r3, [r2, #28]
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x38>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	40000400 	.word	0x40000400
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <HAL_TIM_Base_MspInit+0x34>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d10b      	bne.n	8000ad2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000abc:	699b      	ldr	r3, [r3, #24]
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac4:	6193      	str	r3, [r2, #24]
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_TIM_Base_MspInit+0x38>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr
 8000adc:	40014000 	.word	0x40014000
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0318 	add.w	r3, r7, #24
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <HAL_TIM_MspPostInit+0xd4>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d130      	bne.n	8000b66 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <HAL_TIM_MspPostInit+0xd8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a2c      	ldr	r2, [pc, #176]	; (8000bbc <HAL_TIM_MspPostInit+0xd8>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <HAL_TIM_MspPostInit+0xd8>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0304 	and.w	r3, r3, #4
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <HAL_TIM_MspPostInit+0xd8>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <HAL_TIM_MspPostInit+0xd8>)
 8000b22:	f043 0308 	orr.w	r3, r3, #8
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <HAL_TIM_MspPostInit+0xd8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0308 	and.w	r3, r3, #8
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	693b      	ldr	r3, [r7, #16]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b34:	23c0      	movs	r3, #192	; 0xc0
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0318 	add.w	r3, r7, #24
 8000b44:	4619      	mov	r1, r3
 8000b46:	481e      	ldr	r0, [pc, #120]	; (8000bc0 <HAL_TIM_MspPostInit+0xdc>)
 8000b48:	f001 f84a 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b50:	2302      	movs	r3, #2
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2302      	movs	r3, #2
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0318 	add.w	r3, r7, #24
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4819      	ldr	r0, [pc, #100]	; (8000bc4 <HAL_TIM_MspPostInit+0xe0>)
 8000b60:	f001 f83e 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000b64:	e023      	b.n	8000bae <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM15)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_TIM_MspPostInit+0xe4>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d11e      	bne.n	8000bae <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_TIM_MspPostInit+0xd8>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <HAL_TIM_MspPostInit+0xd8>)
 8000b76:	f043 0308 	orr.w	r3, r3, #8
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <HAL_TIM_MspPostInit+0xd8>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0308 	and.w	r3, r3, #8
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b88:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b92:	2302      	movs	r3, #2
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <HAL_TIM_MspPostInit+0xe0>)
 8000b9e:	f001 f81f 	bl	8001be0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM15_ENABLE();
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <HAL_TIM_MspPostInit+0xe8>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <HAL_TIM_MspPostInit+0xe8>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	61d3      	str	r3, [r2, #28]
}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40000400 	.word	0x40000400
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010800 	.word	0x40010800
 8000bc4:	40010c00 	.word	0x40010c00
 8000bc8:	40014000 	.word	0x40014000
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <HardFault_Handler+0x4>

08000be2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <MemManage_Handler+0x4>

08000be8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <BusFault_Handler+0x4>

08000bee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <UsageFault_Handler+0x4>

08000bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f8d2 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <DMA1_Channel1_IRQHandler+0x10>)
 8000c2a:	f000 fea5 	bl	8001978 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200007d8 	.word	0x200007d8

08000c38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <_sbrk+0x50>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x16>
		heap_end = &end;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <_sbrk+0x50>)
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <_sbrk+0x54>)
 8000c4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <_sbrk+0x50>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <_sbrk+0x50>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	466a      	mov	r2, sp
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d907      	bls.n	8000c72 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c62:	f005 f955 	bl	8005f10 <__errno>
 8000c66:	4602      	mov	r2, r0
 8000c68:	230c      	movs	r3, #12
 8000c6a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c70:	e006      	b.n	8000c80 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <_sbrk+0x50>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <_sbrk+0x50>)
 8000c7c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	200000a4 	.word	0x200000a4
 8000c8c:	20000900 	.word	0x20000900

08000c90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <SystemInit+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a16      	ldr	r2, [pc, #88]	; (8000cf4 <SystemInit+0x64>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <SystemInit+0x64>)
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	4913      	ldr	r1, [pc, #76]	; (8000cf4 <SystemInit+0x64>)
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <SystemInit+0x68>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <SystemInit+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <SystemInit+0x64>)
 8000cb2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <SystemInit+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <SystemInit+0x64>)
 8000cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <SystemInit+0x64>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <SystemInit+0x64>)
 8000cce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000cd2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <SystemInit+0x64>)
 8000cd6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000cda:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <SystemInit+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x6c>)
 8000ce4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ce8:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	f8ff0000 	.word	0xf8ff0000
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d02:	e003      	b.n	8000d0c <LoopCopyDataInit>

08000d04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d0a:	3104      	adds	r1, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d0c:	480a      	ldr	r0, [pc, #40]	; (8000d38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d14:	d3f6      	bcc.n	8000d04 <CopyDataInit>
  ldr r2, =_sbss
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d18:	e002      	b.n	8000d20 <LoopFillZerobss>

08000d1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d1c:	f842 3b04 	str.w	r3, [r2], #4

08000d20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d24:	d3f9      	bcc.n	8000d1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d26:	f7ff ffb3 	bl	8000c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f005 f8f7 	bl	8005f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2e:	f7ff fa6f 	bl	8000210 <main>
  bx lr
 8000d32:	4770      	bx	lr
  ldr r3, =_sidata
 8000d34:	0800754c 	.word	0x0800754c
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d3c:	20000088 	.word	0x20000088
  ldr r2, =_sbss
 8000d40:	20000088 	.word	0x20000088
  ldr r3, = _ebss
 8000d44:	200008fc 	.word	0x200008fc

08000d48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC1_IRQHandler>

08000d4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f000 fcdc 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d54:	2000      	movs	r0, #0
 8000d56:	f000 f805 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5a:	f7ff fd79 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x54>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x58>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fcf7 	bl	8001776 <HAL_SYSTICK_Config>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e00e      	b.n	8000db0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d80a      	bhi.n	8000dae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	f000 fcbf 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <HAL_InitTick+0x5c>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	e000      	b.n	8000db0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000000 	.word	0x20000000
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x1c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	20000008 	.word	0x20000008
 8000de4:	200008f4 	.word	0x200008f4

08000de8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <HAL_GetTick+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	200008f4 	.word	0x200008f4

08000dfc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e0be      	b.n	8000f9c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d109      	bne.n	8000e40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff fd3a 	bl	80008b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 faf7 	bl	8001434 <ADC_ConversionStop_Disable>
 8000e46:	4603      	mov	r3, r0
 8000e48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f040 8099 	bne.w	8000f8a <HAL_ADC_Init+0x18e>
 8000e58:	7dfb      	ldrb	r3, [r7, #23]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 8095 	bne.w	8000f8a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e68:	f023 0302 	bic.w	r3, r3, #2
 8000e6c:	f043 0202 	orr.w	r2, r3, #2
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7b1b      	ldrb	r3, [r3, #12]
 8000e82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e94:	d003      	beq.n	8000e9e <HAL_ADC_Init+0xa2>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d102      	bne.n	8000ea4 <HAL_ADC_Init+0xa8>
 8000e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea2:	e000      	b.n	8000ea6 <HAL_ADC_Init+0xaa>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7d1b      	ldrb	r3, [r3, #20]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d119      	bne.n	8000ee8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7b1b      	ldrb	r3, [r3, #12]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d109      	bne.n	8000ed0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	035a      	lsls	r2, r3, #13
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	e00b      	b.n	8000ee8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	f043 0220 	orr.w	r2, r3, #32
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	f043 0201 	orr.w	r2, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <HAL_ADC_Init+0x1a8>)
 8000f04:	4013      	ands	r3, r2
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	6812      	ldr	r2, [r2, #0]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f18:	d003      	beq.n	8000f22 <HAL_ADC_Init+0x126>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d104      	bne.n	8000f2c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	051b      	lsls	r3, r3, #20
 8000f2a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f32:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	430a      	orrs	r2, r1
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_ADC_Init+0x1ac>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d10b      	bne.n	8000f68 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5a:	f023 0303 	bic.w	r3, r3, #3
 8000f5e:	f043 0201 	orr.w	r2, r3, #1
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f66:	e018      	b.n	8000f9a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6c:	f023 0312 	bic.w	r3, r3, #18
 8000f70:	f043 0210 	orr.w	r2, r3, #16
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	f043 0201 	orr.w	r2, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f88:	e007      	b.n	8000f9a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	f043 0210 	orr.w	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	ffe1f7fd 	.word	0xffe1f7fd
 8000fa8:	ff1f0efe 	.word	0xff1f0efe

08000fac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	75fb      	strb	r3, [r7, #23]
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <HAL_ADC_Start_DMA+0x1e>
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	e080      	b.n	80010cc <HAL_ADC_Start_DMA+0x120>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 f9dc 	bl	8001390 <ADC_Enable>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fdc:	7dfb      	ldrb	r3, [r7, #23]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d16f      	bne.n	80010c2 <HAL_ADC_Start_DMA+0x116>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fea:	f023 0301 	bic.w	r3, r3, #1
 8000fee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100c:	2b00      	cmp	r3, #0
 800100e:	d007      	beq.n	8001020 <HAL_ADC_Start_DMA+0x74>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001018:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	629a      	str	r2, [r3, #40]	; 0x28
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d006      	beq.n	800103a <HAL_ADC_Start_DMA+0x8e>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	f023 0206 	bic.w	r2, r3, #6
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
 8001038:	e002      	b.n	8001040 <HAL_ADC_Start_DMA+0x94>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2200      	movs	r2, #0
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <HAL_ADC_Start_DMA+0x128>)
 800104e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <HAL_ADC_Start_DMA+0x12c>)
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6a1b      	ldr	r3, [r3, #32]
 800105c:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <HAL_ADC_Start_DMA+0x130>)
 800105e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f06f 0202 	mvn.w	r2, #2
 8001068:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001078:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6a18      	ldr	r0, [r3, #32]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	334c      	adds	r3, #76	; 0x4c
 8001084:	4619      	mov	r1, r3
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f000 fbdb 	bl	8001844 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001098:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800109c:	d108      	bne.n	80010b0 <HAL_ADC_Start_DMA+0x104>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	e00c      	b.n	80010ca <HAL_ADC_Start_DMA+0x11e>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	e003      	b.n	80010ca <HAL_ADC_Start_DMA+0x11e>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	080014a9 	.word	0x080014a9
 80010d8:	08001525 	.word	0x08001525
 80010dc:	08001541 	.word	0x08001541

080010e0 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d101      	bne.n	80010fa <HAL_ADC_Stop_DMA+0x1a>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e033      	b.n	8001162 <HAL_ADC_Stop_DMA+0x82>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 f996 	bl	8001434 <ADC_ConversionStop_Disable>
 8001108:	4603      	mov	r3, r0
 800110a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d122      	bne.n	8001158 <HAL_ADC_Stop_DMA+0x78>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001120:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fbeb 	bl	8001902 <HAL_DMA_Abort>
 800112c:	4603      	mov	r3, r0
 800112e:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d10a      	bne.n	800114c <HAL_ADC_Stop_DMA+0x6c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	f043 0201 	orr.w	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	629a      	str	r2, [r3, #40]	; 0x28
 800114a:	e005      	b.n	8001158 <HAL_ADC_Stop_DMA+0x78>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001150:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d101      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x20>
 80011bc:	2302      	movs	r3, #2
 80011be:	e0dc      	b.n	800137a <HAL_ADC_ConfigChannel+0x1da>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b06      	cmp	r3, #6
 80011ce:	d81c      	bhi.n	800120a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	3b05      	subs	r3, #5
 80011e2:	221f      	movs	r2, #31
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	4019      	ands	r1, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	3b05      	subs	r3, #5
 80011fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
 8001208:	e03c      	b.n	8001284 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b0c      	cmp	r3, #12
 8001210:	d81c      	bhi.n	800124c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	3b23      	subs	r3, #35	; 0x23
 8001224:	221f      	movs	r2, #31
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	4019      	ands	r1, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	4613      	mov	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	3b23      	subs	r3, #35	; 0x23
 800123e:	fa00 f203 	lsl.w	r2, r0, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
 800124a:	e01b      	b.n	8001284 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	3b41      	subs	r3, #65	; 0x41
 800125e:	221f      	movs	r2, #31
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	4019      	ands	r1, r3
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	3b41      	subs	r3, #65	; 0x41
 8001278:	fa00 f203 	lsl.w	r2, r0, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b09      	cmp	r3, #9
 800128a:	d91c      	bls.n	80012c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	68d9      	ldr	r1, [r3, #12]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4613      	mov	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	4413      	add	r3, r2
 800129c:	3b1e      	subs	r3, #30
 800129e:	2207      	movs	r2, #7
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4019      	ands	r1, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	6898      	ldr	r0, [r3, #8]
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	3b1e      	subs	r3, #30
 80012b8:	fa00 f203 	lsl.w	r2, r0, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	e019      	b.n	80012fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6919      	ldr	r1, [r3, #16]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	2207      	movs	r2, #7
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	4019      	ands	r1, r3
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	6898      	ldr	r0, [r3, #8]
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	fa00 f203 	lsl.w	r2, r0, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b10      	cmp	r3, #16
 8001300:	d003      	beq.n	800130a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001306:	2b11      	cmp	r3, #17
 8001308:	d132      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a1d      	ldr	r2, [pc, #116]	; (8001384 <HAL_ADC_ConfigChannel+0x1e4>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d125      	bne.n	8001360 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d126      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001330:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2b10      	cmp	r3, #16
 8001338:	d11a      	bne.n	8001370 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <HAL_ADC_ConfigChannel+0x1e8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a13      	ldr	r2, [pc, #76]	; (800138c <HAL_ADC_ConfigChannel+0x1ec>)
 8001340:	fba2 2303 	umull	r2, r3, r2, r3
 8001344:	0c9a      	lsrs	r2, r3, #18
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001350:	e002      	b.n	8001358 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	3b01      	subs	r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f9      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x1b2>
 800135e:	e007      	b.n	8001370 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	f043 0220 	orr.w	r2, r3, #32
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	40012400 	.word	0x40012400
 8001388:	20000000 	.word	0x20000000
 800138c:	431bde83 	.word	0x431bde83

08001390 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d039      	beq.n	8001422 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0201 	orr.w	r2, r2, #1
 80013bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <ADC_Enable+0x9c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <ADC_Enable+0xa0>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	0c9b      	lsrs	r3, r3, #18
 80013ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013cc:	e002      	b.n	80013d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	3b01      	subs	r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f9      	bne.n	80013ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013da:	f7ff fd05 	bl	8000de8 <HAL_GetTick>
 80013de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013e0:	e018      	b.n	8001414 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013e2:	f7ff fd01 	bl	8000de8 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d911      	bls.n	8001414 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	f043 0210 	orr.w	r2, r3, #16
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e007      	b.n	8001424 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d1df      	bne.n	80013e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000000 	.word	0x20000000
 8001430:	431bde83 	.word	0x431bde83

08001434 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b01      	cmp	r3, #1
 800144c:	d127      	bne.n	800149e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689a      	ldr	r2, [r3, #8]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f022 0201 	bic.w	r2, r2, #1
 800145c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800145e:	f7ff fcc3 	bl	8000de8 <HAL_GetTick>
 8001462:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001464:	e014      	b.n	8001490 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001466:	f7ff fcbf 	bl	8000de8 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d90d      	bls.n	8001490 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	f043 0210 	orr.w	r2, r3, #16
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e007      	b.n	80014a0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b01      	cmp	r3, #1
 800149c:	d0e3      	beq.n	8001466 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d127      	bne.n	8001512 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014dc:	d115      	bne.n	800150a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d111      	bne.n	800150a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	f043 0201 	orr.w	r2, r3, #1
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f7ff fe2d 	bl	800116a <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001510:	e004      	b.n	800151c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff fe22 	bl	800117c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001552:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	f043 0204 	orr.w	r2, r3, #4
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f7ff fe11 	bl	800118e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001590:	4013      	ands	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800159c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <__NVIC_GetPriorityGrouping+0x18>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 0307 	and.w	r3, r3, #7
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db0b      	blt.n	8001602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 021f 	and.w	r2, r3, #31
 80015f0:	4906      	ldr	r1, [pc, #24]	; (800160c <__NVIC_EnableIRQ+0x34>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	2001      	movs	r0, #1
 80015fa:	fa00 f202 	lsl.w	r2, r0, r2
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	; (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	; 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	; 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff90 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff2d 	bl	8001574 <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff42 	bl	80015bc <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff90 	bl	8001664 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5f 	bl	8001610 <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff35 	bl	80015d8 <__NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffa2 	bl	80016c8 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d101      	bne.n	80017a6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e043      	b.n	800182e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_DMA_Init+0xa8>)
 80017ae:	4413      	add	r3, r2
 80017b0:	4a22      	ldr	r2, [pc, #136]	; (800183c <HAL_DMA_Init+0xac>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	091b      	lsrs	r3, r3, #4
 80017b8:	009a      	lsls	r2, r3, #2
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <HAL_DMA_Init+0xb0>)
 80017c2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	bffdfff8 	.word	0xbffdfff8
 800183c:	cccccccd 	.word	0xcccccccd
 8001840:	40020000 	.word	0x40020000

08001844 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_DMA_Start_IT+0x20>
 8001860:	2302      	movs	r3, #2
 8001862:	e04a      	b.n	80018fa <HAL_DMA_Start_IT+0xb6>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001872:	2b01      	cmp	r3, #1
 8001874:	d13a      	bne.n	80018ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2202      	movs	r2, #2
 800187a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f000 f972 	bl	8001b84 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d008      	beq.n	80018ba <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 020e 	orr.w	r2, r2, #14
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	e00f      	b.n	80018da <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0204 	bic.w	r2, r2, #4
 80018c8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 020a 	orr.w	r2, r2, #10
 80018d8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0201 	orr.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	e005      	b.n	80018f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018f4:	2302      	movs	r3, #2
 80018f6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80018f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001914:	2b02      	cmp	r3, #2
 8001916:	d008      	beq.n	800192a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2204      	movs	r2, #4
 800191c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e020      	b.n	800196c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 020e 	bic.w	r2, r2, #14
 8001938:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0201 	bic.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001952:	2101      	movs	r1, #1
 8001954:	fa01 f202 	lsl.w	r2, r1, r2
 8001958:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr
	...

08001978 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	2204      	movs	r2, #4
 8001996:	409a      	lsls	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d04f      	beq.n	8001a40 <HAL_DMA_IRQHandler+0xc8>
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d04a      	beq.n	8001a40 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d107      	bne.n	80019c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0204 	bic.w	r2, r2, #4
 80019c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a66      	ldr	r2, [pc, #408]	; (8001b68 <HAL_DMA_IRQHandler+0x1f0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d029      	beq.n	8001a26 <HAL_DMA_IRQHandler+0xae>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a65      	ldr	r2, [pc, #404]	; (8001b6c <HAL_DMA_IRQHandler+0x1f4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d022      	beq.n	8001a22 <HAL_DMA_IRQHandler+0xaa>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a63      	ldr	r2, [pc, #396]	; (8001b70 <HAL_DMA_IRQHandler+0x1f8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d01a      	beq.n	8001a1c <HAL_DMA_IRQHandler+0xa4>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a62      	ldr	r2, [pc, #392]	; (8001b74 <HAL_DMA_IRQHandler+0x1fc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d012      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x9e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a60      	ldr	r2, [pc, #384]	; (8001b78 <HAL_DMA_IRQHandler+0x200>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d00a      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x98>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a5f      	ldr	r2, [pc, #380]	; (8001b7c <HAL_DMA_IRQHandler+0x204>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d102      	bne.n	8001a0a <HAL_DMA_IRQHandler+0x92>
 8001a04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a08:	e00e      	b.n	8001a28 <HAL_DMA_IRQHandler+0xb0>
 8001a0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a0e:	e00b      	b.n	8001a28 <HAL_DMA_IRQHandler+0xb0>
 8001a10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a14:	e008      	b.n	8001a28 <HAL_DMA_IRQHandler+0xb0>
 8001a16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a1a:	e005      	b.n	8001a28 <HAL_DMA_IRQHandler+0xb0>
 8001a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a20:	e002      	b.n	8001a28 <HAL_DMA_IRQHandler+0xb0>
 8001a22:	2340      	movs	r3, #64	; 0x40
 8001a24:	e000      	b.n	8001a28 <HAL_DMA_IRQHandler+0xb0>
 8001a26:	2304      	movs	r3, #4
 8001a28:	4a55      	ldr	r2, [pc, #340]	; (8001b80 <HAL_DMA_IRQHandler+0x208>)
 8001a2a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 8094 	beq.w	8001b5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a3e:	e08e      	b.n	8001b5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	2202      	movs	r2, #2
 8001a46:	409a      	lsls	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d056      	beq.n	8001afe <HAL_DMA_IRQHandler+0x186>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d051      	beq.n	8001afe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10b      	bne.n	8001a80 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 020a 	bic.w	r2, r2, #10
 8001a76:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a38      	ldr	r2, [pc, #224]	; (8001b68 <HAL_DMA_IRQHandler+0x1f0>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d029      	beq.n	8001ade <HAL_DMA_IRQHandler+0x166>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a37      	ldr	r2, [pc, #220]	; (8001b6c <HAL_DMA_IRQHandler+0x1f4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d022      	beq.n	8001ada <HAL_DMA_IRQHandler+0x162>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a35      	ldr	r2, [pc, #212]	; (8001b70 <HAL_DMA_IRQHandler+0x1f8>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01a      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x15c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a34      	ldr	r2, [pc, #208]	; (8001b74 <HAL_DMA_IRQHandler+0x1fc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d012      	beq.n	8001ace <HAL_DMA_IRQHandler+0x156>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a32      	ldr	r2, [pc, #200]	; (8001b78 <HAL_DMA_IRQHandler+0x200>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00a      	beq.n	8001ac8 <HAL_DMA_IRQHandler+0x150>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a31      	ldr	r2, [pc, #196]	; (8001b7c <HAL_DMA_IRQHandler+0x204>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d102      	bne.n	8001ac2 <HAL_DMA_IRQHandler+0x14a>
 8001abc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ac0:	e00e      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x168>
 8001ac2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ac6:	e00b      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x168>
 8001ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001acc:	e008      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x168>
 8001ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad2:	e005      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x168>
 8001ad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad8:	e002      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x168>
 8001ada:	2320      	movs	r3, #32
 8001adc:	e000      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x168>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	4a27      	ldr	r2, [pc, #156]	; (8001b80 <HAL_DMA_IRQHandler+0x208>)
 8001ae2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d034      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001afc:	e02f      	b.n	8001b5e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	2208      	movs	r2, #8
 8001b04:	409a      	lsls	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d028      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x1e8>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d023      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 020e 	bic.w	r2, r2, #14
 8001b26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2201      	movs	r2, #1
 8001b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	4798      	blx	r3
    }
  }
  return;
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
}
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40020008 	.word	0x40020008
 8001b6c:	4002001c 	.word	0x4002001c
 8001b70:	40020030 	.word	0x40020030
 8001b74:	40020044 	.word	0x40020044
 8001b78:	40020058 	.word	0x40020058
 8001b7c:	4002006c 	.word	0x4002006c
 8001b80:	40020000 	.word	0x40020000

08001b84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d108      	bne.n	8001bc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bc2:	e007      	b.n	8001bd4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]
}
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b08b      	sub	sp, #44	; 0x2c
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	e127      	b.n	8001e44 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	f040 8116 	bne.w	8001e3e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b12      	cmp	r3, #18
 8001c18:	d034      	beq.n	8001c84 <HAL_GPIO_Init+0xa4>
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d80d      	bhi.n	8001c3a <HAL_GPIO_Init+0x5a>
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d02b      	beq.n	8001c7a <HAL_GPIO_Init+0x9a>
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d804      	bhi.n	8001c30 <HAL_GPIO_Init+0x50>
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d031      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d01c      	beq.n	8001c68 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c2e:	e048      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d043      	beq.n	8001cbc <HAL_GPIO_Init+0xdc>
 8001c34:	2b11      	cmp	r3, #17
 8001c36:	d01b      	beq.n	8001c70 <HAL_GPIO_Init+0x90>
          break;
 8001c38:	e043      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c3a:	4a89      	ldr	r2, [pc, #548]	; (8001e60 <HAL_GPIO_Init+0x280>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d026      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
 8001c40:	4a87      	ldr	r2, [pc, #540]	; (8001e60 <HAL_GPIO_Init+0x280>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d806      	bhi.n	8001c54 <HAL_GPIO_Init+0x74>
 8001c46:	4a87      	ldr	r2, [pc, #540]	; (8001e64 <HAL_GPIO_Init+0x284>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d020      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
 8001c4c:	4a86      	ldr	r2, [pc, #536]	; (8001e68 <HAL_GPIO_Init+0x288>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01d      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
          break;
 8001c52:	e036      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001c54:	4a85      	ldr	r2, [pc, #532]	; (8001e6c <HAL_GPIO_Init+0x28c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
 8001c5a:	4a85      	ldr	r2, [pc, #532]	; (8001e70 <HAL_GPIO_Init+0x290>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d016      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
 8001c60:	4a84      	ldr	r2, [pc, #528]	; (8001e74 <HAL_GPIO_Init+0x294>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0xae>
          break;
 8001c66:	e02c      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	623b      	str	r3, [r7, #32]
          break;
 8001c6e:	e028      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	3304      	adds	r3, #4
 8001c76:	623b      	str	r3, [r7, #32]
          break;
 8001c78:	e023      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	3308      	adds	r3, #8
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e01e      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	330c      	adds	r3, #12
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e019      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c96:	2304      	movs	r3, #4
 8001c98:	623b      	str	r3, [r7, #32]
          break;
 8001c9a:	e012      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca4:	2308      	movs	r3, #8
 8001ca6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	611a      	str	r2, [r3, #16]
          break;
 8001cae:	e008      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	615a      	str	r2, [r3, #20]
          break;
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
          break;
 8001cc0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2bff      	cmp	r3, #255	; 0xff
 8001cc6:	d801      	bhi.n	8001ccc <HAL_GPIO_Init+0xec>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	e001      	b.n	8001cd0 <HAL_GPIO_Init+0xf0>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2bff      	cmp	r3, #255	; 0xff
 8001cd6:	d802      	bhi.n	8001cde <HAL_GPIO_Init+0xfe>
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	e002      	b.n	8001ce4 <HAL_GPIO_Init+0x104>
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	3b08      	subs	r3, #8
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	210f      	movs	r1, #15
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	6a39      	ldr	r1, [r7, #32]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 8096 	beq.w	8001e3e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d12:	4b59      	ldr	r3, [pc, #356]	; (8001e78 <HAL_GPIO_Init+0x298>)
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	4a58      	ldr	r2, [pc, #352]	; (8001e78 <HAL_GPIO_Init+0x298>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6193      	str	r3, [r2, #24]
 8001d1e:	4b56      	ldr	r3, [pc, #344]	; (8001e78 <HAL_GPIO_Init+0x298>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d2a:	4a54      	ldr	r2, [pc, #336]	; (8001e7c <HAL_GPIO_Init+0x29c>)
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d36:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4b      	ldr	r2, [pc, #300]	; (8001e80 <HAL_GPIO_Init+0x2a0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0x19e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4a      	ldr	r2, [pc, #296]	; (8001e84 <HAL_GPIO_Init+0x2a4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_GPIO_Init+0x19a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a49      	ldr	r2, [pc, #292]	; (8001e88 <HAL_GPIO_Init+0x2a8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x196>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a48      	ldr	r2, [pc, #288]	; (8001e8c <HAL_GPIO_Init+0x2ac>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_GPIO_Init+0x192>
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x1a0>
 8001d72:	2304      	movs	r3, #4
 8001d74:	e004      	b.n	8001d80 <HAL_GPIO_Init+0x1a0>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_Init+0x1a0>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x1a0>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d82:	f002 0203 	and.w	r2, r2, #3
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	4093      	lsls	r3, r2
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d90:	493a      	ldr	r1, [pc, #232]	; (8001e7c <HAL_GPIO_Init+0x29c>)
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001daa:	4b39      	ldr	r3, [pc, #228]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4938      	ldr	r1, [pc, #224]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
 8001db6:	e006      	b.n	8001dc6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	4933      	ldr	r1, [pc, #204]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d006      	beq.n	8001de0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dd2:	4b2f      	ldr	r3, [pc, #188]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	492e      	ldr	r1, [pc, #184]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
 8001dde:	e006      	b.n	8001dee <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001de0:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	4929      	ldr	r1, [pc, #164]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	4924      	ldr	r1, [pc, #144]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	608b      	str	r3, [r1, #8]
 8001e06:	e006      	b.n	8001e16 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e0a:	689a      	ldr	r2, [r3, #8]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	491f      	ldr	r1, [pc, #124]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d006      	beq.n	8001e30 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e22:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e24:	68da      	ldr	r2, [r3, #12]
 8001e26:	491a      	ldr	r1, [pc, #104]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60cb      	str	r3, [r1, #12]
 8001e2e:	e006      	b.n	8001e3e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	4915      	ldr	r1, [pc, #84]	; (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e40:	3301      	adds	r3, #1
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f47f aed0 	bne.w	8001bf4 <HAL_GPIO_Init+0x14>
  }
}
 8001e54:	bf00      	nop
 8001e56:	372c      	adds	r7, #44	; 0x2c
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	10210000 	.word	0x10210000
 8001e64:	10110000 	.word	0x10110000
 8001e68:	10120000 	.word	0x10120000
 8001e6c:	10310000 	.word	0x10310000
 8001e70:	10320000 	.word	0x10320000
 8001e74:	10220000 	.word	0x10220000
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40010000 	.word	0x40010000
 8001e80:	40010800 	.word	0x40010800
 8001e84:	40010c00 	.word	0x40010c00
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	40011400 	.word	0x40011400
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eb0:	e003      	b.n	8001eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	041a      	lsls	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	611a      	str	r2, [r3, #16]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e10f      	b.n	80020f6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe fd4a 	bl	8000984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2224      	movs	r2, #36	; 0x24
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f08:	f000 ffc0 	bl	8002e8c <HAL_RCC_GetPCLK1Freq>
 8001f0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4a7b      	ldr	r2, [pc, #492]	; (8002100 <HAL_I2C_Init+0x23c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d807      	bhi.n	8001f28 <HAL_I2C_Init+0x64>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4a7a      	ldr	r2, [pc, #488]	; (8002104 <HAL_I2C_Init+0x240>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	bf94      	ite	ls
 8001f20:	2301      	movls	r3, #1
 8001f22:	2300      	movhi	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	e006      	b.n	8001f36 <HAL_I2C_Init+0x72>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4a77      	ldr	r2, [pc, #476]	; (8002108 <HAL_I2C_Init+0x244>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	bf94      	ite	ls
 8001f30:	2301      	movls	r3, #1
 8001f32:	2300      	movhi	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e0db      	b.n	80020f6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4a72      	ldr	r2, [pc, #456]	; (800210c <HAL_I2C_Init+0x248>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0c9b      	lsrs	r3, r3, #18
 8001f48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a64      	ldr	r2, [pc, #400]	; (8002100 <HAL_I2C_Init+0x23c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d802      	bhi.n	8001f78 <HAL_I2C_Init+0xb4>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	3301      	adds	r3, #1
 8001f76:	e009      	b.n	8001f8c <HAL_I2C_Init+0xc8>
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	4a63      	ldr	r2, [pc, #396]	; (8002110 <HAL_I2C_Init+0x24c>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	099b      	lsrs	r3, r3, #6
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4956      	ldr	r1, [pc, #344]	; (8002100 <HAL_I2C_Init+0x23c>)
 8001fa8:	428b      	cmp	r3, r1
 8001faa:	d80d      	bhi.n	8001fc8 <HAL_I2C_Init+0x104>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1e59      	subs	r1, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	bf38      	it	cc
 8001fc4:	2304      	movcc	r3, #4
 8001fc6:	e04f      	b.n	8002068 <HAL_I2C_Init+0x1a4>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d111      	bne.n	8001ff4 <HAL_I2C_Init+0x130>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1e58      	subs	r0, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6859      	ldr	r1, [r3, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	440b      	add	r3, r1
 8001fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf0c      	ite	eq
 8001fec:	2301      	moveq	r3, #1
 8001fee:	2300      	movne	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	e012      	b.n	800201a <HAL_I2C_Init+0x156>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1e58      	subs	r0, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6859      	ldr	r1, [r3, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	0099      	lsls	r1, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	fbb0 f3f3 	udiv	r3, r0, r3
 800200a:	3301      	adds	r3, #1
 800200c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Init+0x15e>
 800201e:	2301      	movs	r3, #1
 8002020:	e022      	b.n	8002068 <HAL_I2C_Init+0x1a4>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10e      	bne.n	8002048 <HAL_I2C_Init+0x184>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1e58      	subs	r0, r3, #1
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	460b      	mov	r3, r1
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	440b      	add	r3, r1
 8002038:	fbb0 f3f3 	udiv	r3, r0, r3
 800203c:	3301      	adds	r3, #1
 800203e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002046:	e00f      	b.n	8002068 <HAL_I2C_Init+0x1a4>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1e58      	subs	r0, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	0099      	lsls	r1, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	fbb0 f3f3 	udiv	r3, r0, r3
 800205e:	3301      	adds	r3, #1
 8002060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002064:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	6809      	ldr	r1, [r1, #0]
 800206c:	4313      	orrs	r3, r2
 800206e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6911      	ldr	r1, [r2, #16]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68d2      	ldr	r2, [r2, #12]
 80020a2:	4311      	orrs	r1, r2
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	000186a0 	.word	0x000186a0
 8002104:	001e847f 	.word	0x001e847f
 8002108:	003d08ff 	.word	0x003d08ff
 800210c:	431bde83 	.word	0x431bde83
 8002110:	10624dd3 	.word	0x10624dd3

08002114 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b088      	sub	sp, #32
 8002118:	af02      	add	r7, sp, #8
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	4608      	mov	r0, r1
 800211e:	4611      	mov	r1, r2
 8002120:	461a      	mov	r2, r3
 8002122:	4603      	mov	r3, r0
 8002124:	817b      	strh	r3, [r7, #10]
 8002126:	460b      	mov	r3, r1
 8002128:	813b      	strh	r3, [r7, #8]
 800212a:	4613      	mov	r3, r2
 800212c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800212e:	f7fe fe5b 	bl	8000de8 <HAL_GetTick>
 8002132:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b20      	cmp	r3, #32
 800213e:	f040 80d9 	bne.w	80022f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2319      	movs	r3, #25
 8002148:	2201      	movs	r2, #1
 800214a:	496d      	ldr	r1, [pc, #436]	; (8002300 <HAL_I2C_Mem_Write+0x1ec>)
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f965 	bl	800241c <I2C_WaitOnFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002158:	2302      	movs	r3, #2
 800215a:	e0cc      	b.n	80022f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_I2C_Mem_Write+0x56>
 8002166:	2302      	movs	r3, #2
 8002168:	e0c5      	b.n	80022f6 <HAL_I2C_Mem_Write+0x1e2>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d007      	beq.n	8002190 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800219e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2221      	movs	r2, #33	; 0x21
 80021a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2240      	movs	r2, #64	; 0x40
 80021ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a3a      	ldr	r2, [r7, #32]
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a4d      	ldr	r2, [pc, #308]	; (8002304 <HAL_I2C_Mem_Write+0x1f0>)
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021d2:	88f8      	ldrh	r0, [r7, #6]
 80021d4:	893a      	ldrh	r2, [r7, #8]
 80021d6:	8979      	ldrh	r1, [r7, #10]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	4603      	mov	r3, r0
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f890 	bl	8002308 <I2C_RequestMemoryWrite>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d052      	beq.n	8002294 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e081      	b.n	80022f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f9e6 	bl	80025c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00d      	beq.n	800221e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	2b04      	cmp	r3, #4
 8002208:	d107      	bne.n	800221a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002218:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e06b      	b.n	80022f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b04      	cmp	r3, #4
 800225a:	d11b      	bne.n	8002294 <HAL_I2C_Mem_Write+0x180>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	d017      	beq.n	8002294 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1aa      	bne.n	80021f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f9d2 	bl	800264a <I2C_WaitOnBTFFlagUntilTimeout>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00d      	beq.n	80022c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d107      	bne.n	80022c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e016      	b.n	80022f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	e000      	b.n	80022f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022f4:	2302      	movs	r3, #2
  }
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	00100002 	.word	0x00100002
 8002304:	ffff0000 	.word	0xffff0000

08002308 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4603      	mov	r3, r0
 8002318:	817b      	strh	r3, [r7, #10]
 800231a:	460b      	mov	r3, r1
 800231c:	813b      	strh	r3, [r7, #8]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002330:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	2200      	movs	r2, #0
 800233a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f86c 	bl	800241c <I2C_WaitOnFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e05f      	b.n	800240e <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800234e:	897b      	ldrh	r3, [r7, #10]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800235c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	6a3a      	ldr	r2, [r7, #32]
 8002362:	492d      	ldr	r1, [pc, #180]	; (8002418 <I2C_RequestMemoryWrite+0x110>)
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 f8b0 	bl	80024ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e04c      	b.n	800240e <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800238a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238c:	6a39      	ldr	r1, [r7, #32]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f91a 	bl	80025c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00d      	beq.n	80023b6 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d107      	bne.n	80023b2 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e02b      	b.n	800240e <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d105      	bne.n	80023c8 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023bc:	893b      	ldrh	r3, [r7, #8]
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	611a      	str	r2, [r3, #16]
 80023c6:	e021      	b.n	800240c <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023c8:	893b      	ldrh	r3, [r7, #8]
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d8:	6a39      	ldr	r1, [r7, #32]
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 f8f4 	bl	80025c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d107      	bne.n	80023fe <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e005      	b.n	800240e <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002402:	893b      	ldrh	r3, [r7, #8]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	00010002 	.word	0x00010002

0800241c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800242c:	e025      	b.n	800247a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002434:	d021      	beq.n	800247a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002436:	f7fe fcd7 	bl	8000de8 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	429a      	cmp	r2, r3
 8002444:	d302      	bcc.n	800244c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d116      	bne.n	800247a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e023      	b.n	80024c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	0c1b      	lsrs	r3, r3, #16
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d10d      	bne.n	80024a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	43da      	mvns	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4013      	ands	r3, r2
 8002490:	b29b      	uxth	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf0c      	ite	eq
 8002496:	2301      	moveq	r3, #1
 8002498:	2300      	movne	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	e00c      	b.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	43da      	mvns	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4013      	ands	r3, r2
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d0b6      	beq.n	800242e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024d8:	e051      	b.n	800257e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e8:	d123      	bne.n	8002532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002502:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f043 0204 	orr.w	r2, r3, #4
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e046      	b.n	80025c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d021      	beq.n	800257e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253a:	f7fe fc55 	bl	8000de8 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	429a      	cmp	r2, r3
 8002548:	d302      	bcc.n	8002550 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d116      	bne.n	800257e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f043 0220 	orr.w	r2, r3, #32
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e020      	b.n	80025c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	0c1b      	lsrs	r3, r3, #16
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b01      	cmp	r3, #1
 8002586:	d10c      	bne.n	80025a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	43da      	mvns	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4013      	ands	r3, r2
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf14      	ite	ne
 800259a:	2301      	movne	r3, #1
 800259c:	2300      	moveq	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	e00b      	b.n	80025ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	43da      	mvns	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4013      	ands	r3, r2
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d18d      	bne.n	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025d4:	e02d      	b.n	8002632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f878 	bl	80026cc <I2C_IsAcknowledgeFailed>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e02d      	b.n	8002642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d021      	beq.n	8002632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ee:	f7fe fbfb 	bl	8000de8 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d302      	bcc.n	8002604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d116      	bne.n	8002632 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2220      	movs	r2, #32
 800260e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f043 0220 	orr.w	r2, r3, #32
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e007      	b.n	8002642 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263c:	2b80      	cmp	r3, #128	; 0x80
 800263e:	d1ca      	bne.n	80025d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b084      	sub	sp, #16
 800264e:	af00      	add	r7, sp, #0
 8002650:	60f8      	str	r0, [r7, #12]
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002656:	e02d      	b.n	80026b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f837 	bl	80026cc <I2C_IsAcknowledgeFailed>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e02d      	b.n	80026c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266e:	d021      	beq.n	80026b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002670:	f7fe fbba 	bl	8000de8 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	429a      	cmp	r2, r3
 800267e:	d302      	bcc.n	8002686 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d116      	bne.n	80026b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2220      	movs	r2, #32
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f043 0220 	orr.w	r2, r3, #32
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e007      	b.n	80026c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d1ca      	bne.n	8002658 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e2:	d11b      	bne.n	800271c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	f043 0204 	orr.w	r2, r3, #4
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_PWR_EnableBkUpAccess+0x14>)
 800272e:	2201      	movs	r2, #1
 8002730:	601a      	str	r2, [r3, #0]
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	420e0020 	.word	0x420e0020

08002740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e26c      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 8087 	beq.w	800286e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002760:	4b92      	ldr	r3, [pc, #584]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 030c 	and.w	r3, r3, #12
 8002768:	2b04      	cmp	r3, #4
 800276a:	d00c      	beq.n	8002786 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800276c:	4b8f      	ldr	r3, [pc, #572]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 030c 	and.w	r3, r3, #12
 8002774:	2b08      	cmp	r3, #8
 8002776:	d112      	bne.n	800279e <HAL_RCC_OscConfig+0x5e>
 8002778:	4b8c      	ldr	r3, [pc, #560]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002784:	d10b      	bne.n	800279e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002786:	4b89      	ldr	r3, [pc, #548]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d06c      	beq.n	800286c <HAL_RCC_OscConfig+0x12c>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d168      	bne.n	800286c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e246      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x76>
 80027a8:	4b80      	ldr	r3, [pc, #512]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a7f      	ldr	r2, [pc, #508]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80027ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	e02e      	b.n	8002814 <HAL_RCC_OscConfig+0xd4>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10c      	bne.n	80027d8 <HAL_RCC_OscConfig+0x98>
 80027be:	4b7b      	ldr	r3, [pc, #492]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a7a      	ldr	r2, [pc, #488]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80027c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	4b78      	ldr	r3, [pc, #480]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a77      	ldr	r2, [pc, #476]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80027d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e01d      	b.n	8002814 <HAL_RCC_OscConfig+0xd4>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0xbc>
 80027e2:	4b72      	ldr	r3, [pc, #456]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a71      	ldr	r2, [pc, #452]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b6f      	ldr	r3, [pc, #444]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6e      	ldr	r2, [pc, #440]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e00b      	b.n	8002814 <HAL_RCC_OscConfig+0xd4>
 80027fc:	4b6b      	ldr	r3, [pc, #428]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a6a      	ldr	r2, [pc, #424]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b68      	ldr	r3, [pc, #416]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a67      	ldr	r2, [pc, #412]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 800280e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002812:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe fae4 	bl	8000de8 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002824:	f7fe fae0 	bl	8000de8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e1fa      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	4b5d      	ldr	r3, [pc, #372]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0xe4>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fad0 	bl	8000de8 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800284c:	f7fe facc 	bl	8000de8 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1e6      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285e:	4b53      	ldr	r3, [pc, #332]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x10c>
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d063      	beq.n	8002942 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800287a:	4b4c      	ldr	r3, [pc, #304]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002886:	4b49      	ldr	r3, [pc, #292]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b08      	cmp	r3, #8
 8002890:	d11c      	bne.n	80028cc <HAL_RCC_OscConfig+0x18c>
 8002892:	4b46      	ldr	r3, [pc, #280]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d116      	bne.n	80028cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289e:	4b43      	ldr	r3, [pc, #268]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_RCC_OscConfig+0x176>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1ba      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b3d      	ldr	r3, [pc, #244]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4939      	ldr	r1, [pc, #228]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	e03a      	b.n	8002942 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d4:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <HAL_RCC_OscConfig+0x270>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe fa85 	bl	8000de8 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e2:	f7fe fa81 	bl	8000de8 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e19b      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f4:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4927      	ldr	r1, [pc, #156]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 8002910:	4313      	orrs	r3, r2
 8002912:	600b      	str	r3, [r1, #0]
 8002914:	e015      	b.n	8002942 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002916:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <HAL_RCC_OscConfig+0x270>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291c:	f7fe fa64 	bl	8000de8 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002924:	f7fe fa60 	bl	8000de8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e17a      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d03a      	beq.n	80029c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d019      	beq.n	800298a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002956:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295c:	f7fe fa44 	bl	8000de8 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002964:	f7fe fa40 	bl	8000de8 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e15a      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_RCC_OscConfig+0x26c>)
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002982:	2001      	movs	r0, #1
 8002984:	f000 faaa 	bl	8002edc <RCC_Delay>
 8002988:	e01c      	b.n	80029c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <HAL_RCC_OscConfig+0x274>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002990:	f7fe fa2a 	bl	8000de8 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002996:	e00f      	b.n	80029b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002998:	f7fe fa26 	bl	8000de8 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d908      	bls.n	80029b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e140      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000
 80029b0:	42420000 	.word	0x42420000
 80029b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	4b9e      	ldr	r3, [pc, #632]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e9      	bne.n	8002998 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80a6 	beq.w	8002b1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d6:	4b97      	ldr	r3, [pc, #604]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10d      	bne.n	80029fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	4b94      	ldr	r3, [pc, #592]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	4a93      	ldr	r2, [pc, #588]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ec:	61d3      	str	r3, [r2, #28]
 80029ee:	4b91      	ldr	r3, [pc, #580]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fa:	2301      	movs	r3, #1
 80029fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fe:	4b8e      	ldr	r3, [pc, #568]	; (8002c38 <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d118      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0a:	4b8b      	ldr	r3, [pc, #556]	; (8002c38 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a8a      	ldr	r2, [pc, #552]	; (8002c38 <HAL_RCC_OscConfig+0x4f8>)
 8002a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a16:	f7fe f9e7 	bl	8000de8 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1e:	f7fe f9e3 	bl	8000de8 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b64      	cmp	r3, #100	; 0x64
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e0fd      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a30:	4b81      	ldr	r3, [pc, #516]	; (8002c38 <HAL_RCC_OscConfig+0x4f8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d106      	bne.n	8002a52 <HAL_RCC_OscConfig+0x312>
 8002a44:	4b7b      	ldr	r3, [pc, #492]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	4a7a      	ldr	r2, [pc, #488]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6213      	str	r3, [r2, #32]
 8002a50:	e02d      	b.n	8002aae <HAL_RCC_OscConfig+0x36e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x334>
 8002a5a:	4b76      	ldr	r3, [pc, #472]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	4a75      	ldr	r2, [pc, #468]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6213      	str	r3, [r2, #32]
 8002a66:	4b73      	ldr	r3, [pc, #460]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a72      	ldr	r2, [pc, #456]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002a6c:	f023 0304 	bic.w	r3, r3, #4
 8002a70:	6213      	str	r3, [r2, #32]
 8002a72:	e01c      	b.n	8002aae <HAL_RCC_OscConfig+0x36e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d10c      	bne.n	8002a96 <HAL_RCC_OscConfig+0x356>
 8002a7c:	4b6d      	ldr	r3, [pc, #436]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4a6c      	ldr	r2, [pc, #432]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002a82:	f043 0304 	orr.w	r3, r3, #4
 8002a86:	6213      	str	r3, [r2, #32]
 8002a88:	4b6a      	ldr	r3, [pc, #424]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a69      	ldr	r2, [pc, #420]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e00b      	b.n	8002aae <HAL_RCC_OscConfig+0x36e>
 8002a96:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4a66      	ldr	r2, [pc, #408]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6213      	str	r3, [r2, #32]
 8002aa2:	4b64      	ldr	r3, [pc, #400]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	4a63      	ldr	r2, [pc, #396]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002aa8:	f023 0304 	bic.w	r3, r3, #4
 8002aac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d015      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab6:	f7fe f997 	bl	8000de8 <HAL_GetTick>
 8002aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abc:	e00a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002abe:	f7fe f993 	bl	8000de8 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e0ab      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad4:	4b57      	ldr	r3, [pc, #348]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0ee      	beq.n	8002abe <HAL_RCC_OscConfig+0x37e>
 8002ae0:	e014      	b.n	8002b0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae2:	f7fe f981 	bl	8000de8 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae8:	e00a      	b.n	8002b00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aea:	f7fe f97d 	bl	8000de8 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e095      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b00:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1ee      	bne.n	8002aea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d105      	bne.n	8002b1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b12:	4b48      	ldr	r3, [pc, #288]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4a47      	ldr	r2, [pc, #284]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8081 	beq.w	8002c2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b28:	4b42      	ldr	r3, [pc, #264]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d061      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d146      	bne.n	8002bca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b3c:	4b3f      	ldr	r3, [pc, #252]	; (8002c3c <HAL_RCC_OscConfig+0x4fc>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b42:	f7fe f951 	bl	8000de8 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe f94d 	bl	8000de8 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e067      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5c:	4b35      	ldr	r3, [pc, #212]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f0      	bne.n	8002b4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b70:	d108      	bne.n	8002b84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b72:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	f023 020f 	bic.w	r2, r3, #15
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	492d      	ldr	r1, [pc, #180]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b84:	4b2b      	ldr	r3, [pc, #172]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a19      	ldr	r1, [r3, #32]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	430b      	orrs	r3, r1
 8002b96:	4927      	ldr	r1, [pc, #156]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <HAL_RCC_OscConfig+0x4fc>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba2:	f7fe f921 	bl	8000de8 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002baa:	f7fe f91d 	bl	8000de8 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e037      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x46a>
 8002bc8:	e02f      	b.n	8002c2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bca:	4b1c      	ldr	r3, [pc, #112]	; (8002c3c <HAL_RCC_OscConfig+0x4fc>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd0:	f7fe f90a 	bl	8000de8 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe f906 	bl	8000de8 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e020      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x498>
 8002bf6:	e018      	b.n	8002c2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e013      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_OscConfig+0x4f4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d106      	bne.n	8002c26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d001      	beq.n	8002c2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	42420060 	.word	0x42420060

08002c40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0a0      	b.n	8002d96 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d020      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c6c:	4b4c      	ldr	r3, [pc, #304]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4a4b      	ldr	r2, [pc, #300]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002c72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c84:	4b46      	ldr	r3, [pc, #280]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4a45      	ldr	r2, [pc, #276]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002c8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c90:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	4940      	ldr	r1, [pc, #256]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d040      	beq.n	8002d30 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	4b3a      	ldr	r3, [pc, #232]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d115      	bne.n	8002cee <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e067      	b.n	8002d96 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d107      	bne.n	8002cde <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cce:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e05b      	b.n	8002d96 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cde:	4b30      	ldr	r3, [pc, #192]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e053      	b.n	8002d96 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cee:	4b2c      	ldr	r3, [pc, #176]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4929      	ldr	r1, [pc, #164]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d00:	f7fe f872 	bl	8000de8 <HAL_GetTick>
 8002d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	e00a      	b.n	8002d1e <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d08:	f7fe f86e 	bl	8000de8 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e03b      	b.n	8002d96 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 020c 	and.w	r2, r3, #12
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d1eb      	bne.n	8002d08 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3c:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4915      	ldr	r1, [pc, #84]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	490d      	ldr	r1, [pc, #52]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d6e:	f000 f81f 	bl	8002db0 <HAL_RCC_GetSysClockFreq>
 8002d72:	4601      	mov	r1, r0
 8002d74:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_RCC_ClockConfig+0x160>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <HAL_RCC_ClockConfig+0x164>)
 8002d80:	5cd3      	ldrb	r3, [r2, r3]
 8002d82:	fa21 f303 	lsr.w	r3, r1, r3
 8002d86:	4a08      	ldr	r2, [pc, #32]	; (8002da8 <HAL_RCC_ClockConfig+0x168>)
 8002d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <HAL_RCC_ClockConfig+0x16c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd ffe8 	bl	8000d64 <HAL_InitTick>

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40021000 	.word	0x40021000
 8002da4:	0800690c 	.word	0x0800690c
 8002da8:	20000000 	.word	0x20000000
 8002dac:	20000004 	.word	0x20000004

08002db0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db0:	b490      	push	{r4, r7}
 8002db2:	b08e      	sub	sp, #56	; 0x38
 8002db4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002db6:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002db8:	f107 0414 	add.w	r4, r7, #20
 8002dbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002dc2:	4b29      	ldr	r3, [pc, #164]	; (8002e68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc4:	1d3c      	adds	r4, r7, #4
 8002dc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002de0:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d002      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x46>
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d003      	beq.n	8002dfc <HAL_RCC_GetSysClockFreq+0x4c>
 8002df4:	e02c      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002df6:	4b1e      	ldr	r3, [pc, #120]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002df8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dfa:	e02c      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	0c9b      	lsrs	r3, r3, #18
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e08:	4413      	add	r3, r2
 8002e0a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d012      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002e1a:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e26:	4413      	add	r3, r2
 8002e28:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	4a0f      	ldr	r2, [pc, #60]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e32:	fb02 f203 	mul.w	r2, r2, r3
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3e:	e004      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	4a0c      	ldr	r2, [pc, #48]	; (8002e74 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8002e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e4e:	e002      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e50:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3738      	adds	r7, #56	; 0x38
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bc90      	pop	{r4, r7}
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	080067c4 	.word	0x080067c4
 8002e68:	080067d4 	.word	0x080067d4
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	007a1200 	.word	0x007a1200
 8002e74:	003d0900 	.word	0x003d0900

08002e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e7c:	4b02      	ldr	r3, [pc, #8]	; (8002e88 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	20000000 	.word	0x20000000

08002e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e90:	f7ff fff2 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002e94:	4601      	mov	r1, r0
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	4a03      	ldr	r2, [pc, #12]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ea2:	5cd3      	ldrb	r3, [r2, r3]
 8002ea4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	0800691c 	.word	0x0800691c

08002eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002eb8:	f7ff ffde 	bl	8002e78 <HAL_RCC_GetHCLKFreq>
 8002ebc:	4601      	mov	r1, r0
 8002ebe:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	0adb      	lsrs	r3, r3, #11
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	4a03      	ldr	r2, [pc, #12]	; (8002ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eca:	5cd3      	ldrb	r3, [r2, r3]
 8002ecc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	0800691c 	.word	0x0800691c

08002edc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ee4:	4b0a      	ldr	r3, [pc, #40]	; (8002f10 <RCC_Delay+0x34>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	; (8002f14 <RCC_Delay+0x38>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	0a5b      	lsrs	r3, r3, #9
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ef8:	bf00      	nop
  }
  while (Delay --);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1e5a      	subs	r2, r3, #1
 8002efe:	60fa      	str	r2, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f9      	bne.n	8002ef8 <RCC_Delay+0x1c>
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000000 	.word	0x20000000
 8002f14:	10624dd3 	.word	0x10624dd3

08002f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d07d      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f34:	2300      	movs	r3, #0
 8002f36:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f38:	4b47      	ldr	r3, [pc, #284]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10d      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f44:	4b44      	ldr	r3, [pc, #272]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4a43      	ldr	r2, [pc, #268]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	61d3      	str	r3, [r2, #28]
 8002f50:	4b41      	ldr	r3, [pc, #260]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	4b3e      	ldr	r3, [pc, #248]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d118      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6c:	4b3b      	ldr	r3, [pc, #236]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a3a      	ldr	r2, [pc, #232]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f78:	f7fd ff36 	bl	8000de8 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7e:	e008      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f80:	f7fd ff32 	bl	8000de8 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e05e      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f92:	4b32      	ldr	r3, [pc, #200]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f9e:	4b2e      	ldr	r3, [pc, #184]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d02e      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d027      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fbc:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fc6:	4b26      	ldr	r3, [pc, #152]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fcc:	4b24      	ldr	r3, [pc, #144]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002fd2:	4a21      	ldr	r2, [pc, #132]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d014      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe2:	f7fd ff01 	bl	8000de8 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fd fefd 	bl	8000de8 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e027      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0ee      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	490f      	ldr	r1, [pc, #60]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800301a:	4313      	orrs	r3, r2
 800301c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d105      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800302a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4903      	ldr	r1, [pc, #12]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	40021000 	.word	0x40021000
 800305c:	40007000 	.word	0x40007000
 8003060:	42420440 	.word	0x42420440

08003064 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d002      	beq.n	8003080 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 800307a:	2b02      	cmp	r3, #2
 800307c:	d033      	beq.n	80030e6 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800307e:	e041      	b.n	8003104 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      temp_reg = RCC->BDCR;
 8003080:	4b23      	ldr	r3, [pc, #140]	; (8003110 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	60bb      	str	r3, [r7, #8]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800308c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003090:	d108      	bne.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
        frequency = LSE_VALUE;
 800309c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	e01f      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ae:	d109      	bne.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80030b0:	4b17      	ldr	r3, [pc, #92]	; (8003110 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = LSI_VALUE;
 80030bc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	e00f      	b.n	80030e4 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ce:	d118      	bne.n	8003102 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80030d0:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d012      	beq.n	8003102 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        frequency = HSE_VALUE / 128U;
 80030dc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80030e0:	60fb      	str	r3, [r7, #12]
      break;
 80030e2:	e00e      	b.n	8003102 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 80030e4:	e00d      	b.n	8003102 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030e6:	f7ff fee5 	bl	8002eb4 <HAL_RCC_GetPCLK2Freq>
 80030ea:	4602      	mov	r2, r0
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	0b9b      	lsrs	r3, r3, #14
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	3301      	adds	r3, #1
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	60fb      	str	r3, [r7, #12]
      break;
 8003100:	e000      	b.n	8003104 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      break;
 8003102:	bf00      	nop
    }
  }
  return (frequency);
 8003104:	68fb      	ldr	r3, [r7, #12]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000

08003114 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e084      	b.n	8003234 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	7c5b      	ldrb	r3, [r3, #17]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fd fc72 	bl	8000a24 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fc1e 	bl	8003988 <HAL_RTC_WaitForSynchro>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2204      	movs	r2, #4
 8003156:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e06b      	b.n	8003234 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fcd7 	bl	8003b10 <RTC_EnterInitMode>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d004      	beq.n	8003172 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2204      	movs	r2, #4
 800316c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e060      	b.n	8003234 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0207 	bic.w	r2, r2, #7
 8003180:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800318a:	4b2c      	ldr	r3, [pc, #176]	; (800323c <HAL_RTC_Init+0x128>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a2b      	ldr	r2, [pc, #172]	; (800323c <HAL_RTC_Init+0x128>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003196:	4b29      	ldr	r3, [pc, #164]	; (800323c <HAL_RTC_Init+0x128>)
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	4926      	ldr	r1, [pc, #152]	; (800323c <HAL_RTC_Init+0x128>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d003      	beq.n	80031ba <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	e00e      	b.n	80031d8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80031ba:	2001      	movs	r0, #1
 80031bc:	f7ff ff52 	bl	8003064 <HAL_RCCEx_GetPeriphCLKFreq>
 80031c0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d104      	bne.n	80031d2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2204      	movs	r2, #4
 80031cc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e030      	b.n	8003234 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f023 010f 	bic.w	r1, r3, #15
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	0c1a      	lsrs	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0c1b      	lsrs	r3, r3, #16
 80031f6:	041b      	lsls	r3, r3, #16
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	b291      	uxth	r1, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	430b      	orrs	r3, r1
 8003202:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fcab 	bl	8003b60 <RTC_ExitInitMode>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2204      	movs	r2, #4
 8003214:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00c      	b.n	8003234 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003232:	2300      	movs	r3, #0
  }
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40006c00 	.word	0x40006c00

08003240 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	2300      	movs	r3, #0
 8003252:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_RTC_SetTime+0x20>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e080      	b.n	8003366 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	7c1b      	ldrb	r3, [r3, #16]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_RTC_SetTime+0x30>
 800326c:	2302      	movs	r3, #2
 800326e:	e07a      	b.n	8003366 <HAL_RTC_SetTime+0x126>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2202      	movs	r2, #2
 800327a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d113      	bne.n	80032aa <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800328c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	785b      	ldrb	r3, [r3, #1]
 8003294:	4619      	mov	r1, r3
 8003296:	460b      	mov	r3, r1
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a5b      	subs	r3, r3, r1
 800329c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800329e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80032a4:	4413      	add	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	e01e      	b.n	80032e8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fc9b 	bl	8003bea <RTC_Bcd2ToByte>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80032bc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	785b      	ldrb	r3, [r3, #1]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fc90 	bl	8003bea <RTC_Bcd2ToByte>
 80032ca:	4603      	mov	r3, r0
 80032cc:	461a      	mov	r2, r3
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80032d6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	789b      	ldrb	r3, [r3, #2]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fc84 	bl	8003bea <RTC_Bcd2ToByte>
 80032e2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80032e4:	4423      	add	r3, r4
 80032e6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80032e8:	6979      	ldr	r1, [r7, #20]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fba9 	bl	8003a42 <RTC_WriteTimeCounter>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2204      	movs	r2, #4
 80032fa:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e02f      	b.n	8003366 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0205 	bic.w	r2, r2, #5
 8003314:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 fbba 	bl	8003a90 <RTC_ReadAlarmCounter>
 800331c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d018      	beq.n	8003358 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	429a      	cmp	r2, r3
 800332c:	d214      	bcs.n	8003358 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003334:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003338:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800333a:	6939      	ldr	r1, [r7, #16]
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fbc0 	bl	8003ac2 <RTC_WriteAlarmCounter>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2204      	movs	r2, #4
 800334c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e006      	b.n	8003366 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003364:	2300      	movs	r3, #0
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	bd90      	pop	{r4, r7, pc}
	...

08003370 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_RTC_GetTime+0x28>
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0b5      	b.n	8003508 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e0ac      	b.n	8003508 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fb17 	bl	80039e2 <RTC_ReadTimeCounter>
 80033b4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	4a55      	ldr	r2, [pc, #340]	; (8003510 <HAL_RTC_GetTime+0x1a0>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	0adb      	lsrs	r3, r3, #11
 80033c0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4b52      	ldr	r3, [pc, #328]	; (8003510 <HAL_RTC_GetTime+0x1a0>)
 80033c6:	fba3 1302 	umull	r1, r3, r3, r2
 80033ca:	0adb      	lsrs	r3, r3, #11
 80033cc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80033d0:	fb01 f303 	mul.w	r3, r1, r3
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	4a4f      	ldr	r2, [pc, #316]	; (8003514 <HAL_RTC_GetTime+0x1a4>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	095b      	lsrs	r3, r3, #5
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	4a4a      	ldr	r2, [pc, #296]	; (8003510 <HAL_RTC_GetTime+0x1a0>)
 80033e8:	fba2 1203 	umull	r1, r2, r2, r3
 80033ec:	0ad2      	lsrs	r2, r2, #11
 80033ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80033f2:	fb01 f202 	mul.w	r2, r1, r2
 80033f6:	1a9a      	subs	r2, r3, r2
 80033f8:	4b46      	ldr	r3, [pc, #280]	; (8003514 <HAL_RTC_GetTime+0x1a4>)
 80033fa:	fba3 1302 	umull	r1, r3, r3, r2
 80033fe:	0959      	lsrs	r1, r3, #5
 8003400:	460b      	mov	r3, r1
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a5b      	subs	r3, r3, r1
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	1ad1      	subs	r1, r2, r3
 800340a:	b2ca      	uxtb	r2, r1
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	2b17      	cmp	r3, #23
 8003414:	d955      	bls.n	80034c2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4a3f      	ldr	r2, [pc, #252]	; (8003518 <HAL_RTC_GetTime+0x1a8>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003422:	6939      	ldr	r1, [r7, #16]
 8003424:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <HAL_RTC_GetTime+0x1a8>)
 8003426:	fba3 2301 	umull	r2, r3, r3, r1
 800342a:	091a      	lsrs	r2, r3, #4
 800342c:	4613      	mov	r3, r2
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	1aca      	subs	r2, r1, r3
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fb27 	bl	8003a90 <RTC_ReadAlarmCounter>
 8003442:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344a:	d008      	beq.n	800345e <HAL_RTC_GetTime+0xee>
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	429a      	cmp	r2, r3
 8003452:	d904      	bls.n	800345e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	e002      	b.n	8003464 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800345e:	f04f 33ff 	mov.w	r3, #4294967295
 8003462:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	4a2d      	ldr	r2, [pc, #180]	; (800351c <HAL_RTC_GetTime+0x1ac>)
 8003468:	fb02 f303 	mul.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003472:	69b9      	ldr	r1, [r7, #24]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fae4 	bl	8003a42 <RTC_WriteTimeCounter>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e041      	b.n	8003508 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d00c      	beq.n	80034a6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	4413      	add	r3, r2
 8003492:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003494:	69f9      	ldr	r1, [r7, #28]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fb13 	bl	8003ac2 <RTC_WriteAlarmCounter>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e030      	b.n	8003508 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80034a6:	69f9      	ldr	r1, [r7, #28]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 fb0a 	bl	8003ac2 <RTC_WriteAlarmCounter>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e027      	b.n	8003508 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80034b8:	6979      	ldr	r1, [r7, #20]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fbb2 	bl	8003c24 <RTC_DateUpdate>
 80034c0:	e003      	b.n	80034ca <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d01a      	beq.n	8003506 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fb6b 	bl	8003bb0 <RTC_ByteToBcd2>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	785b      	ldrb	r3, [r3, #1]
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fb62 	bl	8003bb0 <RTC_ByteToBcd2>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	789b      	ldrb	r3, [r3, #2]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fb59 	bl	8003bb0 <RTC_ByteToBcd2>
 80034fe:	4603      	mov	r3, r0
 8003500:	461a      	mov	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3720      	adds	r7, #32
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}
 8003510:	91a2b3c5 	.word	0x91a2b3c5
 8003514:	88888889 	.word	0x88888889
 8003518:	aaaaaaab 	.word	0xaaaaaaab
 800351c:	00015180 	.word	0x00015180

08003520 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	61fb      	str	r3, [r7, #28]
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	2300      	movs	r3, #0
 8003536:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_RTC_SetDate+0x24>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e097      	b.n	8003678 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	7c1b      	ldrb	r3, [r3, #16]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_RTC_SetDate+0x34>
 8003550:	2302      	movs	r3, #2
 8003552:	e091      	b.n	8003678 <HAL_RTC_SetDate+0x158>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2202      	movs	r2, #2
 800355e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10c      	bne.n	8003580 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	78da      	ldrb	r2, [r3, #3]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	785a      	ldrb	r2, [r3, #1]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	789a      	ldrb	r2, [r3, #2]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	739a      	strb	r2, [r3, #14]
 800357e:	e01a      	b.n	80035b6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	78db      	ldrb	r3, [r3, #3]
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fb30 	bl	8003bea <RTC_Bcd2ToByte>
 800358a:	4603      	mov	r3, r0
 800358c:	461a      	mov	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	785b      	ldrb	r3, [r3, #1]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fb27 	bl	8003bea <RTC_Bcd2ToByte>
 800359c:	4603      	mov	r3, r0
 800359e:	461a      	mov	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	789b      	ldrb	r3, [r3, #2]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fb1e 	bl	8003bea <RTC_Bcd2ToByte>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	7bdb      	ldrb	r3, [r3, #15]
 80035ba:	4618      	mov	r0, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	7b59      	ldrb	r1, [r3, #13]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	7b9b      	ldrb	r3, [r3, #14]
 80035c4:	461a      	mov	r2, r3
 80035c6:	f000 fc09 	bl	8003ddc <RTC_WeekDayNum>
 80035ca:	4603      	mov	r3, r0
 80035cc:	461a      	mov	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	7b1a      	ldrb	r2, [r3, #12]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f000 fa01 	bl	80039e2 <RTC_ReadTimeCounter>
 80035e0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4a26      	ldr	r2, [pc, #152]	; (8003680 <HAL_RTC_SetDate+0x160>)
 80035e6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ea:	0adb      	lsrs	r3, r3, #11
 80035ec:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b18      	cmp	r3, #24
 80035f2:	d93a      	bls.n	800366a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	4a23      	ldr	r2, [pc, #140]	; (8003684 <HAL_RTC_SetDate+0x164>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	4a22      	ldr	r2, [pc, #136]	; (8003688 <HAL_RTC_SetDate+0x168>)
 8003600:	fb02 f303 	mul.w	r3, r2, r3
 8003604:	69fa      	ldr	r2, [r7, #28]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800360a:	69f9      	ldr	r1, [r7, #28]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 fa18 	bl	8003a42 <RTC_WriteTimeCounter>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2204      	movs	r2, #4
 800361c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e027      	b.n	8003678 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f000 fa31 	bl	8003a90 <RTC_ReadAlarmCounter>
 800362e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003636:	d018      	beq.n	800366a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	429a      	cmp	r2, r3
 800363e:	d214      	bcs.n	800366a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003646:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800364a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fa37 	bl	8003ac2 <RTC_WriteAlarmCounter>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2204      	movs	r2, #4
 800365e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e006      	b.n	8003678 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3720      	adds	r7, #32
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	91a2b3c5 	.word	0x91a2b3c5
 8003684:	aaaaaaab 	.word	0xaaaaaaab
 8003688:	00015180 	.word	0x00015180

0800368c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	2100      	movs	r1, #0
 800369e:	460a      	mov	r2, r1
 80036a0:	801a      	strh	r2, [r3, #0]
 80036a2:	460a      	mov	r2, r1
 80036a4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_RTC_GetDate+0x26>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e03a      	b.n	800372c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	2200      	movs	r2, #0
 80036bc:	4619      	mov	r1, r3
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7ff fe56 	bl	8003370 <HAL_RTC_GetTime>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e02e      	b.n	800372c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	7b1a      	ldrb	r2, [r3, #12]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	7bda      	ldrb	r2, [r3, #15]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	7b5a      	ldrb	r2, [r3, #13]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	7b9a      	ldrb	r2, [r3, #14]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01a      	beq.n	800372a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	78db      	ldrb	r3, [r3, #3]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fa59 	bl	8003bb0 <RTC_ByteToBcd2>
 80036fe:	4603      	mov	r3, r0
 8003700:	461a      	mov	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	785b      	ldrb	r3, [r3, #1]
 800370a:	4618      	mov	r0, r3
 800370c:	f000 fa50 	bl	8003bb0 <RTC_ByteToBcd2>
 8003710:	4603      	mov	r3, r0
 8003712:	461a      	mov	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	789b      	ldrb	r3, [r3, #2]
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fa47 	bl	8003bb0 <RTC_ByteToBcd2>
 8003722:	4603      	mov	r3, r0
 8003724:	461a      	mov	r2, r3
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3718      	adds	r7, #24
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003734:	b590      	push	{r4, r7, lr}
 8003736:	b089      	sub	sp, #36	; 0x24
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 8003740:	2300      	movs	r3, #0
 8003742:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	2100      	movs	r1, #0
 800374a:	460a      	mov	r2, r1
 800374c:	801a      	strh	r2, [r3, #0]
 800374e:	460a      	mov	r2, r1
 8003750:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_RTC_SetAlarm_IT+0x2a>
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e096      	b.n	8003890 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	7c1b      	ldrb	r3, [r3, #16]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_RTC_SetAlarm_IT+0x3a>
 800376a:	2302      	movs	r3, #2
 800376c:	e090      	b.n	8003890 <HAL_RTC_SetAlarm_IT+0x15c>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2202      	movs	r2, #2
 8003778:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800377a:	f107 0314 	add.w	r3, r7, #20
 800377e:	2200      	movs	r2, #0
 8003780:	4619      	mov	r1, r3
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff fdf4 	bl	8003370 <HAL_RTC_GetTime>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e07e      	b.n	8003890 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003792:	7d3b      	ldrb	r3, [r7, #20]
 8003794:	461a      	mov	r2, r3
 8003796:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800379a:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 800379e:	7d7b      	ldrb	r3, [r7, #21]
 80037a0:	4619      	mov	r1, r3
 80037a2:	460b      	mov	r3, r1
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a5b      	subs	r3, r3, r1
 80037a8:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80037aa:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 80037ac:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 80037ae:	4413      	add	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d113      	bne.n	80037e0 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80037c2:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	785b      	ldrb	r3, [r3, #1]
 80037ca:	4619      	mov	r1, r3
 80037cc:	460b      	mov	r3, r1
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a5b      	subs	r3, r3, r1
 80037d2:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80037d4:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 80037da:	4413      	add	r3, r2
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	e01e      	b.n	800381e <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fa00 	bl	8003bea <RTC_Bcd2ToByte>
 80037ea:	4603      	mov	r3, r0
 80037ec:	461a      	mov	r2, r3
 80037ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80037f2:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	785b      	ldrb	r3, [r3, #1]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 f9f5 	bl	8003bea <RTC_Bcd2ToByte>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	4613      	mov	r3, r2
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800380c:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	789b      	ldrb	r3, [r3, #2]
 8003812:	4618      	mov	r0, r3
 8003814:	f000 f9e9 	bl	8003bea <RTC_Bcd2ToByte>
 8003818:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 800381a:	4423      	add	r3, r4
 800381c:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	429a      	cmp	r2, r3
 8003824:	d205      	bcs.n	8003832 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800382c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003830:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003832:	69f9      	ldr	r1, [r7, #28]
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f944 	bl	8003ac2 <RTC_WriteAlarmCounter>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2204      	movs	r2, #4
 8003844:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e01f      	b.n	8003890 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0202 	mvn.w	r2, #2
 8003858:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0202 	orr.w	r2, r2, #2
 8003868:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RTC_SetAlarm_IT+0x164>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <HAL_RTC_SetAlarm_IT+0x164>)
 8003870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003874:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <HAL_RTC_SetAlarm_IT+0x164>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	4a07      	ldr	r2, [pc, #28]	; (8003898 <HAL_RTC_SetAlarm_IT+0x164>)
 800387c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003880:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800388e:	2300      	movs	r3, #0
  }
}
 8003890:	4618      	mov	r0, r3
 8003892:	3724      	adds	r7, #36	; 0x24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}
 8003898:	40010400 	.word	0x40010400

0800389c <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  uint32_t counter_alarm = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Alarm);

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_RTC_GetAlarm+0x1e>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RTC_GetAlarm+0x22>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e05a      	b.n	8003974 <HAL_RTC_GetAlarm+0xd8>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  /* Read Alarm counter in RTC registers */
  counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f8e6 	bl	8003a90 <RTC_ReadAlarmCounter>
 80038c4:	6178      	str	r0, [r7, #20]

  /* Fill the structure with the read parameters */
  /* Set hours in a day range (between 0 to 24)*/
  sAlarm->AlarmTime.Hours   = (uint32_t)((counter_alarm / 3600U) % 24U);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	4a2c      	ldr	r2, [pc, #176]	; (800397c <HAL_RTC_GetAlarm+0xe0>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	0ad9      	lsrs	r1, r3, #11
 80038d0:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <HAL_RTC_GetAlarm+0xe4>)
 80038d2:	fba3 2301 	umull	r2, r3, r3, r1
 80038d6:	091a      	lsrs	r2, r3, #4
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	1aca      	subs	r2, r1, r3
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RTC_GetAlarm+0xe0>)
 80038ec:	fba3 1302 	umull	r1, r3, r3, r2
 80038f0:	0adb      	lsrs	r3, r3, #11
 80038f2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	4a21      	ldr	r2, [pc, #132]	; (8003984 <HAL_RTC_GetAlarm+0xe8>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	b2da      	uxtb	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)((counter_alarm % 3600U) % 60U);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	4a1b      	ldr	r2, [pc, #108]	; (800397c <HAL_RTC_GetAlarm+0xe0>)
 800390e:	fba2 1203 	umull	r1, r2, r2, r3
 8003912:	0ad2      	lsrs	r2, r2, #11
 8003914:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003918:	fb01 f202 	mul.w	r2, r1, r2
 800391c:	1a9a      	subs	r2, r3, r2
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RTC_GetAlarm+0xe8>)
 8003920:	fba3 1302 	umull	r1, r3, r3, r2
 8003924:	0959      	lsrs	r1, r3, #5
 8003926:	460b      	mov	r3, r1
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a5b      	subs	r3, r3, r1
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	1ad1      	subs	r1, r2, r3
 8003930:	b2ca      	uxtb	r2, r1
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	709a      	strb	r2, [r3, #2]

  if (Format != RTC_FORMAT_BIN)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01a      	beq.n	8003972 <HAL_RTC_GetAlarm+0xd6>
  {
    sAlarm->AlarmTime.Hours   = RTC_ByteToBcd2(sAlarm->AlarmTime.Hours);
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f000 f935 	bl	8003bb0 <RTC_ByteToBcd2>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes);
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	785b      	ldrb	r3, [r3, #1]
 8003952:	4618      	mov	r0, r3
 8003954:	f000 f92c 	bl	8003bb0 <RTC_ByteToBcd2>
 8003958:	4603      	mov	r3, r0
 800395a:	461a      	mov	r2, r3
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds);
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	789b      	ldrb	r3, [r3, #2]
 8003964:	4618      	mov	r0, r3
 8003966:	f000 f923 	bl	8003bb0 <RTC_ByteToBcd2>
 800396a:	4603      	mov	r3, r0
 800396c:	461a      	mov	r2, r3
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	91a2b3c5 	.word	0x91a2b3c5
 8003980:	aaaaaaab 	.word	0xaaaaaaab
 8003984:	88888889 	.word	0x88888889

08003988 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e01d      	b.n	80039da <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0208 	bic.w	r2, r2, #8
 80039ac:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80039ae:	f7fd fa1b 	bl	8000de8 <HAL_GetTick>
 80039b2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80039b4:	e009      	b.n	80039ca <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80039b6:	f7fd fa17 	bl	8000de8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c4:	d901      	bls.n	80039ca <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e007      	b.n	80039da <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ee      	beq.n	80039b6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b087      	sub	sp, #28
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	827b      	strh	r3, [r7, #18]
 80039ee:	2300      	movs	r3, #0
 80039f0:	823b      	strh	r3, [r7, #16]
 80039f2:	2300      	movs	r3, #0
 80039f4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003a12:	8a7a      	ldrh	r2, [r7, #18]
 8003a14:	8a3b      	ldrh	r3, [r7, #16]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d008      	beq.n	8003a2c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003a1a:	8a3b      	ldrh	r3, [r7, #16]
 8003a1c:	041a      	lsls	r2, r3, #16
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	e004      	b.n	8003a36 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003a2c:	8a7b      	ldrh	r3, [r7, #18]
 8003a2e:	041a      	lsls	r2, r3, #16
 8003a30:	89fb      	ldrh	r3, [r7, #14]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003a36:	697b      	ldr	r3, [r7, #20]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f85d 	bl	8003b10 <RTC_EnterInitMode>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e011      	b.n	8003a86 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	0c12      	lsrs	r2, r2, #16
 8003a6a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	b292      	uxth	r2, r2
 8003a74:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f872 	bl	8003b60 <RTC_ExitInitMode>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	81fb      	strh	r3, [r7, #14]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003ab0:	89fb      	ldrh	r3, [r7, #14]
 8003ab2:	041a      	lsls	r2, r3, #16
 8003ab4:	89bb      	ldrh	r3, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc80      	pop	{r7}
 8003ac0:	4770      	bx	lr

08003ac2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f81d 	bl	8003b10 <RTC_EnterInitMode>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
 8003ae0:	e011      	b.n	8003b06 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	0c12      	lsrs	r2, r2, #16
 8003aea:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	b292      	uxth	r2, r2
 8003af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f832 	bl	8003b60 <RTC_ExitInitMode>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003b1c:	f7fd f964 	bl	8000de8 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b22:	e009      	b.n	8003b38 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b24:	f7fd f960 	bl	8000de8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b32:	d901      	bls.n	8003b38 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e00f      	b.n	8003b58 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0ee      	beq.n	8003b24 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0210 	orr.w	r2, r2, #16
 8003b54:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0210 	bic.w	r2, r2, #16
 8003b7a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003b7c:	f7fd f934 	bl	8000de8 <HAL_GetTick>
 8003b80:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b82:	e009      	b.n	8003b98 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b84:	f7fd f930 	bl	8000de8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b92:	d901      	bls.n	8003b98 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e007      	b.n	8003ba8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0ee      	beq.n	8003b84 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003bbe:	e005      	b.n	8003bcc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	3b0a      	subs	r3, #10
 8003bca:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	2b09      	cmp	r3, #9
 8003bd0:	d8f6      	bhi.n	8003bc0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	b2db      	uxtb	r3, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc80      	pop	{r7}
 8003be8:	4770      	bx	lr

08003bea <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b085      	sub	sp, #20
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003bf8:	79fb      	ldrb	r3, [r7, #7]
 8003bfa:	091b      	lsrs	r3, r3, #4
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	4413      	add	r3, r2
 8003c18:	b2db      	uxtb	r3, r3
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr

08003c24 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	7bdb      	ldrb	r3, [r3, #15]
 8003c42:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	7b5b      	ldrb	r3, [r3, #13]
 8003c48:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	7b9b      	ldrb	r3, [r3, #14]
 8003c4e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	60bb      	str	r3, [r7, #8]
 8003c54:	e06f      	b.n	8003d36 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d011      	beq.n	8003c80 <RTC_DateUpdate+0x5c>
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d00e      	beq.n	8003c80 <RTC_DateUpdate+0x5c>
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	d00b      	beq.n	8003c80 <RTC_DateUpdate+0x5c>
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b07      	cmp	r3, #7
 8003c6c:	d008      	beq.n	8003c80 <RTC_DateUpdate+0x5c>
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	2b08      	cmp	r3, #8
 8003c72:	d005      	beq.n	8003c80 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	2b0a      	cmp	r3, #10
 8003c78:	d002      	beq.n	8003c80 <RTC_DateUpdate+0x5c>
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b0c      	cmp	r3, #12
 8003c7e:	d117      	bne.n	8003cb0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b1e      	cmp	r3, #30
 8003c84:	d803      	bhi.n	8003c8e <RTC_DateUpdate+0x6a>
      {
        day++;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003c8c:	e050      	b.n	8003d30 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b0c      	cmp	r3, #12
 8003c92:	d005      	beq.n	8003ca0 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	3301      	adds	r3, #1
 8003c98:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003c9e:	e047      	b.n	8003d30 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
          year++;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3301      	adds	r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003cae:	e03f      	b.n	8003d30 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d008      	beq.n	8003cc8 <RTC_DateUpdate+0xa4>
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d005      	beq.n	8003cc8 <RTC_DateUpdate+0xa4>
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b09      	cmp	r3, #9
 8003cc0:	d002      	beq.n	8003cc8 <RTC_DateUpdate+0xa4>
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b0b      	cmp	r3, #11
 8003cc6:	d10c      	bne.n	8003ce2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b1d      	cmp	r3, #29
 8003ccc:	d803      	bhi.n	8003cd6 <RTC_DateUpdate+0xb2>
      {
        day++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003cd4:	e02c      	b.n	8003d30 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003ce0:	e026      	b.n	8003d30 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d123      	bne.n	8003d30 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2b1b      	cmp	r3, #27
 8003cec:	d803      	bhi.n	8003cf6 <RTC_DateUpdate+0xd2>
      {
        day++;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	e01c      	b.n	8003d30 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2b1c      	cmp	r3, #28
 8003cfa:	d111      	bne.n	8003d20 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 f839 	bl	8003d78 <RTC_IsLeapYear>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	e00d      	b.n	8003d30 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	3301      	adds	r3, #1
 8003d18:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	e007      	b.n	8003d30 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b1d      	cmp	r3, #29
 8003d24:	d104      	bne.n	8003d30 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	3301      	adds	r3, #1
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d38b      	bcc.n	8003c56 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6978      	ldr	r0, [r7, #20]
 8003d62:	f000 f83b 	bl	8003ddc <RTC_WeekDayNum>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	731a      	strb	r2, [r3, #12]
}
 8003d6e:	bf00      	nop
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	f003 0303 	and.w	r3, r3, #3
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e01d      	b.n	8003dce <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	4a10      	ldr	r2, [pc, #64]	; (8003dd8 <RTC_IsLeapYear+0x60>)
 8003d96:	fba2 1203 	umull	r1, r2, r2, r3
 8003d9a:	0952      	lsrs	r2, r2, #5
 8003d9c:	2164      	movs	r1, #100	; 0x64
 8003d9e:	fb01 f202 	mul.w	r2, r1, r2
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e00f      	b.n	8003dce <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <RTC_IsLeapYear+0x60>)
 8003db2:	fba2 1203 	umull	r1, r2, r2, r3
 8003db6:	09d2      	lsrs	r2, r2, #7
 8003db8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003dbc:	fb01 f202 	mul.w	r2, r1, r2
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003dcc:	2300      	movs	r3, #0
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	51eb851f 	.word	0x51eb851f

08003ddc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	70fb      	strb	r3, [r7, #3]
 8003de8:	4613      	mov	r3, r2
 8003dea:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003dfa:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d82d      	bhi.n	8003e5e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	4613      	mov	r3, r2
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	4413      	add	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ec0 <RTC_WeekDayNum+0xe4>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	085a      	lsrs	r2, r3, #1
 8003e16:	78bb      	ldrb	r3, [r7, #2]
 8003e18:	441a      	add	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	441a      	add	r2, r3
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	441a      	add	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	4926      	ldr	r1, [pc, #152]	; (8003ec4 <RTC_WeekDayNum+0xe8>)
 8003e2c:	fba1 1303 	umull	r1, r3, r1, r3
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	1ad2      	subs	r2, r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	4922      	ldr	r1, [pc, #136]	; (8003ec4 <RTC_WeekDayNum+0xe8>)
 8003e3a:	fba1 1303 	umull	r1, r3, r1, r3
 8003e3e:	09db      	lsrs	r3, r3, #7
 8003e40:	4413      	add	r3, r2
 8003e42:	1d1a      	adds	r2, r3, #4
 8003e44:	4b20      	ldr	r3, [pc, #128]	; (8003ec8 <RTC_WeekDayNum+0xec>)
 8003e46:	fba3 1302 	umull	r1, r3, r3, r2
 8003e4a:	1ad1      	subs	r1, r2, r3
 8003e4c:	0849      	lsrs	r1, r1, #1
 8003e4e:	440b      	add	r3, r1
 8003e50:	0899      	lsrs	r1, r3, #2
 8003e52:	460b      	mov	r3, r1
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	1a5b      	subs	r3, r3, r1
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	e029      	b.n	8003eb2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	4a15      	ldr	r2, [pc, #84]	; (8003ec0 <RTC_WeekDayNum+0xe4>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	085a      	lsrs	r2, r3, #1
 8003e72:	78bb      	ldrb	r3, [r7, #2]
 8003e74:	441a      	add	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	441a      	add	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	441a      	add	r2, r3
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4910      	ldr	r1, [pc, #64]	; (8003ec4 <RTC_WeekDayNum+0xe8>)
 8003e84:	fba1 1303 	umull	r1, r3, r1, r3
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	1ad2      	subs	r2, r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	490d      	ldr	r1, [pc, #52]	; (8003ec4 <RTC_WeekDayNum+0xe8>)
 8003e90:	fba1 1303 	umull	r1, r3, r1, r3
 8003e94:	09db      	lsrs	r3, r3, #7
 8003e96:	4413      	add	r3, r2
 8003e98:	1c9a      	adds	r2, r3, #2
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <RTC_WeekDayNum+0xec>)
 8003e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea0:	1ad1      	subs	r1, r2, r3
 8003ea2:	0849      	lsrs	r1, r1, #1
 8003ea4:	440b      	add	r3, r1
 8003ea6:	0899      	lsrs	r1, r3, #2
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	1a5b      	subs	r3, r3, r1
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	b2db      	uxtb	r3, r3
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	38e38e39 	.word	0x38e38e39
 8003ec4:	51eb851f 	.word	0x51eb851f
 8003ec8:	24924925 	.word	0x24924925

08003ecc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e01d      	b.n	8003f1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fc fdd8 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f000 f9fe 	bl	800430c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e01d      	b.n	8003f70 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d106      	bne.n	8003f4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7fc fd8f 	bl	8000a6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f000 f9d3 	bl	800430c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2201      	movs	r2, #1
 8003f88:	6839      	ldr	r1, [r7, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fcb0 	bl	80048f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1a      	ldr	r2, [pc, #104]	; (8004000 <HAL_TIM_PWM_Start+0x88>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00e      	beq.n	8003fb8 <HAL_TIM_PWM_Start+0x40>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a19      	ldr	r2, [pc, #100]	; (8004004 <HAL_TIM_PWM_Start+0x8c>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d009      	beq.n	8003fb8 <HAL_TIM_PWM_Start+0x40>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a17      	ldr	r2, [pc, #92]	; (8004008 <HAL_TIM_PWM_Start+0x90>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d004      	beq.n	8003fb8 <HAL_TIM_PWM_Start+0x40>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a16      	ldr	r2, [pc, #88]	; (800400c <HAL_TIM_PWM_Start+0x94>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d101      	bne.n	8003fbc <HAL_TIM_PWM_Start+0x44>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <HAL_TIM_PWM_Start+0x46>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d007      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b06      	cmp	r3, #6
 8003fe2:	d007      	beq.n	8003ff4 <HAL_TIM_PWM_Start+0x7c>
  {
    __HAL_TIM_ENABLE(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40012c00 	.word	0x40012c00
 8004004:	40014000 	.word	0x40014000
 8004008:	40014400 	.word	0x40014400
 800400c:	40014800 	.word	0x40014800

08004010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004026:	2302      	movs	r3, #2
 8004028:	e0b4      	b.n	8004194 <HAL_TIM_PWM_ConfigChannel+0x184>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b0c      	cmp	r3, #12
 800403e:	f200 809f 	bhi.w	8004180 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004042:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004048:	0800407d 	.word	0x0800407d
 800404c:	08004181 	.word	0x08004181
 8004050:	08004181 	.word	0x08004181
 8004054:	08004181 	.word	0x08004181
 8004058:	080040bd 	.word	0x080040bd
 800405c:	08004181 	.word	0x08004181
 8004060:	08004181 	.word	0x08004181
 8004064:	08004181 	.word	0x08004181
 8004068:	080040ff 	.word	0x080040ff
 800406c:	08004181 	.word	0x08004181
 8004070:	08004181 	.word	0x08004181
 8004074:	08004181 	.word	0x08004181
 8004078:	0800413f 	.word	0x0800413f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68b9      	ldr	r1, [r7, #8]
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f9c2 	bl	800440c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0208 	orr.w	r2, r2, #8
 8004096:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0204 	bic.w	r2, r2, #4
 80040a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6999      	ldr	r1, [r3, #24]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	619a      	str	r2, [r3, #24]
      break;
 80040ba:	e062      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fa26 	bl	8004514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6999      	ldr	r1, [r3, #24]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	021a      	lsls	r2, r3, #8
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	619a      	str	r2, [r3, #24]
      break;
 80040fc:	e041      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fa81 	bl	800460c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0208 	orr.w	r2, r2, #8
 8004118:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69da      	ldr	r2, [r3, #28]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0204 	bic.w	r2, r2, #4
 8004128:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	69d9      	ldr	r1, [r3, #28]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	691a      	ldr	r2, [r3, #16]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	61da      	str	r2, [r3, #28]
      break;
 800413c:	e021      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fadd 	bl	8004704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69da      	ldr	r2, [r3, #28]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004158:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	69da      	ldr	r2, [r3, #28]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004168:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69d9      	ldr	r1, [r3, #28]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	021a      	lsls	r2, r3, #8
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	61da      	str	r2, [r3, #28]
      break;
 800417e:	e000      	b.n	8004182 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004180:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_TIM_ConfigClockSource+0x18>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e0a6      	b.n	8004302 <HAL_TIM_ConfigClockSource+0x166>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	d067      	beq.n	80042bc <HAL_TIM_ConfigClockSource+0x120>
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d80b      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x6c>
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d073      	beq.n	80042dc <HAL_TIM_ConfigClockSource+0x140>
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d802      	bhi.n	80041fe <HAL_TIM_ConfigClockSource+0x62>
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d06f      	beq.n	80042dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80041fc:	e078      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d06c      	beq.n	80042dc <HAL_TIM_ConfigClockSource+0x140>
 8004202:	2b30      	cmp	r3, #48	; 0x30
 8004204:	d06a      	beq.n	80042dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004206:	e073      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004208:	2b70      	cmp	r3, #112	; 0x70
 800420a:	d00d      	beq.n	8004228 <HAL_TIM_ConfigClockSource+0x8c>
 800420c:	2b70      	cmp	r3, #112	; 0x70
 800420e:	d804      	bhi.n	800421a <HAL_TIM_ConfigClockSource+0x7e>
 8004210:	2b50      	cmp	r3, #80	; 0x50
 8004212:	d033      	beq.n	800427c <HAL_TIM_ConfigClockSource+0xe0>
 8004214:	2b60      	cmp	r3, #96	; 0x60
 8004216:	d041      	beq.n	800429c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004218:	e06a      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421e:	d066      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x152>
 8004220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004224:	d017      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004226:	e063      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	6899      	ldr	r1, [r3, #8]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f000 fb3b 	bl	80048b2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800424a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	609a      	str	r2, [r3, #8]
      break;
 8004254:	e04c      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6899      	ldr	r1, [r3, #8]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f000 fb24 	bl	80048b2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004278:	609a      	str	r2, [r3, #8]
      break;
 800427a:	e039      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	461a      	mov	r2, r3
 800428a:	f000 fa9b 	bl	80047c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2150      	movs	r1, #80	; 0x50
 8004294:	4618      	mov	r0, r3
 8004296:	f000 faf2 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 800429a:	e029      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	6859      	ldr	r1, [r3, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	461a      	mov	r2, r3
 80042aa:	f000 fab9 	bl	8004820 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2160      	movs	r1, #96	; 0x60
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fae2 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 80042ba:	e019      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6818      	ldr	r0, [r3, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	6859      	ldr	r1, [r3, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	461a      	mov	r2, r3
 80042ca:	f000 fa7b 	bl	80047c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2140      	movs	r1, #64	; 0x40
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 fad2 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 80042da:	e009      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4619      	mov	r1, r3
 80042e6:	4610      	mov	r0, r2
 80042e8:	f000 fac9 	bl	800487e <TIM_ITRx_SetConfig>
      break;
 80042ec:	e000      	b.n	80042f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80042ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a35      	ldr	r2, [pc, #212]	; (80043f4 <TIM_Base_SetConfig+0xe8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00b      	beq.n	800433c <TIM_Base_SetConfig+0x30>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432a:	d007      	beq.n	800433c <TIM_Base_SetConfig+0x30>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a32      	ldr	r2, [pc, #200]	; (80043f8 <TIM_Base_SetConfig+0xec>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d003      	beq.n	800433c <TIM_Base_SetConfig+0x30>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a31      	ldr	r2, [pc, #196]	; (80043fc <TIM_Base_SetConfig+0xf0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d108      	bne.n	800434e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a28      	ldr	r2, [pc, #160]	; (80043f4 <TIM_Base_SetConfig+0xe8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d017      	beq.n	8004386 <TIM_Base_SetConfig+0x7a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435c:	d013      	beq.n	8004386 <TIM_Base_SetConfig+0x7a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a25      	ldr	r2, [pc, #148]	; (80043f8 <TIM_Base_SetConfig+0xec>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00f      	beq.n	8004386 <TIM_Base_SetConfig+0x7a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a24      	ldr	r2, [pc, #144]	; (80043fc <TIM_Base_SetConfig+0xf0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00b      	beq.n	8004386 <TIM_Base_SetConfig+0x7a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a23      	ldr	r2, [pc, #140]	; (8004400 <TIM_Base_SetConfig+0xf4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <TIM_Base_SetConfig+0x7a>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a22      	ldr	r2, [pc, #136]	; (8004404 <TIM_Base_SetConfig+0xf8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d003      	beq.n	8004386 <TIM_Base_SetConfig+0x7a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a21      	ldr	r2, [pc, #132]	; (8004408 <TIM_Base_SetConfig+0xfc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d108      	bne.n	8004398 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a0d      	ldr	r2, [pc, #52]	; (80043f4 <TIM_Base_SetConfig+0xe8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00b      	beq.n	80043dc <TIM_Base_SetConfig+0xd0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a0e      	ldr	r2, [pc, #56]	; (8004400 <TIM_Base_SetConfig+0xf4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d007      	beq.n	80043dc <TIM_Base_SetConfig+0xd0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a0d      	ldr	r2, [pc, #52]	; (8004404 <TIM_Base_SetConfig+0xf8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d003      	beq.n	80043dc <TIM_Base_SetConfig+0xd0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a0c      	ldr	r2, [pc, #48]	; (8004408 <TIM_Base_SetConfig+0xfc>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d103      	bne.n	80043e4 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	615a      	str	r2, [r3, #20]
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40014000 	.word	0x40014000
 8004404:	40014400 	.word	0x40014400
 8004408:	40014800 	.word	0x40014800

0800440c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0303 	bic.w	r3, r3, #3
 8004442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f023 0302 	bic.w	r3, r3, #2
 8004454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a28      	ldr	r2, [pc, #160]	; (8004504 <TIM_OC1_SetConfig+0xf8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00b      	beq.n	8004480 <TIM_OC1_SetConfig+0x74>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a27      	ldr	r2, [pc, #156]	; (8004508 <TIM_OC1_SetConfig+0xfc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d007      	beq.n	8004480 <TIM_OC1_SetConfig+0x74>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a26      	ldr	r2, [pc, #152]	; (800450c <TIM_OC1_SetConfig+0x100>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_OC1_SetConfig+0x74>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a25      	ldr	r2, [pc, #148]	; (8004510 <TIM_OC1_SetConfig+0x104>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d10c      	bne.n	800449a <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f023 0308 	bic.w	r3, r3, #8
 8004486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f023 0304 	bic.w	r3, r3, #4
 8004498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a19      	ldr	r2, [pc, #100]	; (8004504 <TIM_OC1_SetConfig+0xf8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d00b      	beq.n	80044ba <TIM_OC1_SetConfig+0xae>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a18      	ldr	r2, [pc, #96]	; (8004508 <TIM_OC1_SetConfig+0xfc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d007      	beq.n	80044ba <TIM_OC1_SetConfig+0xae>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a17      	ldr	r2, [pc, #92]	; (800450c <TIM_OC1_SetConfig+0x100>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d003      	beq.n	80044ba <TIM_OC1_SetConfig+0xae>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a16      	ldr	r2, [pc, #88]	; (8004510 <TIM_OC1_SetConfig+0x104>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d111      	bne.n	80044de <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	621a      	str	r2, [r3, #32]
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40014000 	.word	0x40014000
 800450c:	40014400 	.word	0x40014400
 8004510:	40014800 	.word	0x40014800

08004514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	f023 0210 	bic.w	r2, r3, #16
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0320 	bic.w	r3, r3, #32
 800455e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	011b      	lsls	r3, r3, #4
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	4313      	orrs	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a23      	ldr	r2, [pc, #140]	; (80045fc <TIM_OC2_SetConfig+0xe8>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10d      	bne.n	8004590 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800458e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a1a      	ldr	r2, [pc, #104]	; (80045fc <TIM_OC2_SetConfig+0xe8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00b      	beq.n	80045b0 <TIM_OC2_SetConfig+0x9c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a19      	ldr	r2, [pc, #100]	; (8004600 <TIM_OC2_SetConfig+0xec>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d007      	beq.n	80045b0 <TIM_OC2_SetConfig+0x9c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a18      	ldr	r2, [pc, #96]	; (8004604 <TIM_OC2_SetConfig+0xf0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <TIM_OC2_SetConfig+0x9c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a17      	ldr	r2, [pc, #92]	; (8004608 <TIM_OC2_SetConfig+0xf4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d113      	bne.n	80045d8 <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	621a      	str	r2, [r3, #32]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40014000 	.word	0x40014000
 8004604:	40014400 	.word	0x40014400
 8004608:	40014800 	.word	0x40014800

0800460c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0303 	bic.w	r3, r3, #3
 8004642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a23      	ldr	r2, [pc, #140]	; (80046f4 <TIM_OC3_SetConfig+0xe8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d10d      	bne.n	8004686 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1a      	ldr	r2, [pc, #104]	; (80046f4 <TIM_OC3_SetConfig+0xe8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_OC3_SetConfig+0x9a>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a19      	ldr	r2, [pc, #100]	; (80046f8 <TIM_OC3_SetConfig+0xec>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <TIM_OC3_SetConfig+0x9a>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a18      	ldr	r2, [pc, #96]	; (80046fc <TIM_OC3_SetConfig+0xf0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_OC3_SetConfig+0x9a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a17      	ldr	r2, [pc, #92]	; (8004700 <TIM_OC3_SetConfig+0xf4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d113      	bne.n	80046ce <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4313      	orrs	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	621a      	str	r2, [r3, #32]
}
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40012c00 	.word	0x40012c00
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40014400 	.word	0x40014400
 8004700:	40014800 	.word	0x40014800

08004704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69db      	ldr	r3, [r3, #28]
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800474e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	031b      	lsls	r3, r3, #12
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4313      	orrs	r3, r2
 800475a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a15      	ldr	r2, [pc, #84]	; (80047b4 <TIM_OC4_SetConfig+0xb0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00b      	beq.n	800477c <TIM_OC4_SetConfig+0x78>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <TIM_OC4_SetConfig+0xb4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d007      	beq.n	800477c <TIM_OC4_SetConfig+0x78>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a13      	ldr	r2, [pc, #76]	; (80047bc <TIM_OC4_SetConfig+0xb8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_OC4_SetConfig+0x78>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a12      	ldr	r2, [pc, #72]	; (80047c0 <TIM_OC4_SetConfig+0xbc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d109      	bne.n	8004790 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	019b      	lsls	r3, r3, #6
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00
 80047b8:	40014000 	.word	0x40014000
 80047bc:	40014400 	.word	0x40014400
 80047c0:	40014800 	.word	0x40014800

080047c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f023 0201 	bic.w	r2, r3, #1
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	011b      	lsls	r3, r3, #4
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f023 030a 	bic.w	r3, r3, #10
 8004800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	621a      	str	r2, [r3, #32]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f023 0210 	bic.w	r2, r3, #16
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800484a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	031b      	lsls	r3, r3, #12
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800485c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	4313      	orrs	r3, r2
 8004866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	621a      	str	r2, [r3, #32]
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr

0800487e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	f043 0307 	orr.w	r3, r3, #7
 80048a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	609a      	str	r2, [r3, #8]
}
 80048a8:	bf00      	nop
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr

080048b2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b087      	sub	sp, #28
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
 80048be:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048cc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	021a      	lsls	r2, r3, #8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4313      	orrs	r3, r2
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	609a      	str	r2, [r3, #8]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f003 031f 	and.w	r3, r3, #31
 8004902:	2201      	movs	r2, #1
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	43db      	mvns	r3, r3
 8004912:	401a      	ands	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a1a      	ldr	r2, [r3, #32]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	fa01 f303 	lsl.w	r3, r1, r3
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr

08004938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800494c:	2302      	movs	r3, #2
 800494e:	e032      	b.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004988:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	4313      	orrs	r3, r2
 8004992:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049d8:	2302      	movs	r3, #2
 80049da:	e03d      	b.n	8004a58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
	...

08004a64 <ADC_DMA_degerOkuma>:
extern uint16_t deger[4];
extern int potDeger2, tempDeger, batDeger;

char keyYer[14];

void ADC_DMA_degerOkuma() {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, deger, 4);
 8004a68:	2204      	movs	r2, #4
 8004a6a:	4906      	ldr	r1, [pc, #24]	; (8004a84 <ADC_DMA_degerOkuma+0x20>)
 8004a6c:	4806      	ldr	r0, [pc, #24]	; (8004a88 <ADC_DMA_degerOkuma+0x24>)
 8004a6e:	f7fc fa9d 	bl	8000fac <HAL_ADC_Start_DMA>
	HAL_ADC_ConvHalfCpltCallback(&hadc1);
 8004a72:	4805      	ldr	r0, [pc, #20]	; (8004a88 <ADC_DMA_degerOkuma+0x24>)
 8004a74:	f7fc fb82 	bl	800117c <HAL_ADC_ConvHalfCpltCallback>
	HAL_ADC_Stop_DMA(&hadc1);
 8004a78:	4803      	ldr	r0, [pc, #12]	; (8004a88 <ADC_DMA_degerOkuma+0x24>)
 8004a7a:	f7fc fb31 	bl	80010e0 <HAL_ADC_Stop_DMA>
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	2000072c 	.word	0x2000072c
 8004a88:	200006fc 	.word	0x200006fc

08004a8c <pilGoster>:

void pilGoster() {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
	int pilDeger = (deger[0] / 4 - 3);
 8004a92:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <pilGoster+0x30>)
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b03      	subs	r3, #3
 8004a9c:	607b      	str	r3, [r7, #4]

	OLED_SetCursor(111, 0);
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	206f      	movs	r0, #111	; 0x6f
 8004aa2:	f000 fae1 	bl	8005068 <OLED_SetCursor>
	OLED_WriteChar((pilDeger), Font_16x6, White);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	b2d8      	uxtb	r0, r3
 8004aaa:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <pilGoster+0x34>)
 8004aac:	2301      	movs	r3, #1
 8004aae:	ca06      	ldmia	r2, {r1, r2}
 8004ab0:	f000 fa34 	bl	8004f1c <OLED_WriteChar>
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	2000072c 	.word	0x2000072c
 8004ac0:	2000001c 	.word	0x2000001c

08004ac4 <OLED_WriteCommand>:
static uint8_t OLED_Buffer[OLED_WIDTH * OLED_HEIGHT / 8];
//
//  Send a byte to the command register
//
static void OLED_WriteCommand(uint8_t command)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af04      	add	r7, sp, #16
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 8004ace:	230a      	movs	r3, #10
 8004ad0:	9302      	str	r3, [sp, #8]
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	1dfb      	adds	r3, r7, #7
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	2301      	movs	r3, #1
 8004adc:	2200      	movs	r2, #0
 8004ade:	2178      	movs	r1, #120	; 0x78
 8004ae0:	4803      	ldr	r0, [pc, #12]	; (8004af0 <OLED_WriteCommand+0x2c>)
 8004ae2:	f7fd fb17 	bl	8002114 <HAL_I2C_Mem_Write>
}
 8004ae6:	bf00      	nop
 8004ae8:	3708      	adds	r7, #8
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000540 	.word	0x20000540

08004af4 <OLED_Init>:

//
//	Initialize the oled screen
//
uint8_t OLED_Init(void)
{	
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
//	HAL_Delay(100);
	
	/* Init LCD */
	OLED_WriteCommand(OLED_Display_Off); //display off
 8004af8:	20ae      	movs	r0, #174	; 0xae
 8004afa:	f7ff ffe3 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Memory_Addressing_Set); //Set Memory Addressing Mode
 8004afe:	2020      	movs	r0, #32
 8004b00:	f7ff ffe0 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Page_Addressing_Column_Higher_Set); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004b04:	2010      	movs	r0, #16
 8004b06:	f7ff ffdd 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Page_Addressing_Page_Start_Set); //Set Page Start Address for Page Addressing Mode,0-7
 8004b0a:	20b0      	movs	r0, #176	; 0xb0
 8004b0c:	f7ff ffda 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Com_Output_Scan_Inc); //Set COM Output Scan Direction
 8004b10:	20c0      	movs	r0, #192	; 0xc0
 8004b12:	f7ff ffd7 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Page_Addressing_Column_Lower_Set); //---set low column address
 8004b16:	2000      	movs	r0, #0
 8004b18:	f7ff ffd4 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Page_Addressing_Column_Higher_Set); //---set high column address
 8004b1c:	2010      	movs	r0, #16
 8004b1e:	f7ff ffd1 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Display_Start_Line_Set); //--set start line address
 8004b22:	2040      	movs	r0, #64	; 0x40
 8004b24:	f7ff ffce 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Constrast_Set); //--set contrast control register
 8004b28:	2081      	movs	r0, #129	; 0x81
 8004b2a:	f7ff ffcb 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(0xFF);//Contrast degeri
 8004b2e:	20ff      	movs	r0, #255	; 0xff
 8004b30:	f7ff ffc8 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(0xA0); //--set segment re-map 0 to 127
 8004b34:	20a0      	movs	r0, #160	; 0xa0
 8004b36:	f7ff ffc5 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Display_Normal); //--set normal display
 8004b3a:	20a6      	movs	r0, #166	; 0xa6
 8004b3c:	f7ff ffc2 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Multiplex_Radio_Set); //--set multiplex ratio(1 to 64)
 8004b40:	20a8      	movs	r0, #168	; 0xa8
 8004b42:	f7ff ffbf 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F); //
 8004b46:	203f      	movs	r0, #63	; 0x3f
 8004b48:	f7ff ffbc 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004b4c:	20a4      	movs	r0, #164	; 0xa4
 8004b4e:	f7ff ffb9 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Display_Offset_Set); //-set display offset
 8004b52:	20d3      	movs	r0, #211	; 0xd3
 8004b54:	f7ff ffb6 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(0x00); //-not offset
 8004b58:	2000      	movs	r0, #0
 8004b5a:	f7ff ffb3 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Display_Oscillator_Frequency_Set); //--set display clock divide ratio/oscillator frequency
 8004b5e:	20d5      	movs	r0, #213	; 0xd5
 8004b60:	f7ff ffb0 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(0xF0); //--set divide ratio
 8004b64:	20f0      	movs	r0, #240	; 0xf0
 8004b66:	f7ff ffad 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Precharge_Period_Set); //--set pre-charge period
 8004b6a:	20d9      	movs	r0, #217	; 0xd9
 8004b6c:	f7ff ffaa 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(0x22); //
 8004b70:	2022      	movs	r0, #34	; 0x22
 8004b72:	f7ff ffa7 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Com_Pins_Set); //--set com pins hardware configuration
 8004b76:	20da      	movs	r0, #218	; 0xda
 8004b78:	f7ff ffa4 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8004b7c:	2012      	movs	r0, #18
 8004b7e:	f7ff ffa1 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_VCOMH_Deselect_Level_Set); //--set vcomh
 8004b82:	20db      	movs	r0, #219	; 0xdb
 8004b84:	f7ff ff9e 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(0x20); //0x20,0.77xVcc
 8004b88:	2020      	movs	r0, #32
 8004b8a:	f7ff ff9b 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Charge_Pump_Set); //--set DC-DC enable
 8004b8e:	208d      	movs	r0, #141	; 0x8d
 8004b90:	f7ff ff98 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(0x14); //
 8004b94:	2014      	movs	r0, #20
 8004b96:	f7ff ff95 	bl	8004ac4 <OLED_WriteCommand>
	OLED_WriteCommand(OLED_Display_On); //--turn on SSD1306 panel
 8004b9a:	20af      	movs	r0, #175	; 0xaf
 8004b9c:	f7ff ff92 	bl	8004ac4 <OLED_WriteCommand>
	
	// Clear screen
	OLED_Fill(Black);
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f000 f811 	bl	8004bc8 <OLED_Fill>
	
	// Flush buffer to screen
	OLED_UpdateScreen();
 8004ba6:	f000 f929 	bl	8004dfc <OLED_UpdateScreen>
	
	// Set default values for screen object
	OLED.CurrentX = 0;
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <OLED_Init+0xd0>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 8004bb0:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <OLED_Init+0xd0>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	805a      	strh	r2, [r3, #2]
	
	OLED.Initialized = 1;
 8004bb6:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <OLED_Init+0xd0>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8004bbc:	2301      	movs	r3, #1
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	200000a8 	.word	0x200000a8

08004bc8 <OLED_Fill>:

//
//  Fill the whole screen with the given color
//
void OLED_Fill(OLED_COLOR color) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(OLED_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(OLED_Buffer));
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <OLED_Fill+0x14>
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e000      	b.n	8004bde <OLED_Fill+0x16>
 8004bdc:	23ff      	movs	r3, #255	; 0xff
 8004bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004be2:	4619      	mov	r1, r3
 8004be4:	4803      	ldr	r0, [pc, #12]	; (8004bf4 <OLED_Fill+0x2c>)
 8004be6:	f001 f9bd 	bl	8005f64 <memset>
}
 8004bea:	bf00      	nop
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	200000b0 	.word	0x200000b0

08004bf8 <OLED_DrawLine>:
		OLED_Buffer[i] = ~OLED_Buffer[i];
	}
}


void OLED_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, OLED_COLOR c) {
 8004bf8:	b590      	push	{r4, r7, lr}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4608      	mov	r0, r1
 8004c02:	4611      	mov	r1, r2
 8004c04:	461a      	mov	r2, r3
 8004c06:	4623      	mov	r3, r4
 8004c08:	80fb      	strh	r3, [r7, #6]
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	80bb      	strh	r3, [r7, #4]
 8004c0e:	460b      	mov	r3, r1
 8004c10:	807b      	strh	r3, [r7, #2]
 8004c12:	4613      	mov	r3, r2
 8004c14:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= OLED_WIDTH) {
 8004c16:	88fb      	ldrh	r3, [r7, #6]
 8004c18:	2b7f      	cmp	r3, #127	; 0x7f
 8004c1a:	d901      	bls.n	8004c20 <OLED_DrawLine+0x28>
		x0 = OLED_WIDTH - 1;
 8004c1c:	237f      	movs	r3, #127	; 0x7f
 8004c1e:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= OLED_WIDTH) {
 8004c20:	887b      	ldrh	r3, [r7, #2]
 8004c22:	2b7f      	cmp	r3, #127	; 0x7f
 8004c24:	d901      	bls.n	8004c2a <OLED_DrawLine+0x32>
		x1 = OLED_WIDTH - 1;
 8004c26:	237f      	movs	r3, #127	; 0x7f
 8004c28:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= OLED_HEIGHT) {
 8004c2a:	88bb      	ldrh	r3, [r7, #4]
 8004c2c:	2b3f      	cmp	r3, #63	; 0x3f
 8004c2e:	d901      	bls.n	8004c34 <OLED_DrawLine+0x3c>
		y0 = OLED_HEIGHT - 1;
 8004c30:	233f      	movs	r3, #63	; 0x3f
 8004c32:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= OLED_HEIGHT) {
 8004c34:	883b      	ldrh	r3, [r7, #0]
 8004c36:	2b3f      	cmp	r3, #63	; 0x3f
 8004c38:	d901      	bls.n	8004c3e <OLED_DrawLine+0x46>
		y1 = OLED_HEIGHT - 1;
 8004c3a:	233f      	movs	r3, #63	; 0x3f
 8004c3c:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	887b      	ldrh	r3, [r7, #2]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d205      	bcs.n	8004c52 <OLED_DrawLine+0x5a>
 8004c46:	887a      	ldrh	r2, [r7, #2]
 8004c48:	88fb      	ldrh	r3, [r7, #6]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	b21b      	sxth	r3, r3
 8004c50:	e004      	b.n	8004c5c <OLED_DrawLine+0x64>
 8004c52:	88fa      	ldrh	r2, [r7, #6]
 8004c54:	887b      	ldrh	r3, [r7, #2]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	b21b      	sxth	r3, r3
 8004c5c:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8004c5e:	88ba      	ldrh	r2, [r7, #4]
 8004c60:	883b      	ldrh	r3, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d205      	bcs.n	8004c72 <OLED_DrawLine+0x7a>
 8004c66:	883a      	ldrh	r2, [r7, #0]
 8004c68:	88bb      	ldrh	r3, [r7, #4]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	b21b      	sxth	r3, r3
 8004c70:	e004      	b.n	8004c7c <OLED_DrawLine+0x84>
 8004c72:	88ba      	ldrh	r2, [r7, #4]
 8004c74:	883b      	ldrh	r3, [r7, #0]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	b21b      	sxth	r3, r3
 8004c7c:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8004c7e:	88fa      	ldrh	r2, [r7, #6]
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d201      	bcs.n	8004c8a <OLED_DrawLine+0x92>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e001      	b.n	8004c8e <OLED_DrawLine+0x96>
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8e:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8004c90:	88ba      	ldrh	r2, [r7, #4]
 8004c92:	883b      	ldrh	r3, [r7, #0]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d201      	bcs.n	8004c9c <OLED_DrawLine+0xa4>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e001      	b.n	8004ca0 <OLED_DrawLine+0xa8>
 8004c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca0:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8004ca2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004ca6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	dd06      	ble.n	8004cbc <OLED_DrawLine+0xc4>
 8004cae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004cb2:	0fda      	lsrs	r2, r3, #31
 8004cb4:	4413      	add	r3, r2
 8004cb6:	105b      	asrs	r3, r3, #1
 8004cb8:	b21b      	sxth	r3, r3
 8004cba:	e006      	b.n	8004cca <OLED_DrawLine+0xd2>
 8004cbc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004cc0:	425b      	negs	r3, r3
 8004cc2:	0fda      	lsrs	r2, r3, #31
 8004cc4:	4413      	add	r3, r2
 8004cc6:	105b      	asrs	r3, r3, #1
 8004cc8:	b21b      	sxth	r3, r3
 8004cca:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8004ccc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d12b      	bne.n	8004d2c <OLED_DrawLine+0x134>
		if (y1 < y0) {
 8004cd4:	883a      	ldrh	r2, [r7, #0]
 8004cd6:	88bb      	ldrh	r3, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d205      	bcs.n	8004ce8 <OLED_DrawLine+0xf0>
			tmp = y1;
 8004cdc:	883b      	ldrh	r3, [r7, #0]
 8004cde:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8004ce0:	88bb      	ldrh	r3, [r7, #4]
 8004ce2:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8004ce4:	893b      	ldrh	r3, [r7, #8]
 8004ce6:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8004ce8:	887a      	ldrh	r2, [r7, #2]
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d205      	bcs.n	8004cfc <OLED_DrawLine+0x104>
			tmp = x1;
 8004cf0:	887b      	ldrh	r3, [r7, #2]
 8004cf2:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8004cf4:	88fb      	ldrh	r3, [r7, #6]
 8004cf6:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8004cf8:	893b      	ldrh	r3, [r7, #8]
 8004cfa:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8004cfc:	88bb      	ldrh	r3, [r7, #4]
 8004cfe:	82bb      	strh	r3, [r7, #20]
 8004d00:	e00e      	b.n	8004d20 <OLED_DrawLine+0x128>
			OLED_DrawPixel(x0, i, c);
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	8aba      	ldrh	r2, [r7, #20]
 8004d08:	b2d1      	uxtb	r1, r2
 8004d0a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 f8a4 	bl	8004e5c <OLED_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8004d14:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	82bb      	strh	r3, [r7, #20]
 8004d20:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004d24:	883b      	ldrh	r3, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	ddeb      	ble.n	8004d02 <OLED_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8004d2a:	e063      	b.n	8004df4 <OLED_DrawLine+0x1fc>
	}

	if (dy == 0) {
 8004d2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d12b      	bne.n	8004d8c <OLED_DrawLine+0x194>
		if (y1 < y0) {
 8004d34:	883a      	ldrh	r2, [r7, #0]
 8004d36:	88bb      	ldrh	r3, [r7, #4]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d205      	bcs.n	8004d48 <OLED_DrawLine+0x150>
			tmp = y1;
 8004d3c:	883b      	ldrh	r3, [r7, #0]
 8004d3e:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8004d40:	88bb      	ldrh	r3, [r7, #4]
 8004d42:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8004d44:	893b      	ldrh	r3, [r7, #8]
 8004d46:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8004d48:	887a      	ldrh	r2, [r7, #2]
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d205      	bcs.n	8004d5c <OLED_DrawLine+0x164>
			tmp = x1;
 8004d50:	887b      	ldrh	r3, [r7, #2]
 8004d52:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8004d54:	88fb      	ldrh	r3, [r7, #6]
 8004d56:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8004d58:	893b      	ldrh	r3, [r7, #8]
 8004d5a:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8004d5c:	88fb      	ldrh	r3, [r7, #6]
 8004d5e:	82bb      	strh	r3, [r7, #20]
 8004d60:	e00e      	b.n	8004d80 <OLED_DrawLine+0x188>
			OLED_DrawPixel(i, y0, c);
 8004d62:	8abb      	ldrh	r3, [r7, #20]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	88ba      	ldrh	r2, [r7, #4]
 8004d68:	b2d1      	uxtb	r1, r2
 8004d6a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f874 	bl	8004e5c <OLED_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8004d74:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	82bb      	strh	r3, [r7, #20]
 8004d80:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004d84:	887b      	ldrh	r3, [r7, #2]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	ddeb      	ble.n	8004d62 <OLED_DrawLine+0x16a>
		}

		/* Return from function */
		return;
 8004d8a:	e033      	b.n	8004df4 <OLED_DrawLine+0x1fc>
	}

	while (1) {
		OLED_DrawPixel(x0, y0, c);
 8004d8c:	88fb      	ldrh	r3, [r7, #6]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	88ba      	ldrh	r2, [r7, #4]
 8004d92:	b2d1      	uxtb	r1, r2
 8004d94:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 f85f 	bl	8004e5c <OLED_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	887b      	ldrh	r3, [r7, #2]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d103      	bne.n	8004dae <OLED_DrawLine+0x1b6>
 8004da6:	88ba      	ldrh	r2, [r7, #4]
 8004da8:	883b      	ldrh	r3, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d021      	beq.n	8004df2 <OLED_DrawLine+0x1fa>
			break;
		}
		e2 = err;
 8004dae:	8afb      	ldrh	r3, [r7, #22]
 8004db0:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8004db2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004db6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004dba:	425b      	negs	r3, r3
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	dd08      	ble.n	8004dd2 <OLED_DrawLine+0x1da>
			err -= dy;
 8004dc0:	8afa      	ldrh	r2, [r7, #22]
 8004dc2:	8a3b      	ldrh	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8004dca:	89fa      	ldrh	r2, [r7, #14]
 8004dcc:	88fb      	ldrh	r3, [r7, #6]
 8004dce:	4413      	add	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8004dd2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004dd6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	dad6      	bge.n	8004d8c <OLED_DrawLine+0x194>
			err += dx;
 8004dde:	8afa      	ldrh	r2, [r7, #22]
 8004de0:	8a7b      	ldrh	r3, [r7, #18]
 8004de2:	4413      	add	r3, r2
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8004de8:	89ba      	ldrh	r2, [r7, #12]
 8004dea:	88bb      	ldrh	r3, [r7, #4]
 8004dec:	4413      	add	r3, r2
 8004dee:	80bb      	strh	r3, [r7, #4]
		OLED_DrawPixel(x0, y0, c);
 8004df0:	e7cc      	b.n	8004d8c <OLED_DrawLine+0x194>
			break;
 8004df2:	bf00      	nop
		}
	}
}
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd90      	pop	{r4, r7, pc}
	...

08004dfc <OLED_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void OLED_UpdateScreen(void) 
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 8004e02:	2300      	movs	r3, #0
 8004e04:	71fb      	strb	r3, [r7, #7]
 8004e06:	e01d      	b.n	8004e44 <OLED_UpdateScreen+0x48>
		OLED_WriteCommand(0xB0 + i);
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	3b50      	subs	r3, #80	; 0x50
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff fe58 	bl	8004ac4 <OLED_WriteCommand>
		OLED_WriteCommand(0x00);
 8004e14:	2000      	movs	r0, #0
 8004e16:	f7ff fe55 	bl	8004ac4 <OLED_WriteCommand>
		OLED_WriteCommand(0x10);
 8004e1a:	2010      	movs	r0, #16
 8004e1c:	f7ff fe52 	bl	8004ac4 <OLED_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH * i],OLED_WIDTH,100);
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	01db      	lsls	r3, r3, #7
 8004e24:	4a0b      	ldr	r2, [pc, #44]	; (8004e54 <OLED_UpdateScreen+0x58>)
 8004e26:	4413      	add	r3, r2
 8004e28:	2264      	movs	r2, #100	; 0x64
 8004e2a:	9202      	str	r2, [sp, #8]
 8004e2c:	2280      	movs	r2, #128	; 0x80
 8004e2e:	9201      	str	r2, [sp, #4]
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	2301      	movs	r3, #1
 8004e34:	2240      	movs	r2, #64	; 0x40
 8004e36:	2178      	movs	r1, #120	; 0x78
 8004e38:	4807      	ldr	r0, [pc, #28]	; (8004e58 <OLED_UpdateScreen+0x5c>)
 8004e3a:	f7fd f96b 	bl	8002114 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	3301      	adds	r3, #1
 8004e42:	71fb      	strb	r3, [r7, #7]
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	2b07      	cmp	r3, #7
 8004e48:	d9de      	bls.n	8004e08 <OLED_UpdateScreen+0xc>
	}
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200000b0 	.word	0x200000b0
 8004e58:	20000540 	.word	0x20000540

08004e5c <OLED_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//

void OLED_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	4603      	mov	r3, r0
 8004e64:	71fb      	strb	r3, [r7, #7]
 8004e66:	460b      	mov	r3, r1
 8004e68:	71bb      	strb	r3, [r7, #6]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	717b      	strb	r3, [r7, #5]
	if (
		x >= OLED_WIDTH ||
 8004e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
	if (
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	db48      	blt.n	8004f08 <OLED_DrawPixel+0xac>
		x >= OLED_WIDTH ||
 8004e76:	79bb      	ldrb	r3, [r7, #6]
 8004e78:	2b3f      	cmp	r3, #63	; 0x3f
 8004e7a:	d845      	bhi.n	8004f08 <OLED_DrawPixel+0xac>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (OLED.Inverted) {
 8004e7c:	4b25      	ldr	r3, [pc, #148]	; (8004f14 <OLED_DrawPixel+0xb8>)
 8004e7e:	791b      	ldrb	r3, [r3, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d006      	beq.n	8004e92 <OLED_DrawPixel+0x36>
		color = (OLED_COLOR)!color;
 8004e84:	797b      	ldrb	r3, [r7, #5]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bf0c      	ite	eq
 8004e8a:	2301      	moveq	r3, #1
 8004e8c:	2300      	movne	r3, #0
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	717b      	strb	r3, [r7, #5]
	}

	/* Set color */
	if (color == White) {
 8004e92:	797b      	ldrb	r3, [r7, #5]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d11a      	bne.n	8004ece <OLED_DrawPixel+0x72>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 8004e98:	79fa      	ldrb	r2, [r7, #7]
 8004e9a:	79bb      	ldrb	r3, [r7, #6]
 8004e9c:	08db      	lsrs	r3, r3, #3
 8004e9e:	b2d8      	uxtb	r0, r3
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	01db      	lsls	r3, r3, #7
 8004ea4:	4413      	add	r3, r2
 8004ea6:	4a1c      	ldr	r2, [pc, #112]	; (8004f18 <OLED_DrawPixel+0xbc>)
 8004ea8:	5cd3      	ldrb	r3, [r2, r3]
 8004eaa:	b25a      	sxtb	r2, r3
 8004eac:	79bb      	ldrb	r3, [r7, #6]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004eb8:	b25b      	sxtb	r3, r3
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	b259      	sxtb	r1, r3
 8004ebe:	79fa      	ldrb	r2, [r7, #7]
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	01db      	lsls	r3, r3, #7
 8004ec4:	4413      	add	r3, r2
 8004ec6:	b2c9      	uxtb	r1, r1
 8004ec8:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <OLED_DrawPixel+0xbc>)
 8004eca:	54d1      	strb	r1, [r2, r3]
 8004ecc:	e01d      	b.n	8004f0a <OLED_DrawPixel+0xae>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8004ece:	79fa      	ldrb	r2, [r7, #7]
 8004ed0:	79bb      	ldrb	r3, [r7, #6]
 8004ed2:	08db      	lsrs	r3, r3, #3
 8004ed4:	b2d8      	uxtb	r0, r3
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	01db      	lsls	r3, r3, #7
 8004eda:	4413      	add	r3, r2
 8004edc:	4a0e      	ldr	r2, [pc, #56]	; (8004f18 <OLED_DrawPixel+0xbc>)
 8004ede:	5cd3      	ldrb	r3, [r2, r3]
 8004ee0:	b25a      	sxtb	r2, r3
 8004ee2:	79bb      	ldrb	r3, [r7, #6]
 8004ee4:	f003 0307 	and.w	r3, r3, #7
 8004ee8:	2101      	movs	r1, #1
 8004eea:	fa01 f303 	lsl.w	r3, r1, r3
 8004eee:	b25b      	sxtb	r3, r3
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	b25b      	sxtb	r3, r3
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	b259      	sxtb	r1, r3
 8004ef8:	79fa      	ldrb	r2, [r7, #7]
 8004efa:	4603      	mov	r3, r0
 8004efc:	01db      	lsls	r3, r3, #7
 8004efe:	4413      	add	r3, r2
 8004f00:	b2c9      	uxtb	r1, r1
 8004f02:	4a05      	ldr	r2, [pc, #20]	; (8004f18 <OLED_DrawPixel+0xbc>)
 8004f04:	54d1      	strb	r1, [r2, r3]
 8004f06:	e000      	b.n	8004f0a <OLED_DrawPixel+0xae>
		return;
 8004f08:	bf00      	nop
	}
}
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bc80      	pop	{r7}
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	200000a8 	.word	0x200000a8
 8004f18:	200000b0 	.word	0x200000b0

08004f1c <OLED_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char OLED_WriteChar(char ch, FontDef Font, OLED_COLOR color)
{
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b089      	sub	sp, #36	; 0x24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4604      	mov	r4, r0
 8004f24:	1d38      	adds	r0, r7, #4
 8004f26:	e880 0006 	stmia.w	r0, {r1, r2}
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4623      	mov	r3, r4
 8004f2e:	73fb      	strb	r3, [r7, #15]
 8004f30:	4613      	mov	r3, r2
 8004f32:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8004f34:	4b38      	ldr	r3, [pc, #224]	; (8005018 <OLED_WriteChar+0xfc>)
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	793b      	ldrb	r3, [r7, #4]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f40:	dc06      	bgt.n	8004f50 <OLED_WriteChar+0x34>
		OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight))
 8004f42:	4b35      	ldr	r3, [pc, #212]	; (8005018 <OLED_WriteChar+0xfc>)
 8004f44:	885b      	ldrh	r3, [r3, #2]
 8004f46:	461a      	mov	r2, r3
 8004f48:	797b      	ldrb	r3, [r7, #5]
 8004f4a:	4413      	add	r3, r2
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8004f4c:	2b3f      	cmp	r3, #63	; 0x3f
 8004f4e:	dd01      	ble.n	8004f54 <OLED_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	e05d      	b.n	8005010 <OLED_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8004f54:	2300      	movs	r3, #0
 8004f56:	61fb      	str	r3, [r7, #28]
 8004f58:	e04c      	b.n	8004ff4 <OLED_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	3b20      	subs	r3, #32
 8004f60:	7979      	ldrb	r1, [r7, #5]
 8004f62:	fb01 f303 	mul.w	r3, r1, r3
 8004f66:	4619      	mov	r1, r3
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	440b      	add	r3, r1
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4413      	add	r3, r2
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8004f74:	2300      	movs	r3, #0
 8004f76:	61bb      	str	r3, [r7, #24]
 8004f78:	e034      	b.n	8004fe4 <OLED_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d012      	beq.n	8004fb0 <OLED_WriteChar+0x94>
			{
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 8004f8a:	4b23      	ldr	r3, [pc, #140]	; (8005018 <OLED_WriteChar+0xfc>)
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	4413      	add	r3, r2
 8004f96:	b2d8      	uxtb	r0, r3
 8004f98:	4b1f      	ldr	r3, [pc, #124]	; (8005018 <OLED_WriteChar+0xfc>)
 8004f9a:	885b      	ldrh	r3, [r3, #2]
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	7bba      	ldrb	r2, [r7, #14]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f7ff ff57 	bl	8004e5c <OLED_DrawPixel>
 8004fae:	e016      	b.n	8004fde <OLED_WriteChar+0xc2>
			} 
			else 
			{
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 8004fb0:	4b19      	ldr	r3, [pc, #100]	; (8005018 <OLED_WriteChar+0xfc>)
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	b2d8      	uxtb	r0, r3
 8004fbe:	4b16      	ldr	r3, [pc, #88]	; (8005018 <OLED_WriteChar+0xfc>)
 8004fc0:	885b      	ldrh	r3, [r3, #2]
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	4413      	add	r3, r2
 8004fca:	b2d9      	uxtb	r1, r3
 8004fcc:	7bbb      	ldrb	r3, [r7, #14]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bf0c      	ite	eq
 8004fd2:	2301      	moveq	r3, #1
 8004fd4:	2300      	movne	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	461a      	mov	r2, r3
 8004fda:	f7ff ff3f 	bl	8004e5c <OLED_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	793b      	ldrb	r3, [r7, #4]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d3c5      	bcc.n	8004f7a <OLED_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	797b      	ldrb	r3, [r7, #5]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d3ad      	bcc.n	8004f5a <OLED_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	OLED.CurrentX += Font.FontWidth;
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <OLED_WriteChar+0xfc>)
 8005000:	881a      	ldrh	r2, [r3, #0]
 8005002:	793b      	ldrb	r3, [r7, #4]
 8005004:	b29b      	uxth	r3, r3
 8005006:	4413      	add	r3, r2
 8005008:	b29a      	uxth	r2, r3
 800500a:	4b03      	ldr	r3, [pc, #12]	; (8005018 <OLED_WriteChar+0xfc>)
 800500c:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 800500e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3724      	adds	r7, #36	; 0x24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd90      	pop	{r4, r7, pc}
 8005018:	200000a8 	.word	0x200000a8

0800501c <OLED_WriteString>:

//
//  Write full string to screenbuffer
//
char OLED_WriteString(char* str, FontDef Font, OLED_COLOR color)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	1d38      	adds	r0, r7, #4
 8005026:	e880 0006 	stmia.w	r0, {r1, r2}
 800502a:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 800502c:	e012      	b.n	8005054 <OLED_WriteString+0x38>
	{
		if (OLED_WriteChar(*str, Font, color) != *str)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	7818      	ldrb	r0, [r3, #0]
 8005032:	78fb      	ldrb	r3, [r7, #3]
 8005034:	1d3a      	adds	r2, r7, #4
 8005036:	ca06      	ldmia	r2, {r1, r2}
 8005038:	f7ff ff70 	bl	8004f1c <OLED_WriteChar>
 800503c:	4603      	mov	r3, r0
 800503e:	461a      	mov	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d002      	beq.n	800504e <OLED_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	e008      	b.n	8005060 <OLED_WriteString+0x44>
		}
		
		// Next char
		str++;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3301      	adds	r3, #1
 8005052:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1e8      	bne.n	800502e <OLED_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	781b      	ldrb	r3, [r3, #0]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <OLED_SetCursor>:
//
//	Position the cursor
//

void OLED_SetCursor(uint8_t x, uint8_t y) 
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	460a      	mov	r2, r1
 8005072:	71fb      	strb	r3, [r7, #7]
 8005074:	4613      	mov	r3, r2
 8005076:	71bb      	strb	r3, [r7, #6]
	OLED.CurrentX = x;
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	b29a      	uxth	r2, r3
 800507c:	4b05      	ldr	r3, [pc, #20]	; (8005094 <OLED_SetCursor+0x2c>)
 800507e:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = y;
 8005080:	79bb      	ldrb	r3, [r7, #6]
 8005082:	b29a      	uxth	r2, r3
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <OLED_SetCursor+0x2c>)
 8005086:	805a      	strh	r2, [r3, #2]
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	200000a8 	.word	0x200000a8

08005098 <saatAyarla>:
 *      Author: tosun_n
 */
#include "include_Ap.h"

void saatAyarla()
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_TimeTypeDef sTime;
//	sTime.TimeFormat=RTC_HOURFORMAT12_AM;
	sTime.Hours=SaatAry[0];
 800509e:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <saatAyarla+0x44>)
 80050a0:	f993 3000 	ldrsb.w	r3, [r3]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	713b      	strb	r3, [r7, #4]
	sTime.Minutes=SaatAry[1];
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <saatAyarla+0x44>)
 80050aa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	717b      	strb	r3, [r7, #5]
	sTime.Seconds=SaatAry[2];
 80050b2:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <saatAyarla+0x44>)
 80050b4:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	71bb      	strb	r3, [r7, #6]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80050bc:	1d3b      	adds	r3, r7, #4
 80050be:	2200      	movs	r2, #0
 80050c0:	4619      	mov	r1, r3
 80050c2:	4807      	ldr	r0, [pc, #28]	; (80050e0 <saatAyarla+0x48>)
 80050c4:	f7fe f8bc 	bl	8003240 <HAL_RTC_SetTime>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <saatAyarla+0x3a>
		Error_Handler();
 80050ce:	f7fb fbb9 	bl	8000844 <Error_Handler>
	}
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	2000081c 	.word	0x2000081c
 80050e0:	20000820 	.word	0x20000820

080050e4 <alarmAyarla>:

void alarmAyarla()
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_AlarmTypeDef sAlarm;
//	sAlarm.AlarmTime.TimeFormat=RTC_HOURFORMAT12_AM;
	sAlarm.AlarmTime.Hours=SaatAry[0];
 80050ea:	4b10      	ldr	r3, [pc, #64]	; (800512c <alarmAyarla+0x48>)
 80050ec:	f993 3000 	ldrsb.w	r3, [r3]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes=SaatAry[1];
 80050f4:	4b0d      	ldr	r3, [pc, #52]	; (800512c <alarmAyarla+0x48>)
 80050f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds=SaatAry[2];
 80050fe:	4b0b      	ldr	r3, [pc, #44]	; (800512c <alarmAyarla+0x48>)
 8005100:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005104:	b2db      	uxtb	r3, r3
 8005106:	70bb      	strb	r3, [r7, #2]
//	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
//	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
//	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
//	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
//	sAlarm.AlarmDateWeekDay = 5;
	sAlarm.Alarm = RTC_ALARM_A;
 8005108:	2300      	movs	r3, #0
 800510a:	607b      	str	r3, [r7, #4]

	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800510c:	463b      	mov	r3, r7
 800510e:	2200      	movs	r2, #0
 8005110:	4619      	mov	r1, r3
 8005112:	4807      	ldr	r0, [pc, #28]	; (8005130 <alarmAyarla+0x4c>)
 8005114:	f7fe fb0e 	bl	8003734 <HAL_RTC_SetAlarm_IT>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <alarmAyarla+0x3e>
	  {
	    Error_Handler();
 800511e:	f7fb fb91 	bl	8000844 <Error_Handler>
	  }
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	2000081c 	.word	0x2000081c
 8005130:	20000820 	.word	0x20000820

08005134 <takvimAyarla>:

void takvimAyarla()
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_DateTypeDef sDate ;

	sDate.Date =takvimAry[0];
 800513a:	4b11      	ldr	r3, [pc, #68]	; (8005180 <takvimAyarla+0x4c>)
 800513c:	f993 3000 	ldrsb.w	r3, [r3]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	71bb      	strb	r3, [r7, #6]
	sDate.Month =takvimAry[1];
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <takvimAyarla+0x4c>)
 8005146:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	717b      	strb	r3, [r7, #5]
	sDate.Year =takvimAry[2];
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <takvimAyarla+0x4c>)
 8005150:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	71fb      	strb	r3, [r7, #7]
	sDate.WeekDay = takvimAry[3];
 8005158:	4b09      	ldr	r3, [pc, #36]	; (8005180 <takvimAyarla+0x4c>)
 800515a:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	713b      	strb	r3, [r7, #4]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8005162:	1d3b      	adds	r3, r7, #4
 8005164:	2200      	movs	r2, #0
 8005166:	4619      	mov	r1, r3
 8005168:	4806      	ldr	r0, [pc, #24]	; (8005184 <takvimAyarla+0x50>)
 800516a:	f7fe f9d9 	bl	8003520 <HAL_RTC_SetDate>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <takvimAyarla+0x44>
	{
		Error_Handler();
 8005174:	f7fb fb66 	bl	8000844 <Error_Handler>
	}
}
 8005178:	bf00      	nop
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	2000086c 	.word	0x2000086c
 8005184:	20000820 	.word	0x20000820

08005188 <saatiAyarlama>:

void saatiAyarlama(uint8_t y)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
	ayarlaPtr=&saatAyarla;
 8005192:	4b05      	ldr	r3, [pc, #20]	; (80051a8 <saatiAyarlama+0x20>)
 8005194:	4a05      	ldr	r2, [pc, #20]	; (80051ac <saatiAyarlama+0x24>)
 8005196:	601a      	str	r2, [r3, #0]
	saat_alarm_Ayarlama(y);
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	4618      	mov	r0, r3
 800519c:	f000 f808 	bl	80051b0 <saat_alarm_Ayarlama>
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20000870 	.word	0x20000870
 80051ac:	08005099 	.word	0x08005099

080051b0 <saat_alarm_Ayarlama>:

void saat_alarm_Ayarlama(uint8_t yKonumu) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af02      	add	r7, sp, #8
 80051b6:	4603      	mov	r3, r0
 80051b8:	71fb      	strb	r3, [r7, #7]

char saatYer[16];
	if (durum) {
 80051ba:	4b90      	ldr	r3, [pc, #576]	; (80053fc <saat_alarm_Ayarlama+0x24c>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 80cf 	beq.w	8005362 <saat_alarm_Ayarlama+0x1b2>

		switch (Key) {
 80051c4:	4b8e      	ldr	r3, [pc, #568]	; (8005400 <saat_alarm_Ayarlama+0x250>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2bb0      	cmp	r3, #176	; 0xb0
 80051ca:	d034      	beq.n	8005236 <saat_alarm_Ayarlama+0x86>
 80051cc:	2bb0      	cmp	r3, #176	; 0xb0
 80051ce:	dc02      	bgt.n	80051d6 <saat_alarm_Ayarlama+0x26>
 80051d0:	2b70      	cmp	r3, #112	; 0x70
 80051d2:	d006      	beq.n	80051e2 <saat_alarm_Ayarlama+0x32>
 80051d4:	e0ce      	b.n	8005374 <saat_alarm_Ayarlama+0x1c4>
 80051d6:	2bd0      	cmp	r3, #208	; 0xd0
 80051d8:	d053      	beq.n	8005282 <saat_alarm_Ayarlama+0xd2>
 80051da:	2be0      	cmp	r3, #224	; 0xe0
 80051dc:	f000 8089 	beq.w	80052f2 <saat_alarm_Ayarlama+0x142>
 80051e0:	e0c8      	b.n	8005374 <saat_alarm_Ayarlama+0x1c4>
		case T3DEGER:
			durum = false;
 80051e2:	4b86      	ldr	r3, [pc, #536]	; (80053fc <saat_alarm_Ayarlama+0x24c>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
			if(kayitOnayDurum)
 80051e8:	4b86      	ldr	r3, [pc, #536]	; (8005404 <saat_alarm_Ayarlama+0x254>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00f      	beq.n	8005210 <saat_alarm_Ayarlama+0x60>
			{
				(ayarlaPtr)();
 80051f0:	4b85      	ldr	r3, [pc, #532]	; (8005408 <saat_alarm_Ayarlama+0x258>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4798      	blx	r3
				displaySelectKey=MENU_SISTEMI;
 80051f6:	4b85      	ldr	r3, [pc, #532]	; (800540c <saat_alarm_Ayarlama+0x25c>)
 80051f8:	2230      	movs	r2, #48	; 0x30
 80051fa:	701a      	strb	r2, [r3, #0]
				SaatAryNo=0;
 80051fc:	4b84      	ldr	r3, [pc, #528]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]
				displayClean=true;
 8005202:	4b84      	ldr	r3, [pc, #528]	; (8005414 <saat_alarm_Ayarlama+0x264>)
 8005204:	2201      	movs	r2, #1
 8005206:	701a      	strb	r2, [r3, #0]
				kayitOnayDurum=false;
 8005208:	4b7e      	ldr	r3, [pc, #504]	; (8005404 <saat_alarm_Ayarlama+0x254>)
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	e008      	b.n	8005222 <saat_alarm_Ayarlama+0x72>
			}
			else	SaatAryNo ++;
 8005210:	4b7f      	ldr	r3, [pc, #508]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 8005212:	f993 3000 	ldrsb.w	r3, [r3]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	3301      	adds	r3, #1
 800521a:	b2db      	uxtb	r3, r3
 800521c:	b25a      	sxtb	r2, r3
 800521e:	4b7c      	ldr	r3, [pc, #496]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 8005220:	701a      	strb	r2, [r3, #0]

			if(SaatAryNo ==3)
 8005222:	4b7b      	ldr	r3, [pc, #492]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 8005224:	f993 3000 	ldrsb.w	r3, [r3]
 8005228:	2b03      	cmp	r3, #3
 800522a:	f040 809c 	bne.w	8005366 <saat_alarm_Ayarlama+0x1b6>
			{
				kayitOnayDurum=true;
 800522e:	4b75      	ldr	r3, [pc, #468]	; (8005404 <saat_alarm_Ayarlama+0x254>)
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
			}

			break;
 8005234:	e097      	b.n	8005366 <saat_alarm_Ayarlama+0x1b6>

		case T4DEGER:
			durum = false;
 8005236:	4b71      	ldr	r3, [pc, #452]	; (80053fc <saat_alarm_Ayarlama+0x24c>)
 8005238:	2200      	movs	r2, #0
 800523a:	701a      	strb	r2, [r3, #0]
			if(kayitOnayDurum)
 800523c:	4b71      	ldr	r3, [pc, #452]	; (8005404 <saat_alarm_Ayarlama+0x254>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00c      	beq.n	800525e <saat_alarm_Ayarlama+0xae>
			{
				displaySelectKey=MENU_SISTEMI;
 8005244:	4b71      	ldr	r3, [pc, #452]	; (800540c <saat_alarm_Ayarlama+0x25c>)
 8005246:	2230      	movs	r2, #48	; 0x30
 8005248:	701a      	strb	r2, [r3, #0]
				SaatAryNo=0;
 800524a:	4b71      	ldr	r3, [pc, #452]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]
				displayClean=true;
 8005250:	4b70      	ldr	r3, [pc, #448]	; (8005414 <saat_alarm_Ayarlama+0x264>)
 8005252:	2201      	movs	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
				kayitOnayDurum=false;
 8005256:	4b6b      	ldr	r3, [pc, #428]	; (8005404 <saat_alarm_Ayarlama+0x254>)
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	e008      	b.n	8005270 <saat_alarm_Ayarlama+0xc0>
			}
			else	SaatAryNo --;
 800525e:	4b6c      	ldr	r3, [pc, #432]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 8005260:	f993 3000 	ldrsb.w	r3, [r3]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b2db      	uxtb	r3, r3
 800526a:	b25a      	sxtb	r2, r3
 800526c:	4b68      	ldr	r3, [pc, #416]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 800526e:	701a      	strb	r2, [r3, #0]

			if(SaatAryNo < 0)
 8005270:	4b67      	ldr	r3, [pc, #412]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 8005272:	f993 3000 	ldrsb.w	r3, [r3]
 8005276:	2b00      	cmp	r3, #0
 8005278:	da77      	bge.n	800536a <saat_alarm_Ayarlama+0x1ba>
			{
				SaatAryNo=2;
 800527a:	4b65      	ldr	r3, [pc, #404]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 800527c:	2202      	movs	r2, #2
 800527e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8005280:	e073      	b.n	800536a <saat_alarm_Ayarlama+0x1ba>

		case T1DEGER:
			durum = false;
 8005282:	4b5e      	ldr	r3, [pc, #376]	; (80053fc <saat_alarm_Ayarlama+0x24c>)
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
			SaatAry[SaatAryNo] ++;
 8005288:	4b61      	ldr	r3, [pc, #388]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 800528a:	f993 3000 	ldrsb.w	r3, [r3]
 800528e:	4a62      	ldr	r2, [pc, #392]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 8005290:	56d2      	ldrsb	r2, [r2, r3]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	3201      	adds	r2, #1
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	b251      	sxtb	r1, r2
 800529a:	4a5f      	ldr	r2, [pc, #380]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 800529c:	54d1      	strb	r1, [r2, r3]
			if(SaatAryNo==0)
 800529e:	4b5c      	ldr	r3, [pc, #368]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 80052a0:	f993 3000 	ldrsb.w	r3, [r3]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10f      	bne.n	80052c8 <saat_alarm_Ayarlama+0x118>
			{
				if(SaatAry[SaatAryNo]>23)
 80052a8:	4b59      	ldr	r3, [pc, #356]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 80052aa:	f993 3000 	ldrsb.w	r3, [r3]
 80052ae:	461a      	mov	r2, r3
 80052b0:	4b59      	ldr	r3, [pc, #356]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 80052b2:	569b      	ldrsb	r3, [r3, r2]
 80052b4:	2b17      	cmp	r3, #23
 80052b6:	dd5a      	ble.n	800536e <saat_alarm_Ayarlama+0x1be>
				{
					SaatAry[SaatAryNo]=0;
 80052b8:	4b55      	ldr	r3, [pc, #340]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 80052ba:	f993 3000 	ldrsb.w	r3, [r3]
 80052be:	461a      	mov	r2, r3
 80052c0:	4b55      	ldr	r3, [pc, #340]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 80052c2:	2100      	movs	r1, #0
 80052c4:	5499      	strb	r1, [r3, r2]
				if(SaatAry[SaatAryNo]>59)
				{
					SaatAry[SaatAryNo]=0;
				}
			}
			break;
 80052c6:	e052      	b.n	800536e <saat_alarm_Ayarlama+0x1be>
			else if(SaatAryNo!=0)
 80052c8:	4b51      	ldr	r3, [pc, #324]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 80052ca:	f993 3000 	ldrsb.w	r3, [r3]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d04d      	beq.n	800536e <saat_alarm_Ayarlama+0x1be>
				if(SaatAry[SaatAryNo]>59)
 80052d2:	4b4f      	ldr	r3, [pc, #316]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 80052d4:	f993 3000 	ldrsb.w	r3, [r3]
 80052d8:	461a      	mov	r2, r3
 80052da:	4b4f      	ldr	r3, [pc, #316]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 80052dc:	569b      	ldrsb	r3, [r3, r2]
 80052de:	2b3b      	cmp	r3, #59	; 0x3b
 80052e0:	dd45      	ble.n	800536e <saat_alarm_Ayarlama+0x1be>
					SaatAry[SaatAryNo]=0;
 80052e2:	4b4b      	ldr	r3, [pc, #300]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 80052e4:	f993 3000 	ldrsb.w	r3, [r3]
 80052e8:	461a      	mov	r2, r3
 80052ea:	4b4b      	ldr	r3, [pc, #300]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 80052ec:	2100      	movs	r1, #0
 80052ee:	5499      	strb	r1, [r3, r2]
			break;
 80052f0:	e03d      	b.n	800536e <saat_alarm_Ayarlama+0x1be>

		case T2DEGER:
			durum = false;
 80052f2:	4b42      	ldr	r3, [pc, #264]	; (80053fc <saat_alarm_Ayarlama+0x24c>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
			SaatAry[SaatAryNo] --;
 80052f8:	4b45      	ldr	r3, [pc, #276]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 80052fa:	f993 3000 	ldrsb.w	r3, [r3]
 80052fe:	4a46      	ldr	r2, [pc, #280]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 8005300:	56d2      	ldrsb	r2, [r2, r3]
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	3a01      	subs	r2, #1
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	b251      	sxtb	r1, r2
 800530a:	4a43      	ldr	r2, [pc, #268]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 800530c:	54d1      	strb	r1, [r2, r3]
			if(SaatAryNo==0)
 800530e:	4b40      	ldr	r3, [pc, #256]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 8005310:	f993 3000 	ldrsb.w	r3, [r3]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10f      	bne.n	8005338 <saat_alarm_Ayarlama+0x188>
			{
				if(SaatAry[SaatAryNo]<0)
 8005318:	4b3d      	ldr	r3, [pc, #244]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 800531a:	f993 3000 	ldrsb.w	r3, [r3]
 800531e:	461a      	mov	r2, r3
 8005320:	4b3d      	ldr	r3, [pc, #244]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 8005322:	569b      	ldrsb	r3, [r3, r2]
 8005324:	2b00      	cmp	r3, #0
 8005326:	da24      	bge.n	8005372 <saat_alarm_Ayarlama+0x1c2>
				{
					SaatAry[SaatAryNo]=23;
 8005328:	4b39      	ldr	r3, [pc, #228]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 800532a:	f993 3000 	ldrsb.w	r3, [r3]
 800532e:	461a      	mov	r2, r3
 8005330:	4b39      	ldr	r3, [pc, #228]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 8005332:	2117      	movs	r1, #23
 8005334:	5499      	strb	r1, [r3, r2]
				if(SaatAry[SaatAryNo]<0)
				{
					SaatAry[SaatAryNo]=59;
				}
			}
			break;
 8005336:	e01c      	b.n	8005372 <saat_alarm_Ayarlama+0x1c2>
			else if(SaatAryNo!=0)
 8005338:	4b35      	ldr	r3, [pc, #212]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 800533a:	f993 3000 	ldrsb.w	r3, [r3]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d017      	beq.n	8005372 <saat_alarm_Ayarlama+0x1c2>
				if(SaatAry[SaatAryNo]<0)
 8005342:	4b33      	ldr	r3, [pc, #204]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 8005344:	f993 3000 	ldrsb.w	r3, [r3]
 8005348:	461a      	mov	r2, r3
 800534a:	4b33      	ldr	r3, [pc, #204]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 800534c:	569b      	ldrsb	r3, [r3, r2]
 800534e:	2b00      	cmp	r3, #0
 8005350:	da0f      	bge.n	8005372 <saat_alarm_Ayarlama+0x1c2>
					SaatAry[SaatAryNo]=59;
 8005352:	4b2f      	ldr	r3, [pc, #188]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 8005354:	f993 3000 	ldrsb.w	r3, [r3]
 8005358:	461a      	mov	r2, r3
 800535a:	4b2f      	ldr	r3, [pc, #188]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 800535c:	213b      	movs	r1, #59	; 0x3b
 800535e:	5499      	strb	r1, [r3, r2]
			break;
 8005360:	e007      	b.n	8005372 <saat_alarm_Ayarlama+0x1c2>

		default:
 8005362:	bf00      	nop
 8005364:	e006      	b.n	8005374 <saat_alarm_Ayarlama+0x1c4>
			break;
 8005366:	bf00      	nop
 8005368:	e004      	b.n	8005374 <saat_alarm_Ayarlama+0x1c4>
			break;
 800536a:	bf00      	nop
 800536c:	e002      	b.n	8005374 <saat_alarm_Ayarlama+0x1c4>
			break;
 800536e:	bf00      	nop
 8005370:	e000      	b.n	8005374 <saat_alarm_Ayarlama+0x1c4>
			break;
 8005372:	bf00      	nop
			;
		}
	}
	if(kayitOnayDurum)
 8005374:	4b23      	ldr	r3, [pc, #140]	; (8005404 <saat_alarm_Ayarlama+0x254>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d004      	beq.n	8005386 <saat_alarm_Ayarlama+0x1d6>
	{
		kayitSorma(10,yKonumu);
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	4619      	mov	r1, r3
 8005380:	200a      	movs	r0, #10
 8005382:	f000 fae1 	bl	8005948 <kayitSorma>
	}
	sprintf(saatYer,"%02d:%02d:%02d",SaatAry[0],SaatAry[1],SaatAry[2]);
 8005386:	4b24      	ldr	r3, [pc, #144]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 8005388:	f993 3000 	ldrsb.w	r3, [r3]
 800538c:	461a      	mov	r2, r3
 800538e:	4b22      	ldr	r3, [pc, #136]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 8005390:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005394:	4619      	mov	r1, r3
 8005396:	4b20      	ldr	r3, [pc, #128]	; (8005418 <saat_alarm_Ayarlama+0x268>)
 8005398:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800539c:	f107 0008 	add.w	r0, r7, #8
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	460b      	mov	r3, r1
 80053a4:	491d      	ldr	r1, [pc, #116]	; (800541c <saat_alarm_Ayarlama+0x26c>)
 80053a6:	f000 fde5 	bl	8005f74 <siprintf>
	OLED_SetCursor(10, yKonumu);
 80053aa:	79fb      	ldrb	r3, [r7, #7]
 80053ac:	4619      	mov	r1, r3
 80053ae:	200a      	movs	r0, #10
 80053b0:	f7ff fe5a 	bl	8005068 <OLED_SetCursor>
	OLED_WriteString(saatYer, Font_11x18, White);
 80053b4:	4a1a      	ldr	r2, [pc, #104]	; (8005420 <saat_alarm_Ayarlama+0x270>)
 80053b6:	f107 0008 	add.w	r0, r7, #8
 80053ba:	2301      	movs	r3, #1
 80053bc:	ca06      	ldmia	r2, {r1, r2}
 80053be:	f7ff fe2d 	bl	800501c <OLED_WriteString>
	if(durumFlash)
 80053c2:	4b18      	ldr	r3, [pc, #96]	; (8005424 <saat_alarm_Ayarlama+0x274>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d014      	beq.n	80053f4 <saat_alarm_Ayarlama+0x244>
	{
	OLED_SetCursor(SaatAryNo*33+10, yKonumu);
 80053ca:	4b11      	ldr	r3, [pc, #68]	; (8005410 <saat_alarm_Ayarlama+0x260>)
 80053cc:	f993 3000 	ldrsb.w	r3, [r3]
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	0152      	lsls	r2, r2, #5
 80053d6:	4413      	add	r3, r2
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	330a      	adds	r3, #10
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	79fa      	ldrb	r2, [r7, #7]
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff fe40 	bl	8005068 <OLED_SetCursor>
	OLED_WriteString("  ", Font_11x18, White);
 80053e8:	4a0d      	ldr	r2, [pc, #52]	; (8005420 <saat_alarm_Ayarlama+0x270>)
 80053ea:	2301      	movs	r3, #1
 80053ec:	ca06      	ldmia	r2, {r1, r2}
 80053ee:	480e      	ldr	r0, [pc, #56]	; (8005428 <saat_alarm_Ayarlama+0x278>)
 80053f0:	f7ff fe14 	bl	800501c <OLED_WriteString>
	}
}
 80053f4:	bf00      	nop
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	200006f8 	.word	0x200006f8
 8005400:	200008cd 	.word	0x200008cd
 8005404:	200008cc 	.word	0x200008cc
 8005408:	20000870 	.word	0x20000870
 800540c:	200008ce 	.word	0x200008ce
 8005410:	200008d4 	.word	0x200008d4
 8005414:	200008ac 	.word	0x200008ac
 8005418:	2000081c 	.word	0x2000081c
 800541c:	080067e4 	.word	0x080067e4
 8005420:	20000014 	.word	0x20000014
 8005424:	200006b5 	.word	0x200006b5
 8005428:	080067f4 	.word	0x080067f4

0800542c <alarmAyarlama>:

void alarmAyarlama(uint8_t y) {
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	4603      	mov	r3, r0
 8005434:	71fb      	strb	r3, [r7, #7]

	ayarlaPtr=&alarmAyarla;
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <alarmAyarlama+0x20>)
 8005438:	4a05      	ldr	r2, [pc, #20]	; (8005450 <alarmAyarlama+0x24>)
 800543a:	601a      	str	r2, [r3, #0]
	saat_alarm_Ayarlama(y);
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff feb6 	bl	80051b0 <saat_alarm_Ayarlama>
}
 8005444:	bf00      	nop
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20000870 	.word	0x20000870
 8005450:	080050e5 	.word	0x080050e5

08005454 <takvimiAyarlama>:

void takvimiAyarlama(uint8_t y)
{
 8005454:	b5b0      	push	{r4, r5, r7, lr}
 8005456:	b08e      	sub	sp, #56	; 0x38
 8005458:	af02      	add	r7, sp, #8
 800545a:	4603      	mov	r3, r0
 800545c:	71fb      	strb	r3, [r7, #7]
	char takvimYer[12];
 	char* weekDay[] = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
 800545e:	4b9e      	ldr	r3, [pc, #632]	; (80056d8 <takvimiAyarlama+0x284>)
 8005460:	f107 0408 	add.w	r4, r7, #8
 8005464:	461d      	mov	r5, r3
 8005466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800546a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800546e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"Saturday", "Sunday"};

		if (durum) {
 8005472:	4b9a      	ldr	r3, [pc, #616]	; (80056dc <takvimiAyarlama+0x288>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 8126 	beq.w	80056c8 <takvimiAyarlama+0x274>

			switch (Key) {
 800547c:	4b98      	ldr	r3, [pc, #608]	; (80056e0 <takvimiAyarlama+0x28c>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2bb0      	cmp	r3, #176	; 0xb0
 8005482:	d033      	beq.n	80054ec <takvimiAyarlama+0x98>
 8005484:	2bb0      	cmp	r3, #176	; 0xb0
 8005486:	dc02      	bgt.n	800548e <takvimiAyarlama+0x3a>
 8005488:	2b70      	cmp	r3, #112	; 0x70
 800548a:	d006      	beq.n	800549a <takvimiAyarlama+0x46>
 800548c:	e135      	b.n	80056fa <takvimiAyarlama+0x2a6>
 800548e:	2bd0      	cmp	r3, #208	; 0xd0
 8005490:	d053      	beq.n	800553a <takvimiAyarlama+0xe6>
 8005492:	2be0      	cmp	r3, #224	; 0xe0
 8005494:	f000 80b6 	beq.w	8005604 <takvimiAyarlama+0x1b0>
 8005498:	e12f      	b.n	80056fa <takvimiAyarlama+0x2a6>
			case T3DEGER:
				durum = false;
 800549a:	4b90      	ldr	r3, [pc, #576]	; (80056dc <takvimiAyarlama+0x288>)
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]

				if(kayitOnayDurum)
 80054a0:	4b90      	ldr	r3, [pc, #576]	; (80056e4 <takvimiAyarlama+0x290>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00e      	beq.n	80054c6 <takvimiAyarlama+0x72>
				{
					takvimAyarla();
 80054a8:	f7ff fe44 	bl	8005134 <takvimAyarla>
					displaySelectKey=MENU_SISTEMI;
 80054ac:	4b8e      	ldr	r3, [pc, #568]	; (80056e8 <takvimiAyarlama+0x294>)
 80054ae:	2230      	movs	r2, #48	; 0x30
 80054b0:	701a      	strb	r2, [r3, #0]
					takvimAryNo=0;
 80054b2:	4b8e      	ldr	r3, [pc, #568]	; (80056ec <takvimiAyarlama+0x298>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	701a      	strb	r2, [r3, #0]
					displayClean=true;
 80054b8:	4b8d      	ldr	r3, [pc, #564]	; (80056f0 <takvimiAyarlama+0x29c>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	701a      	strb	r2, [r3, #0]
					kayitOnayDurum=false;
 80054be:	4b89      	ldr	r3, [pc, #548]	; (80056e4 <takvimiAyarlama+0x290>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	701a      	strb	r2, [r3, #0]
 80054c4:	e008      	b.n	80054d8 <takvimiAyarlama+0x84>
				}
				else	takvimAryNo ++;
 80054c6:	4b89      	ldr	r3, [pc, #548]	; (80056ec <takvimiAyarlama+0x298>)
 80054c8:	f993 3000 	ldrsb.w	r3, [r3]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	3301      	adds	r3, #1
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	b25a      	sxtb	r2, r3
 80054d4:	4b85      	ldr	r3, [pc, #532]	; (80056ec <takvimiAyarlama+0x298>)
 80054d6:	701a      	strb	r2, [r3, #0]

				if(takvimAryNo ==4)
 80054d8:	4b84      	ldr	r3, [pc, #528]	; (80056ec <takvimiAyarlama+0x298>)
 80054da:	f993 3000 	ldrsb.w	r3, [r3]
 80054de:	2b04      	cmp	r3, #4
 80054e0:	f040 80f4 	bne.w	80056cc <takvimiAyarlama+0x278>
				{
					kayitOnayDurum=true;
 80054e4:	4b7f      	ldr	r3, [pc, #508]	; (80056e4 <takvimiAyarlama+0x290>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
				}
				break;
 80054ea:	e0ef      	b.n	80056cc <takvimiAyarlama+0x278>

			case T4DEGER:
				durum = false;
 80054ec:	4b7b      	ldr	r3, [pc, #492]	; (80056dc <takvimiAyarlama+0x288>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
				if(kayitOnayDurum)
 80054f2:	4b7c      	ldr	r3, [pc, #496]	; (80056e4 <takvimiAyarlama+0x290>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <takvimiAyarlama+0xc0>
				{
					displaySelectKey=MENU_SISTEMI;
 80054fa:	4b7b      	ldr	r3, [pc, #492]	; (80056e8 <takvimiAyarlama+0x294>)
 80054fc:	2230      	movs	r2, #48	; 0x30
 80054fe:	701a      	strb	r2, [r3, #0]
					takvimAryNo=0;
 8005500:	4b7a      	ldr	r3, [pc, #488]	; (80056ec <takvimiAyarlama+0x298>)
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
					displayClean=true;
 8005506:	4b7a      	ldr	r3, [pc, #488]	; (80056f0 <takvimiAyarlama+0x29c>)
 8005508:	2201      	movs	r2, #1
 800550a:	701a      	strb	r2, [r3, #0]
					kayitOnayDurum=false;
 800550c:	4b75      	ldr	r3, [pc, #468]	; (80056e4 <takvimiAyarlama+0x290>)
 800550e:	2200      	movs	r2, #0
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e008      	b.n	8005526 <takvimiAyarlama+0xd2>
				}
				else	takvimAryNo --;
 8005514:	4b75      	ldr	r3, [pc, #468]	; (80056ec <takvimiAyarlama+0x298>)
 8005516:	f993 3000 	ldrsb.w	r3, [r3]
 800551a:	b2db      	uxtb	r3, r3
 800551c:	3b01      	subs	r3, #1
 800551e:	b2db      	uxtb	r3, r3
 8005520:	b25a      	sxtb	r2, r3
 8005522:	4b72      	ldr	r3, [pc, #456]	; (80056ec <takvimiAyarlama+0x298>)
 8005524:	701a      	strb	r2, [r3, #0]

				if(takvimAryNo < 0)
 8005526:	4b71      	ldr	r3, [pc, #452]	; (80056ec <takvimiAyarlama+0x298>)
 8005528:	f993 3000 	ldrsb.w	r3, [r3]
 800552c:	2b00      	cmp	r3, #0
 800552e:	f280 80cf 	bge.w	80056d0 <takvimiAyarlama+0x27c>
				{
					takvimAryNo=3;
 8005532:	4b6e      	ldr	r3, [pc, #440]	; (80056ec <takvimiAyarlama+0x298>)
 8005534:	2203      	movs	r2, #3
 8005536:	701a      	strb	r2, [r3, #0]
				}

				break;
 8005538:	e0ca      	b.n	80056d0 <takvimiAyarlama+0x27c>

			case T1DEGER:
				durum = false;
 800553a:	4b68      	ldr	r3, [pc, #416]	; (80056dc <takvimiAyarlama+0x288>)
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
				takvimAry[takvimAryNo] ++;
 8005540:	4b6a      	ldr	r3, [pc, #424]	; (80056ec <takvimiAyarlama+0x298>)
 8005542:	f993 3000 	ldrsb.w	r3, [r3]
 8005546:	4a6b      	ldr	r2, [pc, #428]	; (80056f4 <takvimiAyarlama+0x2a0>)
 8005548:	56d2      	ldrsb	r2, [r2, r3]
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	3201      	adds	r2, #1
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	b251      	sxtb	r1, r2
 8005552:	4a68      	ldr	r2, [pc, #416]	; (80056f4 <takvimiAyarlama+0x2a0>)
 8005554:	54d1      	strb	r1, [r2, r3]
				if(takvimAryNo==0)
 8005556:	4b65      	ldr	r3, [pc, #404]	; (80056ec <takvimiAyarlama+0x298>)
 8005558:	f993 3000 	ldrsb.w	r3, [r3]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d110      	bne.n	8005582 <takvimiAyarlama+0x12e>
				{
					if(takvimAry[takvimAryNo]>31)
 8005560:	4b62      	ldr	r3, [pc, #392]	; (80056ec <takvimiAyarlama+0x298>)
 8005562:	f993 3000 	ldrsb.w	r3, [r3]
 8005566:	461a      	mov	r2, r3
 8005568:	4b62      	ldr	r3, [pc, #392]	; (80056f4 <takvimiAyarlama+0x2a0>)
 800556a:	569b      	ldrsb	r3, [r3, r2]
 800556c:	2b1f      	cmp	r3, #31
 800556e:	f340 80b1 	ble.w	80056d4 <takvimiAyarlama+0x280>
					{
						takvimAry[takvimAryNo]=1;
 8005572:	4b5e      	ldr	r3, [pc, #376]	; (80056ec <takvimiAyarlama+0x298>)
 8005574:	f993 3000 	ldrsb.w	r3, [r3]
 8005578:	461a      	mov	r2, r3
 800557a:	4b5e      	ldr	r3, [pc, #376]	; (80056f4 <takvimiAyarlama+0x2a0>)
 800557c:	2101      	movs	r1, #1
 800557e:	5499      	strb	r1, [r3, r2]
					if(takvimAry[takvimAryNo]>7)
					{
						takvimAry[takvimAryNo]=1;
					}
				}
				break;
 8005580:	e0a8      	b.n	80056d4 <takvimiAyarlama+0x280>
				else if(takvimAryNo==1)
 8005582:	4b5a      	ldr	r3, [pc, #360]	; (80056ec <takvimiAyarlama+0x298>)
 8005584:	f993 3000 	ldrsb.w	r3, [r3]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d110      	bne.n	80055ae <takvimiAyarlama+0x15a>
					if(takvimAry[takvimAryNo]>12)
 800558c:	4b57      	ldr	r3, [pc, #348]	; (80056ec <takvimiAyarlama+0x298>)
 800558e:	f993 3000 	ldrsb.w	r3, [r3]
 8005592:	461a      	mov	r2, r3
 8005594:	4b57      	ldr	r3, [pc, #348]	; (80056f4 <takvimiAyarlama+0x2a0>)
 8005596:	569b      	ldrsb	r3, [r3, r2]
 8005598:	2b0c      	cmp	r3, #12
 800559a:	f340 809b 	ble.w	80056d4 <takvimiAyarlama+0x280>
						takvimAry[takvimAryNo]=1;
 800559e:	4b53      	ldr	r3, [pc, #332]	; (80056ec <takvimiAyarlama+0x298>)
 80055a0:	f993 3000 	ldrsb.w	r3, [r3]
 80055a4:	461a      	mov	r2, r3
 80055a6:	4b53      	ldr	r3, [pc, #332]	; (80056f4 <takvimiAyarlama+0x2a0>)
 80055a8:	2101      	movs	r1, #1
 80055aa:	5499      	strb	r1, [r3, r2]
				break;
 80055ac:	e092      	b.n	80056d4 <takvimiAyarlama+0x280>
				else if(takvimAryNo==2)
 80055ae:	4b4f      	ldr	r3, [pc, #316]	; (80056ec <takvimiAyarlama+0x298>)
 80055b0:	f993 3000 	ldrsb.w	r3, [r3]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d110      	bne.n	80055da <takvimiAyarlama+0x186>
					if(takvimAry[takvimAryNo]>99)
 80055b8:	4b4c      	ldr	r3, [pc, #304]	; (80056ec <takvimiAyarlama+0x298>)
 80055ba:	f993 3000 	ldrsb.w	r3, [r3]
 80055be:	461a      	mov	r2, r3
 80055c0:	4b4c      	ldr	r3, [pc, #304]	; (80056f4 <takvimiAyarlama+0x2a0>)
 80055c2:	569b      	ldrsb	r3, [r3, r2]
 80055c4:	2b63      	cmp	r3, #99	; 0x63
 80055c6:	f340 8085 	ble.w	80056d4 <takvimiAyarlama+0x280>
						takvimAry[takvimAryNo]=0;
 80055ca:	4b48      	ldr	r3, [pc, #288]	; (80056ec <takvimiAyarlama+0x298>)
 80055cc:	f993 3000 	ldrsb.w	r3, [r3]
 80055d0:	461a      	mov	r2, r3
 80055d2:	4b48      	ldr	r3, [pc, #288]	; (80056f4 <takvimiAyarlama+0x2a0>)
 80055d4:	2100      	movs	r1, #0
 80055d6:	5499      	strb	r1, [r3, r2]
				break;
 80055d8:	e07c      	b.n	80056d4 <takvimiAyarlama+0x280>
				else if(takvimAryNo==3)
 80055da:	4b44      	ldr	r3, [pc, #272]	; (80056ec <takvimiAyarlama+0x298>)
 80055dc:	f993 3000 	ldrsb.w	r3, [r3]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d177      	bne.n	80056d4 <takvimiAyarlama+0x280>
					if(takvimAry[takvimAryNo]>7)
 80055e4:	4b41      	ldr	r3, [pc, #260]	; (80056ec <takvimiAyarlama+0x298>)
 80055e6:	f993 3000 	ldrsb.w	r3, [r3]
 80055ea:	461a      	mov	r2, r3
 80055ec:	4b41      	ldr	r3, [pc, #260]	; (80056f4 <takvimiAyarlama+0x2a0>)
 80055ee:	569b      	ldrsb	r3, [r3, r2]
 80055f0:	2b07      	cmp	r3, #7
 80055f2:	dd6f      	ble.n	80056d4 <takvimiAyarlama+0x280>
						takvimAry[takvimAryNo]=1;
 80055f4:	4b3d      	ldr	r3, [pc, #244]	; (80056ec <takvimiAyarlama+0x298>)
 80055f6:	f993 3000 	ldrsb.w	r3, [r3]
 80055fa:	461a      	mov	r2, r3
 80055fc:	4b3d      	ldr	r3, [pc, #244]	; (80056f4 <takvimiAyarlama+0x2a0>)
 80055fe:	2101      	movs	r1, #1
 8005600:	5499      	strb	r1, [r3, r2]
				break;
 8005602:	e067      	b.n	80056d4 <takvimiAyarlama+0x280>

			case T2DEGER:
				durum = false;
 8005604:	4b35      	ldr	r3, [pc, #212]	; (80056dc <takvimiAyarlama+0x288>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
				takvimAry[takvimAryNo] --;
 800560a:	4b38      	ldr	r3, [pc, #224]	; (80056ec <takvimiAyarlama+0x298>)
 800560c:	f993 3000 	ldrsb.w	r3, [r3]
 8005610:	4a38      	ldr	r2, [pc, #224]	; (80056f4 <takvimiAyarlama+0x2a0>)
 8005612:	56d2      	ldrsb	r2, [r2, r3]
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	3a01      	subs	r2, #1
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	b251      	sxtb	r1, r2
 800561c:	4a35      	ldr	r2, [pc, #212]	; (80056f4 <takvimiAyarlama+0x2a0>)
 800561e:	54d1      	strb	r1, [r2, r3]
				if(takvimAryNo==0)
 8005620:	4b32      	ldr	r3, [pc, #200]	; (80056ec <takvimiAyarlama+0x298>)
 8005622:	f993 3000 	ldrsb.w	r3, [r3]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10f      	bne.n	800564a <takvimiAyarlama+0x1f6>
				{
					if(takvimAry[takvimAryNo]<1)
 800562a:	4b30      	ldr	r3, [pc, #192]	; (80056ec <takvimiAyarlama+0x298>)
 800562c:	f993 3000 	ldrsb.w	r3, [r3]
 8005630:	461a      	mov	r2, r3
 8005632:	4b30      	ldr	r3, [pc, #192]	; (80056f4 <takvimiAyarlama+0x2a0>)
 8005634:	569b      	ldrsb	r3, [r3, r2]
 8005636:	2b00      	cmp	r3, #0
 8005638:	dc5e      	bgt.n	80056f8 <takvimiAyarlama+0x2a4>
					{
						takvimAry[takvimAryNo]=31;
 800563a:	4b2c      	ldr	r3, [pc, #176]	; (80056ec <takvimiAyarlama+0x298>)
 800563c:	f993 3000 	ldrsb.w	r3, [r3]
 8005640:	461a      	mov	r2, r3
 8005642:	4b2c      	ldr	r3, [pc, #176]	; (80056f4 <takvimiAyarlama+0x2a0>)
 8005644:	211f      	movs	r1, #31
 8005646:	5499      	strb	r1, [r3, r2]
					if(takvimAry[takvimAryNo]<1)
					{
						takvimAry[takvimAryNo]=7;
					}
				}
				break;
 8005648:	e056      	b.n	80056f8 <takvimiAyarlama+0x2a4>
				else if(takvimAryNo==1)
 800564a:	4b28      	ldr	r3, [pc, #160]	; (80056ec <takvimiAyarlama+0x298>)
 800564c:	f993 3000 	ldrsb.w	r3, [r3]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d10f      	bne.n	8005674 <takvimiAyarlama+0x220>
					if(takvimAry[takvimAryNo]<1)
 8005654:	4b25      	ldr	r3, [pc, #148]	; (80056ec <takvimiAyarlama+0x298>)
 8005656:	f993 3000 	ldrsb.w	r3, [r3]
 800565a:	461a      	mov	r2, r3
 800565c:	4b25      	ldr	r3, [pc, #148]	; (80056f4 <takvimiAyarlama+0x2a0>)
 800565e:	569b      	ldrsb	r3, [r3, r2]
 8005660:	2b00      	cmp	r3, #0
 8005662:	dc49      	bgt.n	80056f8 <takvimiAyarlama+0x2a4>
						takvimAry[takvimAryNo]=12;
 8005664:	4b21      	ldr	r3, [pc, #132]	; (80056ec <takvimiAyarlama+0x298>)
 8005666:	f993 3000 	ldrsb.w	r3, [r3]
 800566a:	461a      	mov	r2, r3
 800566c:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <takvimiAyarlama+0x2a0>)
 800566e:	210c      	movs	r1, #12
 8005670:	5499      	strb	r1, [r3, r2]
				break;
 8005672:	e041      	b.n	80056f8 <takvimiAyarlama+0x2a4>
				else if(takvimAryNo==2)
 8005674:	4b1d      	ldr	r3, [pc, #116]	; (80056ec <takvimiAyarlama+0x298>)
 8005676:	f993 3000 	ldrsb.w	r3, [r3]
 800567a:	2b02      	cmp	r3, #2
 800567c:	d10f      	bne.n	800569e <takvimiAyarlama+0x24a>
					if(takvimAry[takvimAryNo]<0)
 800567e:	4b1b      	ldr	r3, [pc, #108]	; (80056ec <takvimiAyarlama+0x298>)
 8005680:	f993 3000 	ldrsb.w	r3, [r3]
 8005684:	461a      	mov	r2, r3
 8005686:	4b1b      	ldr	r3, [pc, #108]	; (80056f4 <takvimiAyarlama+0x2a0>)
 8005688:	569b      	ldrsb	r3, [r3, r2]
 800568a:	2b00      	cmp	r3, #0
 800568c:	da34      	bge.n	80056f8 <takvimiAyarlama+0x2a4>
						takvimAry[takvimAryNo]=99;
 800568e:	4b17      	ldr	r3, [pc, #92]	; (80056ec <takvimiAyarlama+0x298>)
 8005690:	f993 3000 	ldrsb.w	r3, [r3]
 8005694:	461a      	mov	r2, r3
 8005696:	4b17      	ldr	r3, [pc, #92]	; (80056f4 <takvimiAyarlama+0x2a0>)
 8005698:	2163      	movs	r1, #99	; 0x63
 800569a:	5499      	strb	r1, [r3, r2]
				break;
 800569c:	e02c      	b.n	80056f8 <takvimiAyarlama+0x2a4>
				else if(takvimAryNo==3)
 800569e:	4b13      	ldr	r3, [pc, #76]	; (80056ec <takvimiAyarlama+0x298>)
 80056a0:	f993 3000 	ldrsb.w	r3, [r3]
 80056a4:	2b03      	cmp	r3, #3
 80056a6:	d127      	bne.n	80056f8 <takvimiAyarlama+0x2a4>
					if(takvimAry[takvimAryNo]<1)
 80056a8:	4b10      	ldr	r3, [pc, #64]	; (80056ec <takvimiAyarlama+0x298>)
 80056aa:	f993 3000 	ldrsb.w	r3, [r3]
 80056ae:	461a      	mov	r2, r3
 80056b0:	4b10      	ldr	r3, [pc, #64]	; (80056f4 <takvimiAyarlama+0x2a0>)
 80056b2:	569b      	ldrsb	r3, [r3, r2]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	dc1f      	bgt.n	80056f8 <takvimiAyarlama+0x2a4>
						takvimAry[takvimAryNo]=7;
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <takvimiAyarlama+0x298>)
 80056ba:	f993 3000 	ldrsb.w	r3, [r3]
 80056be:	461a      	mov	r2, r3
 80056c0:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <takvimiAyarlama+0x2a0>)
 80056c2:	2107      	movs	r1, #7
 80056c4:	5499      	strb	r1, [r3, r2]
				break;
 80056c6:	e017      	b.n	80056f8 <takvimiAyarlama+0x2a4>
				break;

			default:
 80056c8:	bf00      	nop
 80056ca:	e016      	b.n	80056fa <takvimiAyarlama+0x2a6>
				break;
 80056cc:	bf00      	nop
 80056ce:	e014      	b.n	80056fa <takvimiAyarlama+0x2a6>
				break;
 80056d0:	bf00      	nop
 80056d2:	e012      	b.n	80056fa <takvimiAyarlama+0x2a6>
				break;
 80056d4:	bf00      	nop
 80056d6:	e010      	b.n	80056fa <takvimiAyarlama+0x2a6>
 80056d8:	08006860 	.word	0x08006860
 80056dc:	200006f8 	.word	0x200006f8
 80056e0:	200008cd 	.word	0x200008cd
 80056e4:	200008cc 	.word	0x200008cc
 80056e8:	200008ce 	.word	0x200008ce
 80056ec:	200006b4 	.word	0x200006b4
 80056f0:	200008ac 	.word	0x200008ac
 80056f4:	2000086c 	.word	0x2000086c
				break;
 80056f8:	bf00      	nop
				;
			}
		}
		if(kayitOnayDurum)
 80056fa:	4b46      	ldr	r3, [pc, #280]	; (8005814 <takvimiAyarlama+0x3c0>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d006      	beq.n	8005710 <takvimiAyarlama+0x2bc>
		{
			kayitSorma(10,y+10);
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	330a      	adds	r3, #10
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	200a      	movs	r0, #10
 800570c:	f000 f91c 	bl	8005948 <kayitSorma>
		}

		sprintf(takvimYer,"%02d-%02d-20%02d",takvimAry[0],takvimAry[1],takvimAry[2]);
 8005710:	4b41      	ldr	r3, [pc, #260]	; (8005818 <takvimiAyarlama+0x3c4>)
 8005712:	f993 3000 	ldrsb.w	r3, [r3]
 8005716:	461a      	mov	r2, r3
 8005718:	4b3f      	ldr	r3, [pc, #252]	; (8005818 <takvimiAyarlama+0x3c4>)
 800571a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800571e:	4619      	mov	r1, r3
 8005720:	4b3d      	ldr	r3, [pc, #244]	; (8005818 <takvimiAyarlama+0x3c4>)
 8005722:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005726:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	460b      	mov	r3, r1
 800572e:	493b      	ldr	r1, [pc, #236]	; (800581c <takvimiAyarlama+0x3c8>)
 8005730:	f000 fc20 	bl	8005f74 <siprintf>
		OLED_SetCursor(0, y);
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	4619      	mov	r1, r3
 8005738:	2000      	movs	r0, #0
 800573a:	f7ff fc95 	bl	8005068 <OLED_SetCursor>
		OLED_WriteString(takvimYer, Font_11x18, White);
 800573e:	4a38      	ldr	r2, [pc, #224]	; (8005820 <takvimiAyarlama+0x3cc>)
 8005740:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005744:	2301      	movs	r3, #1
 8005746:	ca06      	ldmia	r2, {r1, r2}
 8005748:	f7ff fc68 	bl	800501c <OLED_WriteString>
		OLED_SetCursor(30, y+20);
 800574c:	79fb      	ldrb	r3, [r7, #7]
 800574e:	3314      	adds	r3, #20
 8005750:	b2db      	uxtb	r3, r3
 8005752:	4619      	mov	r1, r3
 8005754:	201e      	movs	r0, #30
 8005756:	f7ff fc87 	bl	8005068 <OLED_SetCursor>
		OLED_WriteString(weekDay[takvimAry[3]-1], Font_7x10, White);  //
 800575a:	4b2f      	ldr	r3, [pc, #188]	; (8005818 <takvimiAyarlama+0x3c4>)
 800575c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8005760:	3b01      	subs	r3, #1
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005768:	4413      	add	r3, r2
 800576a:	f853 0c28 	ldr.w	r0, [r3, #-40]
 800576e:	4a2d      	ldr	r2, [pc, #180]	; (8005824 <takvimiAyarlama+0x3d0>)
 8005770:	2301      	movs	r3, #1
 8005772:	ca06      	ldmia	r2, {r1, r2}
 8005774:	f7ff fc52 	bl	800501c <OLED_WriteString>
		if(durumFlash)
 8005778:	4b2b      	ldr	r3, [pc, #172]	; (8005828 <takvimiAyarlama+0x3d4>)
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d045      	beq.n	800580c <takvimiAyarlama+0x3b8>
		{
			if(takvimAryNo<2)
 8005780:	4b2a      	ldr	r3, [pc, #168]	; (800582c <takvimiAyarlama+0x3d8>)
 8005782:	f993 3000 	ldrsb.w	r3, [r3]
 8005786:	2b01      	cmp	r3, #1
 8005788:	dc13      	bgt.n	80057b2 <takvimiAyarlama+0x35e>
			{
				OLED_SetCursor(takvimAryNo*33, y);
 800578a:	4b28      	ldr	r3, [pc, #160]	; (800582c <takvimiAyarlama+0x3d8>)
 800578c:	f993 3000 	ldrsb.w	r3, [r3]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	0152      	lsls	r2, r2, #5
 8005796:	4413      	add	r3, r2
 8005798:	b2db      	uxtb	r3, r3
 800579a:	79fa      	ldrb	r2, [r7, #7]
 800579c:	4611      	mov	r1, r2
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff fc62 	bl	8005068 <OLED_SetCursor>
				OLED_WriteString("  ", Font_11x18, White);
 80057a4:	4a1e      	ldr	r2, [pc, #120]	; (8005820 <takvimiAyarlama+0x3cc>)
 80057a6:	2301      	movs	r3, #1
 80057a8:	ca06      	ldmia	r2, {r1, r2}
 80057aa:	4821      	ldr	r0, [pc, #132]	; (8005830 <takvimiAyarlama+0x3dc>)
 80057ac:	f7ff fc36 	bl	800501c <OLED_WriteString>
				OLED_SetCursor(30, y+20);
				OLED_WriteString("            ", Font_7x10, White);
			}

		}
}
 80057b0:	e02c      	b.n	800580c <takvimiAyarlama+0x3b8>
			else if(takvimAryNo==2)
 80057b2:	4b1e      	ldr	r3, [pc, #120]	; (800582c <takvimiAyarlama+0x3d8>)
 80057b4:	f993 3000 	ldrsb.w	r3, [r3]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d115      	bne.n	80057e8 <takvimiAyarlama+0x394>
				OLED_SetCursor(takvimAryNo*33+22, y);
 80057bc:	4b1b      	ldr	r3, [pc, #108]	; (800582c <takvimiAyarlama+0x3d8>)
 80057be:	f993 3000 	ldrsb.w	r3, [r3]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	0152      	lsls	r2, r2, #5
 80057c8:	4413      	add	r3, r2
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	3316      	adds	r3, #22
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	79fa      	ldrb	r2, [r7, #7]
 80057d2:	4611      	mov	r1, r2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fc47 	bl	8005068 <OLED_SetCursor>
				OLED_WriteString("  ", Font_11x18, White);
 80057da:	4a11      	ldr	r2, [pc, #68]	; (8005820 <takvimiAyarlama+0x3cc>)
 80057dc:	2301      	movs	r3, #1
 80057de:	ca06      	ldmia	r2, {r1, r2}
 80057e0:	4813      	ldr	r0, [pc, #76]	; (8005830 <takvimiAyarlama+0x3dc>)
 80057e2:	f7ff fc1b 	bl	800501c <OLED_WriteString>
}
 80057e6:	e011      	b.n	800580c <takvimiAyarlama+0x3b8>
			else if(takvimAryNo==3)
 80057e8:	4b10      	ldr	r3, [pc, #64]	; (800582c <takvimiAyarlama+0x3d8>)
 80057ea:	f993 3000 	ldrsb.w	r3, [r3]
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d10c      	bne.n	800580c <takvimiAyarlama+0x3b8>
				OLED_SetCursor(30, y+20);
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	3314      	adds	r3, #20
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	4619      	mov	r1, r3
 80057fa:	201e      	movs	r0, #30
 80057fc:	f7ff fc34 	bl	8005068 <OLED_SetCursor>
				OLED_WriteString("            ", Font_7x10, White);
 8005800:	4a08      	ldr	r2, [pc, #32]	; (8005824 <takvimiAyarlama+0x3d0>)
 8005802:	2301      	movs	r3, #1
 8005804:	ca06      	ldmia	r2, {r1, r2}
 8005806:	480b      	ldr	r0, [pc, #44]	; (8005834 <takvimiAyarlama+0x3e0>)
 8005808:	f7ff fc08 	bl	800501c <OLED_WriteString>
}
 800580c:	bf00      	nop
 800580e:	3730      	adds	r7, #48	; 0x30
 8005810:	46bd      	mov	sp, r7
 8005812:	bdb0      	pop	{r4, r5, r7, pc}
 8005814:	200008cc 	.word	0x200008cc
 8005818:	2000086c 	.word	0x2000086c
 800581c:	080067f8 	.word	0x080067f8
 8005820:	20000014 	.word	0x20000014
 8005824:	2000000c 	.word	0x2000000c
 8005828:	200006b5 	.word	0x200006b5
 800582c:	200006b4 	.word	0x200006b4
 8005830:	080067f4 	.word	0x080067f4
 8005834:	0800680c 	.word	0x0800680c

08005838 <displaySelect>:
	displaySelectKey=SERVO_KONTROL;
	displayClean=true;
}
/*Ekranda gösterilecek unsurları Key1 değerine göre seçer */
void displaySelect()
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af02      	add	r7, sp, #8

	button_Read(GPIOB,KEY_1_Pin,KEY_2_Pin,KEY_3_Pin,KEY_4_Pin); /*Menu ekranına geçirecek kısayol tuş kombinasyonunu algılayıp Key1 değerine aktarır*/
 800583e:	2340      	movs	r3, #64	; 0x40
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	2320      	movs	r3, #32
 8005844:	2210      	movs	r2, #16
 8005846:	2108      	movs	r1, #8
 8005848:	483b      	ldr	r0, [pc, #236]	; (8005938 <displaySelect+0x100>)
 800584a:	f000 f9e5 	bl	8005c18 <button_Read>
	if(Key==MENU_SISTEMI)
 800584e:	4b3b      	ldr	r3, [pc, #236]	; (800593c <displaySelect+0x104>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b30      	cmp	r3, #48	; 0x30
 8005854:	d106      	bne.n	8005864 <displaySelect+0x2c>
	{
		displaySelectKey=Key;
 8005856:	4b39      	ldr	r3, [pc, #228]	; (800593c <displaySelect+0x104>)
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	4b39      	ldr	r3, [pc, #228]	; (8005940 <displaySelect+0x108>)
 800585c:	701a      	strb	r2, [r3, #0]
		displayClean=true;
 800585e:	4b39      	ldr	r3, [pc, #228]	; (8005944 <displaySelect+0x10c>)
 8005860:	2201      	movs	r2, #1
 8005862:	701a      	strb	r2, [r3, #0]
	}
	switch(displaySelectKey)
 8005864:	4b36      	ldr	r3, [pc, #216]	; (8005940 <displaySelect+0x108>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b42      	cmp	r3, #66	; 0x42
 800586a:	d029      	beq.n	80058c0 <displaySelect+0x88>
 800586c:	2b42      	cmp	r3, #66	; 0x42
 800586e:	dc04      	bgt.n	800587a <displaySelect+0x42>
 8005870:	2b30      	cmp	r3, #48	; 0x30
 8005872:	d009      	beq.n	8005888 <displaySelect+0x50>
 8005874:	2b41      	cmp	r3, #65	; 0x41
 8005876:	d015      	beq.n	80058a4 <displaySelect+0x6c>
//		takvimGoster();

		break;

	}
}
 8005878:	e05a      	b.n	8005930 <displaySelect+0xf8>
	switch(displaySelectKey)
 800587a:	2b44      	cmp	r3, #68	; 0x44
 800587c:	d04b      	beq.n	8005916 <displaySelect+0xde>
 800587e:	2b44      	cmp	r3, #68	; 0x44
 8005880:	db2c      	blt.n	80058dc <displaySelect+0xa4>
 8005882:	2ba0      	cmp	r3, #160	; 0xa0
 8005884:	d038      	beq.n	80058f8 <displaySelect+0xc0>
}
 8005886:	e053      	b.n	8005930 <displaySelect+0xf8>
		if(displayClean)
 8005888:	4b2e      	ldr	r3, [pc, #184]	; (8005944 <displaySelect+0x10c>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <displaySelect+0x64>
		displayClean=false;
 8005890:	4b2c      	ldr	r3, [pc, #176]	; (8005944 <displaySelect+0x10c>)
 8005892:	2200      	movs	r2, #0
 8005894:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8005896:	2000      	movs	r0, #0
 8005898:	f7ff f996 	bl	8004bc8 <OLED_Fill>
		menuSistemi(6);
 800589c:	2006      	movs	r0, #6
 800589e:	f000 fad5 	bl	8005e4c <menuSistemi>
		break;
 80058a2:	e045      	b.n	8005930 <displaySelect+0xf8>
		if(displayClean)
 80058a4:	4b27      	ldr	r3, [pc, #156]	; (8005944 <displaySelect+0x10c>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <displaySelect+0x80>
		displayClean=false;
 80058ac:	4b25      	ldr	r3, [pc, #148]	; (8005944 <displaySelect+0x10c>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 80058b2:	2000      	movs	r0, #0
 80058b4:	f7ff f988 	bl	8004bc8 <OLED_Fill>
		saatiAyarlama(30);
 80058b8:	201e      	movs	r0, #30
 80058ba:	f7ff fc65 	bl	8005188 <saatiAyarlama>
		break;
 80058be:	e037      	b.n	8005930 <displaySelect+0xf8>
		if(displayClean)
 80058c0:	4b20      	ldr	r3, [pc, #128]	; (8005944 <displaySelect+0x10c>)
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d005      	beq.n	80058d4 <displaySelect+0x9c>
		displayClean=false;
 80058c8:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <displaySelect+0x10c>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 80058ce:	2000      	movs	r0, #0
 80058d0:	f7ff f97a 	bl	8004bc8 <OLED_Fill>
		takvimiAyarlama(20);
 80058d4:	2014      	movs	r0, #20
 80058d6:	f7ff fdbd 	bl	8005454 <takvimiAyarlama>
		break;
 80058da:	e029      	b.n	8005930 <displaySelect+0xf8>
		if(displayClean)
 80058dc:	4b19      	ldr	r3, [pc, #100]	; (8005944 <displaySelect+0x10c>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <displaySelect+0xb8>
		displayClean=false;
 80058e4:	4b17      	ldr	r3, [pc, #92]	; (8005944 <displaySelect+0x10c>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 80058ea:	2000      	movs	r0, #0
 80058ec:	f7ff f96c 	bl	8004bc8 <OLED_Fill>
		alarmAyarlama(20);
 80058f0:	2014      	movs	r0, #20
 80058f2:	f7ff fd9b 	bl	800542c <alarmAyarlama>
		break;
 80058f6:	e01b      	b.n	8005930 <displaySelect+0xf8>
		if(displayClean)
 80058f8:	4b12      	ldr	r3, [pc, #72]	; (8005944 <displaySelect+0x10c>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <displaySelect+0xd4>
		displayClean=false;
 8005900:	4b10      	ldr	r3, [pc, #64]	; (8005944 <displaySelect+0x10c>)
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8005906:	2000      	movs	r0, #0
 8005908:	f7ff f95e 	bl	8004bc8 <OLED_Fill>
		alarmGoster();
 800590c:	f000 f886 	bl	8005a1c <alarmGoster>
		takvimGoster();
 8005910:	f000 f8ae 	bl	8005a70 <takvimGoster>
		break;
 8005914:	e00c      	b.n	8005930 <displaySelect+0xf8>
		if(displayClean)
 8005916:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <displaySelect+0x10c>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d005      	beq.n	800592a <displaySelect+0xf2>
		displayClean=false;
 800591e:	4b09      	ldr	r3, [pc, #36]	; (8005944 <displaySelect+0x10c>)
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8005924:	2000      	movs	r0, #0
 8005926:	f7ff f94f 	bl	8004bc8 <OLED_Fill>
		servoKontrol();
 800592a:	f000 f913 	bl	8005b54 <servoKontrol>
		break;
 800592e:	bf00      	nop
}
 8005930:	bf00      	nop
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40010c00 	.word	0x40010c00
 800593c:	200008cd 	.word	0x200008cd
 8005940:	200008ce 	.word	0x200008ce
 8005944:	200008ac 	.word	0x200008ac

08005948 <kayitSorma>:
	currentM = &menu1M;
	displayClean=true;
}

void kayitSorma(uint8_t x1,uint8_t y1)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	4603      	mov	r3, r0
 8005950:	460a      	mov	r2, r1
 8005952:	71fb      	strb	r3, [r7, #7]
 8005954:	4613      	mov	r3, r2
 8005956:	71bb      	strb	r3, [r7, #6]
	if(durumFlash)
 8005958:	4b12      	ldr	r3, [pc, #72]	; (80059a4 <kayitSorma+0x5c>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00e      	beq.n	800597e <kayitSorma+0x36>
	{
		OLED_SetCursor(x1, y1+20);
 8005960:	79bb      	ldrb	r3, [r7, #6]
 8005962:	3314      	adds	r3, #20
 8005964:	b2da      	uxtb	r2, r3
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	4611      	mov	r1, r2
 800596a:	4618      	mov	r0, r3
 800596c:	f7ff fb7c 	bl	8005068 <OLED_SetCursor>
		OLED_WriteString("Kaydedilsin mi?", Font_7x10, White);
 8005970:	4a0d      	ldr	r2, [pc, #52]	; (80059a8 <kayitSorma+0x60>)
 8005972:	2301      	movs	r3, #1
 8005974:	ca06      	ldmia	r2, {r1, r2}
 8005976:	480d      	ldr	r0, [pc, #52]	; (80059ac <kayitSorma+0x64>)
 8005978:	f7ff fb50 	bl	800501c <OLED_WriteString>
	else
	{
		OLED_SetCursor(x1, y1+20);
		OLED_WriteString("               ", Font_7x10, White);
	}
}
 800597c:	e00d      	b.n	800599a <kayitSorma+0x52>
		OLED_SetCursor(x1, y1+20);
 800597e:	79bb      	ldrb	r3, [r7, #6]
 8005980:	3314      	adds	r3, #20
 8005982:	b2da      	uxtb	r2, r3
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	4611      	mov	r1, r2
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff fb6d 	bl	8005068 <OLED_SetCursor>
		OLED_WriteString("               ", Font_7x10, White);
 800598e:	4a06      	ldr	r2, [pc, #24]	; (80059a8 <kayitSorma+0x60>)
 8005990:	2301      	movs	r3, #1
 8005992:	ca06      	ldmia	r2, {r1, r2}
 8005994:	4806      	ldr	r0, [pc, #24]	; (80059b0 <kayitSorma+0x68>)
 8005996:	f7ff fb41 	bl	800501c <OLED_WriteString>
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200006b5 	.word	0x200006b5
 80059a8:	2000000c 	.word	0x2000000c
 80059ac:	0800687c 	.word	0x0800687c
 80059b0:	0800688c 	.word	0x0800688c

080059b4 <alarmRead>:

bool alarmRead(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
return ((RTC->CRL & RTC_CRL_ALRF_Msk)>> RTC_CRL_ALRF_Pos);//RTC_CRL_ALRF_Pos
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <alarmRead+0x20>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	085b      	lsrs	r3, r3, #1
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bf14      	ite	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	2300      	moveq	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr
 80059d4:	40002800 	.word	0x40002800

080059d8 <alarmDurdur>:

void alarmDurdur()
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
	RTC->CRL &=~RTC_CRL_ALRF;
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <alarmDurdur+0x18>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4a03      	ldr	r2, [pc, #12]	; (80059f0 <alarmDurdur+0x18>)
 80059e2:	f023 0302 	bic.w	r3, r3, #2
 80059e6:	6053      	str	r3, [r2, #4]
}
 80059e8:	bf00      	nop
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bc80      	pop	{r7}
 80059ee:	4770      	bx	lr
 80059f0:	40002800 	.word	0x40002800

080059f4 <alarmDeneme>:

void alarmDeneme(uint8_t alarmDurdurmaKeyDegeri)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	71fb      	strb	r3, [r7, #7]
	if(Key==alarmDurdurmaKeyDegeri)
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <alarmDeneme+0x24>)
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	79fa      	ldrb	r2, [r7, #7]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d101      	bne.n	8005a0c <alarmDeneme+0x18>
	{
		alarmDurdur();
 8005a08:	f7ff ffe6 	bl	80059d8 <alarmDurdur>
	}

	if(alarmRead())
 8005a0c:	f7ff ffd2 	bl	80059b4 <alarmRead>
	}
	else
	{
//		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,RESET);
	}
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	200008cd 	.word	0x200008cd

08005a1c <alarmGoster>:

void alarmGoster()
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af02      	add	r7, sp, #8
	extern RTC_HandleTypeDef hrtc;

	RTC_AlarmTypeDef sAlarmGet;

	/* Get the RTC current Time */
	HAL_RTC_GetAlarm(&hrtc, &sAlarmGet,RTC_ALARM_A, RTC_FORMAT_BIN);
 8005a22:	4639      	mov	r1, r7
 8005a24:	2300      	movs	r3, #0
 8005a26:	2200      	movs	r2, #0
 8005a28:	480e      	ldr	r0, [pc, #56]	; (8005a64 <alarmGoster+0x48>)
 8005a2a:	f7fd ff37 	bl	800389c <HAL_RTC_GetAlarm>

	/* Display time Format : hh:mm:ss */
	sprintf(aShowAlarm, "%2d:%02d:%02d", sAlarmGet.AlarmTime.Hours, sAlarmGet.AlarmTime.Minutes, sAlarmGet.AlarmTime.Seconds);
 8005a2e:	783b      	ldrb	r3, [r7, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	787b      	ldrb	r3, [r7, #1]
 8005a34:	4619      	mov	r1, r3
 8005a36:	78bb      	ldrb	r3, [r7, #2]
 8005a38:	f107 0008 	add.w	r0, r7, #8
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4909      	ldr	r1, [pc, #36]	; (8005a68 <alarmGoster+0x4c>)
 8005a42:	f000 fa97 	bl	8005f74 <siprintf>
	OLED_SetCursor(30, 0);
 8005a46:	2100      	movs	r1, #0
 8005a48:	201e      	movs	r0, #30
 8005a4a:	f7ff fb0d 	bl	8005068 <OLED_SetCursor>
	OLED_WriteString(aShowAlarm, Font_7x10, White);
 8005a4e:	4a07      	ldr	r2, [pc, #28]	; (8005a6c <alarmGoster+0x50>)
 8005a50:	f107 0008 	add.w	r0, r7, #8
 8005a54:	2301      	movs	r3, #1
 8005a56:	ca06      	ldmia	r2, {r1, r2}
 8005a58:	f7ff fae0 	bl	800501c <OLED_WriteString>
}
 8005a5c:	bf00      	nop
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20000820 	.word	0x20000820
 8005a68:	0800689c 	.word	0x0800689c
 8005a6c:	2000000c 	.word	0x2000000c

08005a70 <takvimGoster>:
	OLED_SetCursor(30, 0);
	OLED_WriteString(aShowTime, Font_7x10, White);
}

void takvimGoster()
{
 8005a70:	b5b0      	push	{r4, r5, r7, lr}
 8005a72:	b094      	sub	sp, #80	; 0x50
 8005a74:	af02      	add	r7, sp, #8

	RTC_TimeTypeDef sTimeGet;
	RTC_DateTypeDef sDateGet;

//	  const char* weekD[] = {"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "??"};
	char* weekDay[] = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday",
 8005a76:	4b31      	ldr	r3, [pc, #196]	; (8005b3c <takvimGoster+0xcc>)
 8005a78:	1d3c      	adds	r4, r7, #4
 8005a7a:	461d      	mov	r5, r3
 8005a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"Saturday", "Sunday"};

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &sTimeGet, RTC_FORMAT_BIN);
 8005a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4619      	mov	r1, r3
 8005a90:	482b      	ldr	r0, [pc, #172]	; (8005b40 <takvimGoster+0xd0>)
 8005a92:	f7fd fc6d 	bl	8003370 <HAL_RTC_GetTime>
	/* Display time Format : hh:mm:ss */
	sprintf(aShowTime, "%2d:%02d:%02d", sTimeGet.Hours, sTimeGet.Minutes,
 8005a96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005aa0:	4619      	mov	r1, r3
			sTimeGet.Seconds);
 8005aa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
	sprintf(aShowTime, "%2d:%02d:%02d", sTimeGet.Hours, sTimeGet.Minutes,
 8005aa6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	460b      	mov	r3, r1
 8005aae:	4925      	ldr	r1, [pc, #148]	; (8005b44 <takvimGoster+0xd4>)
 8005ab0:	f000 fa60 	bl	8005f74 <siprintf>
	OLED_SetCursor(14, 16);
 8005ab4:	2110      	movs	r1, #16
 8005ab6:	200e      	movs	r0, #14
 8005ab8:	f7ff fad6 	bl	8005068 <OLED_SetCursor>
	OLED_WriteString(aShowTime, Font_11x18, White);
 8005abc:	4a22      	ldr	r2, [pc, #136]	; (8005b48 <takvimGoster+0xd8>)
 8005abe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	ca06      	ldmia	r2, {r1, r2}
 8005ac6:	f7ff faa9 	bl	800501c <OLED_WriteString>

	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &sDateGet, RTC_FORMAT_BIN);
 8005aca:	f107 0320 	add.w	r3, r7, #32
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	481b      	ldr	r0, [pc, #108]	; (8005b40 <takvimGoster+0xd0>)
 8005ad4:	f7fd fdda 	bl	800368c <HAL_RTC_GetDate>
	/* Display date Format : mm-dd-yy */
	sprintf(aShowDate, "%02d-%02d-%2d", sDateGet.Date, sDateGet.Month,
 8005ad8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005adc:	461a      	mov	r2, r3
 8005ade:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005ae2:	4619      	mov	r1, r3
			2000 + sDateGet.Year);
 8005ae4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
	sprintf(aShowDate, "%02d-%02d-%2d", sDateGet.Date, sDateGet.Month,
 8005ae8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005aec:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	460b      	mov	r3, r1
 8005af4:	4915      	ldr	r1, [pc, #84]	; (8005b4c <takvimGoster+0xdc>)
 8005af6:	f000 fa3d 	bl	8005f74 <siprintf>
	OLED_SetCursor(25, 40);
 8005afa:	2128      	movs	r1, #40	; 0x28
 8005afc:	2019      	movs	r0, #25
 8005afe:	f7ff fab3 	bl	8005068 <OLED_SetCursor>
	OLED_WriteString(aShowDate, Font_7x10, White);
 8005b02:	4a13      	ldr	r2, [pc, #76]	; (8005b50 <takvimGoster+0xe0>)
 8005b04:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005b08:	2301      	movs	r3, #1
 8005b0a:	ca06      	ldmia	r2, {r1, r2}
 8005b0c:	f7ff fa86 	bl	800501c <OLED_WriteString>
	OLED_SetCursor(30, 53);
 8005b10:	2135      	movs	r1, #53	; 0x35
 8005b12:	201e      	movs	r0, #30
 8005b14:	f7ff faa8 	bl	8005068 <OLED_SetCursor>
	OLED_WriteString(weekDay[sDateGet.WeekDay-1], Font_7x10, White);  //
 8005b18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005b24:	4413      	add	r3, r2
 8005b26:	f853 0c44 	ldr.w	r0, [r3, #-68]
 8005b2a:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <takvimGoster+0xe0>)
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	ca06      	ldmia	r2, {r1, r2}
 8005b30:	f7ff fa74 	bl	800501c <OLED_WriteString>
}
 8005b34:	bf00      	nop
 8005b36:	3748      	adds	r7, #72	; 0x48
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b3c:	08006860 	.word	0x08006860
 8005b40:	20000820 	.word	0x20000820
 8005b44:	0800689c 	.word	0x0800689c
 8005b48:	20000014 	.word	0x20000014
 8005b4c:	080068ac 	.word	0x080068ac
 8005b50:	2000000c 	.word	0x2000000c

08005b54 <servoKontrol>:
#include "include_Ap.h"

void servoKontrol()
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
	extern uint16_t servoDeger;
	extern TIM_HandleTypeDef htim3;
		switch(Key)
 8005b58:	4b27      	ldr	r3, [pc, #156]	; (8005bf8 <servoKontrol+0xa4>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2bb0      	cmp	r3, #176	; 0xb0
 8005b5e:	d034      	beq.n	8005bca <servoKontrol+0x76>
 8005b60:	2bb0      	cmp	r3, #176	; 0xb0
 8005b62:	dc02      	bgt.n	8005b6a <servoKontrol+0x16>
 8005b64:	2b70      	cmp	r3, #112	; 0x70
 8005b66:	d021      	beq.n	8005bac <servoKontrol+0x58>
 8005b68:	e03e      	b.n	8005be8 <servoKontrol+0x94>
 8005b6a:	2bd0      	cmp	r3, #208	; 0xd0
 8005b6c:	d002      	beq.n	8005b74 <servoKontrol+0x20>
 8005b6e:	2be0      	cmp	r3, #224	; 0xe0
 8005b70:	d00e      	beq.n	8005b90 <servoKontrol+0x3c>
 8005b72:	e039      	b.n	8005be8 <servoKontrol+0x94>
		{
		case T1DEGER:
			servoDeger=94;
 8005b74:	4b21      	ldr	r3, [pc, #132]	; (8005bfc <servoKontrol+0xa8>)
 8005b76:	225e      	movs	r2, #94	; 0x5e
 8005b78:	801a      	strh	r2, [r3, #0]
			OLED_SetCursor(0, 20);
 8005b7a:	2114      	movs	r1, #20
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f7ff fa73 	bl	8005068 <OLED_SetCursor>
			OLED_WriteString("SERVO ACISI :  0", Font_7x10, White);
 8005b82:	4a1f      	ldr	r2, [pc, #124]	; (8005c00 <servoKontrol+0xac>)
 8005b84:	2301      	movs	r3, #1
 8005b86:	ca06      	ldmia	r2, {r1, r2}
 8005b88:	481e      	ldr	r0, [pc, #120]	; (8005c04 <servoKontrol+0xb0>)
 8005b8a:	f7ff fa47 	bl	800501c <OLED_WriteString>

			break;
 8005b8e:	e02b      	b.n	8005be8 <servoKontrol+0x94>
		case T2DEGER:
			servoDeger=219;
 8005b90:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <servoKontrol+0xa8>)
 8005b92:	22db      	movs	r2, #219	; 0xdb
 8005b94:	801a      	strh	r2, [r3, #0]
			OLED_SetCursor(0, 20);
 8005b96:	2114      	movs	r1, #20
 8005b98:	2000      	movs	r0, #0
 8005b9a:	f7ff fa65 	bl	8005068 <OLED_SetCursor>
			OLED_WriteString("SERVO ACISI : 90",  Font_7x10, White);
 8005b9e:	4a18      	ldr	r2, [pc, #96]	; (8005c00 <servoKontrol+0xac>)
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	ca06      	ldmia	r2, {r1, r2}
 8005ba4:	4818      	ldr	r0, [pc, #96]	; (8005c08 <servoKontrol+0xb4>)
 8005ba6:	f7ff fa39 	bl	800501c <OLED_WriteString>

			break;
 8005baa:	e01d      	b.n	8005be8 <servoKontrol+0x94>
		case T3DEGER:
			servoDeger=344;
 8005bac:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <servoKontrol+0xa8>)
 8005bae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005bb2:	801a      	strh	r2, [r3, #0]
			OLED_SetCursor(0, 20);
 8005bb4:	2114      	movs	r1, #20
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	f7ff fa56 	bl	8005068 <OLED_SetCursor>
			OLED_WriteString("SERVO ACISI :180",  Font_7x10, White);
 8005bbc:	4a10      	ldr	r2, [pc, #64]	; (8005c00 <servoKontrol+0xac>)
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	ca06      	ldmia	r2, {r1, r2}
 8005bc2:	4812      	ldr	r0, [pc, #72]	; (8005c0c <servoKontrol+0xb8>)
 8005bc4:	f7ff fa2a 	bl	800501c <OLED_WriteString>

			break;
 8005bc8:	e00e      	b.n	8005be8 <servoKontrol+0x94>
		case T4DEGER:
			servoDeger=469;
 8005bca:	4b0c      	ldr	r3, [pc, #48]	; (8005bfc <servoKontrol+0xa8>)
 8005bcc:	f240 12d5 	movw	r2, #469	; 0x1d5
 8005bd0:	801a      	strh	r2, [r3, #0]
			OLED_SetCursor(0, 20);
 8005bd2:	2114      	movs	r1, #20
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f7ff fa47 	bl	8005068 <OLED_SetCursor>
			OLED_WriteString("SERVO ACISI :270",  Font_7x10, White);
 8005bda:	4a09      	ldr	r2, [pc, #36]	; (8005c00 <servoKontrol+0xac>)
 8005bdc:	2301      	movs	r3, #1
 8005bde:	ca06      	ldmia	r2, {r1, r2}
 8005be0:	480b      	ldr	r0, [pc, #44]	; (8005c10 <servoKontrol+0xbc>)
 8005be2:	f7ff fa1b 	bl	800501c <OLED_WriteString>

			break;
 8005be6:	bf00      	nop

		}

		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,servoDeger);
 8005be8:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <servoKontrol+0xa8>)
 8005bea:	881a      	ldrh	r2, [r3, #0]
 8005bec:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <servoKontrol+0xc0>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8005bf2:	bf00      	nop
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	200008cd 	.word	0x200008cd
 8005bfc:	200008d6 	.word	0x200008d6
 8005c00:	2000000c 	.word	0x2000000c
 8005c04:	080068bc 	.word	0x080068bc
 8005c08:	080068d0 	.word	0x080068d0
 8005c0c:	080068e4 	.word	0x080068e4
 8005c10:	080068f8 	.word	0x080068f8
 8005c14:	200006b8 	.word	0x200006b8

08005c18 <button_Read>:
//  HAL_GPIO_Init(GPIOD, &ButtonPed_InitStruct);

}

void button_Read(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin1, uint16_t GPIO_Pin2, uint16_t GPIO_Pin3, uint16_t GPIO_Pin4)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	4608      	mov	r0, r1
 8005c22:	4611      	mov	r1, r2
 8005c24:	461a      	mov	r2, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	817b      	strh	r3, [r7, #10]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	813b      	strh	r3, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
  Key=(GPIOx->IDR & (GPIO_Pin1|GPIO_Pin2|GPIO_Pin3|GPIO_Pin4));
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	897b      	ldrh	r3, [r7, #10]
 8005c3a:	b2d9      	uxtb	r1, r3
 8005c3c:	893b      	ldrh	r3, [r7, #8]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	430b      	orrs	r3, r1
 8005c42:	b2d9      	uxtb	r1, r3
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	430b      	orrs	r3, r1
 8005c4a:	b2d9      	uxtb	r1, r3
 8005c4c:	8b3b      	ldrh	r3, [r7, #24]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	430b      	orrs	r3, r1
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	4013      	ands	r3, r2
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <button_Read+0x5c>)
 8005c5a:	701a      	strb	r2, [r3, #0]

  if(Key==T0DEGER)
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <button_Read+0x5c>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2bf0      	cmp	r3, #240	; 0xf0
 8005c62:	d102      	bne.n	8005c6a <button_Read+0x52>
  {
	  durum=true;
 8005c64:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <button_Read+0x60>)
 8005c66:	2201      	movs	r2, #1
 8005c68:	701a      	strb	r2, [r3, #0]
  }
}
 8005c6a:	bf00      	nop
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr
 8005c74:	200008cd 	.word	0x200008cd
 8005c78:	200006f8 	.word	0x200006f8

08005c7c <Next>:
    currentNode->DoWork 	= DoWork;
}


void Next(menuLevelsTypeDef **currentNode)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  if( (*currentNode) ->next != 0)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d004      	beq.n	8005c98 <Next+0x1c>
  (*currentNode) = (*currentNode)->next;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bc80      	pop	{r7}
 8005ca0:	4770      	bx	lr

08005ca2 <Prev>:

void Prev(menuLevelsTypeDef **currentNode)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  if((*currentNode)->prev != 0)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d004      	beq.n	8005cbe <Prev+0x1c>
  (*currentNode) = (*currentNode)->prev;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	601a      	str	r2, [r3, #0]
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <Up>:

void Up(menuLevelsTypeDef **currentNode)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  if((*currentNode)->up != 0)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d004      	beq.n	8005ce4 <Up+0x1c>
  (*currentNode) = (*currentNode)->up;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	695a      	ldr	r2, [r3, #20]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	601a      	str	r2, [r3, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <Down>:

void Down(menuLevelsTypeDef **currentNode)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  if((*currentNode)->DoWork != 0)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d004      	beq.n	8005d0a <Down+0x1c>
    (*currentNode)->DoWork();
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	4798      	blx	r3
  else if((*currentNode)->down != 0)
    (*currentNode) = (*currentNode)->down;
}
 8005d08:	e009      	b.n	8005d1e <Down+0x30>
  else if((*currentNode)->down != 0)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <Down+0x30>
    (*currentNode) = (*currentNode)->down;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	601a      	str	r2, [r3, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <ekranMenu>:
//HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,RESET);
}


void ekranMenu(uint8_t y1)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	71fb      	strb	r3, [r7, #7]

	char ekranYer[16];
	OLED_Fill(Black);
 8005d32:	2000      	movs	r0, #0
 8005d34:	f7fe ff48 	bl	8004bc8 <OLED_Fill>

	strcpy(ekranYer, currentM->menuPtr->menuAdi);
 8005d38:	4b42      	ldr	r3, [pc, #264]	; (8005e44 <ekranMenu+0x11c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f107 0308 	add.w	r3, r7, #8
 8005d44:	4611      	mov	r1, r2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 f934 	bl	8005fb4 <strcpy>
	OLED_SetCursor(30, y1);
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	4619      	mov	r1, r3
 8005d50:	201e      	movs	r0, #30
 8005d52:	f7ff f989 	bl	8005068 <OLED_SetCursor>
	OLED_WriteString(ekranYer, Font_7x10, White);
 8005d56:	4a3c      	ldr	r2, [pc, #240]	; (8005e48 <ekranMenu+0x120>)
 8005d58:	f107 0008 	add.w	r0, r7, #8
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	ca06      	ldmia	r2, {r1, r2}
 8005d60:	f7ff f95c 	bl	800501c <OLED_WriteString>
	strcpy(ekranYer, currentM->menuPtr->satir1);
 8005d64:	4b37      	ldr	r3, [pc, #220]	; (8005e44 <ekranMenu+0x11c>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f103 020a 	add.w	r2, r3, #10
 8005d6e:	f107 0308 	add.w	r3, r7, #8
 8005d72:	4611      	mov	r1, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f91d 	bl	8005fb4 <strcpy>
	OLED_SetCursor(0, y1+15);
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	330f      	adds	r3, #15
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	4619      	mov	r1, r3
 8005d82:	2000      	movs	r0, #0
 8005d84:	f7ff f970 	bl	8005068 <OLED_SetCursor>
	OLED_WriteString(ekranYer, Font_7x10, currentM->color1);
 8005d88:	4b2e      	ldr	r3, [pc, #184]	; (8005e44 <ekranMenu+0x11c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	791b      	ldrb	r3, [r3, #4]
 8005d8e:	4a2e      	ldr	r2, [pc, #184]	; (8005e48 <ekranMenu+0x120>)
 8005d90:	f107 0008 	add.w	r0, r7, #8
 8005d94:	ca06      	ldmia	r2, {r1, r2}
 8005d96:	f7ff f941 	bl	800501c <OLED_WriteString>
	strcpy(ekranYer, currentM->menuPtr->satir2);
 8005d9a:	4b2a      	ldr	r3, [pc, #168]	; (8005e44 <ekranMenu+0x11c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f103 0214 	add.w	r2, r3, #20
 8005da4:	f107 0308 	add.w	r3, r7, #8
 8005da8:	4611      	mov	r1, r2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f902 	bl	8005fb4 <strcpy>
	OLED_SetCursor(0, y1+25);
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	3319      	adds	r3, #25
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	4619      	mov	r1, r3
 8005db8:	2000      	movs	r0, #0
 8005dba:	f7ff f955 	bl	8005068 <OLED_SetCursor>
	OLED_WriteString(ekranYer, Font_7x10, currentM->color2);
 8005dbe:	4b21      	ldr	r3, [pc, #132]	; (8005e44 <ekranMenu+0x11c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	795b      	ldrb	r3, [r3, #5]
 8005dc4:	4a20      	ldr	r2, [pc, #128]	; (8005e48 <ekranMenu+0x120>)
 8005dc6:	f107 0008 	add.w	r0, r7, #8
 8005dca:	ca06      	ldmia	r2, {r1, r2}
 8005dcc:	f7ff f926 	bl	800501c <OLED_WriteString>
	strcpy(ekranYer, currentM->menuPtr->satir3);
 8005dd0:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <ekranMenu+0x11c>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f103 021e 	add.w	r2, r3, #30
 8005dda:	f107 0308 	add.w	r3, r7, #8
 8005dde:	4611      	mov	r1, r2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 f8e7 	bl	8005fb4 <strcpy>
	OLED_SetCursor(0, y1+35);
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	3323      	adds	r3, #35	; 0x23
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	4619      	mov	r1, r3
 8005dee:	2000      	movs	r0, #0
 8005df0:	f7ff f93a 	bl	8005068 <OLED_SetCursor>
	OLED_WriteString(ekranYer, Font_7x10, currentM->color3);
 8005df4:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <ekranMenu+0x11c>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	799b      	ldrb	r3, [r3, #6]
 8005dfa:	4a13      	ldr	r2, [pc, #76]	; (8005e48 <ekranMenu+0x120>)
 8005dfc:	f107 0008 	add.w	r0, r7, #8
 8005e00:	ca06      	ldmia	r2, {r1, r2}
 8005e02:	f7ff f90b 	bl	800501c <OLED_WriteString>
	strcpy(ekranYer, currentM->menuPtr->satir4);
 8005e06:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <ekranMenu+0x11c>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005e10:	f107 0308 	add.w	r3, r7, #8
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 f8cc 	bl	8005fb4 <strcpy>
	OLED_SetCursor(0, y1+45);
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	332d      	adds	r3, #45	; 0x2d
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	4619      	mov	r1, r3
 8005e24:	2000      	movs	r0, #0
 8005e26:	f7ff f91f 	bl	8005068 <OLED_SetCursor>
	OLED_WriteString(ekranYer, Font_7x10, currentM->color4);
 8005e2a:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <ekranMenu+0x11c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	79db      	ldrb	r3, [r3, #7]
 8005e30:	4a05      	ldr	r2, [pc, #20]	; (8005e48 <ekranMenu+0x120>)
 8005e32:	f107 0008 	add.w	r0, r7, #8
 8005e36:	ca06      	ldmia	r2, {r1, r2}
 8005e38:	f7ff f8f0 	bl	800501c <OLED_WriteString>
}
 8005e3c:	bf00      	nop
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	2000065c 	.word	0x2000065c
 8005e48:	2000000c 	.word	0x2000000c

08005e4c <menuSistemi>:

void menuSistemi(uint8_t y) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	4603      	mov	r3, r0
 8005e54:	71fb      	strb	r3, [r7, #7]

	if (durum) {
 8005e56:	4b2b      	ldr	r3, [pc, #172]	; (8005f04 <menuSistemi+0xb8>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d04e      	beq.n	8005efc <menuSistemi+0xb0>

		switch (Key) {
 8005e5e:	4b2a      	ldr	r3, [pc, #168]	; (8005f08 <menuSistemi+0xbc>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2bd0      	cmp	r3, #208	; 0xd0
 8005e64:	d00f      	beq.n	8005e86 <menuSistemi+0x3a>
 8005e66:	2bd0      	cmp	r3, #208	; 0xd0
 8005e68:	dc04      	bgt.n	8005e74 <menuSistemi+0x28>
 8005e6a:	2b70      	cmp	r3, #112	; 0x70
 8005e6c:	d021      	beq.n	8005eb2 <menuSistemi+0x66>
 8005e6e:	2bb0      	cmp	r3, #176	; 0xb0
 8005e70:	d02a      	beq.n	8005ec8 <menuSistemi+0x7c>
 8005e72:	e034      	b.n	8005ede <menuSistemi+0x92>
 8005e74:	2be0      	cmp	r3, #224	; 0xe0
 8005e76:	d011      	beq.n	8005e9c <menuSistemi+0x50>
 8005e78:	2bf0      	cmp	r3, #240	; 0xf0
 8005e7a:	d130      	bne.n	8005ede <menuSistemi+0x92>
		case T0DEGER:
			ekranMenu(y);
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff ff52 	bl	8005d28 <ekranMenu>
			break;
 8005e84:	e02b      	b.n	8005ede <menuSistemi+0x92>

		case T1DEGER:
			Next(&currentM); //Check if there is a next node and then go there
 8005e86:	4821      	ldr	r0, [pc, #132]	; (8005f0c <menuSistemi+0xc0>)
 8005e88:	f7ff fef8 	bl	8005c7c <Next>
			ekranMenu(y);
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7ff ff4a 	bl	8005d28 <ekranMenu>
			durum = false;
 8005e94:	4b1b      	ldr	r3, [pc, #108]	; (8005f04 <menuSistemi+0xb8>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	701a      	strb	r2, [r3, #0]
			break;
 8005e9a:	e020      	b.n	8005ede <menuSistemi+0x92>

		case T2DEGER:
			Prev(&currentM);
 8005e9c:	481b      	ldr	r0, [pc, #108]	; (8005f0c <menuSistemi+0xc0>)
 8005e9e:	f7ff ff00 	bl	8005ca2 <Prev>
			ekranMenu(y);
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff ff3f 	bl	8005d28 <ekranMenu>
			durum = false;
 8005eaa:	4b16      	ldr	r3, [pc, #88]	; (8005f04 <menuSistemi+0xb8>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]
			break;
 8005eb0:	e015      	b.n	8005ede <menuSistemi+0x92>

		case T3DEGER:
			Down(&currentM);
 8005eb2:	4816      	ldr	r0, [pc, #88]	; (8005f0c <menuSistemi+0xc0>)
 8005eb4:	f7ff ff1b 	bl	8005cee <Down>
			ekranMenu(y);
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff ff34 	bl	8005d28 <ekranMenu>
			durum = false;
 8005ec0:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <menuSistemi+0xb8>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	701a      	strb	r2, [r3, #0]
			break;
 8005ec6:	e00a      	b.n	8005ede <menuSistemi+0x92>

		case T4DEGER:
			Up(&currentM);
 8005ec8:	4810      	ldr	r0, [pc, #64]	; (8005f0c <menuSistemi+0xc0>)
 8005eca:	f7ff fefd 	bl	8005cc8 <Up>
			ekranMenu(y);
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff ff29 	bl	8005d28 <ekranMenu>
			durum = false;
 8005ed6:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <menuSistemi+0xb8>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
			break;
 8005edc:	bf00      	nop
		default:
			;
		}
		OLED_DrawLine(0, y + 11, 110, y + 11, White);
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	330b      	adds	r3, #11
 8005ee4:	b299      	uxth	r1, r3
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	330b      	adds	r3, #11
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	2301      	movs	r3, #1
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	226e      	movs	r2, #110	; 0x6e
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	f7fe fe7e 	bl	8004bf8 <OLED_DrawLine>
	}

}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	200006f8 	.word	0x200006f8
 8005f08:	200008cd 	.word	0x200008cd
 8005f0c:	2000065c 	.word	0x2000065c

08005f10 <__errno>:
 8005f10:	4b01      	ldr	r3, [pc, #4]	; (8005f18 <__errno+0x8>)
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	20000024 	.word	0x20000024

08005f1c <__libc_init_array>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	2500      	movs	r5, #0
 8005f20:	4e0c      	ldr	r6, [pc, #48]	; (8005f54 <__libc_init_array+0x38>)
 8005f22:	4c0d      	ldr	r4, [pc, #52]	; (8005f58 <__libc_init_array+0x3c>)
 8005f24:	1ba4      	subs	r4, r4, r6
 8005f26:	10a4      	asrs	r4, r4, #2
 8005f28:	42a5      	cmp	r5, r4
 8005f2a:	d109      	bne.n	8005f40 <__libc_init_array+0x24>
 8005f2c:	f000 fc3c 	bl	80067a8 <_init>
 8005f30:	2500      	movs	r5, #0
 8005f32:	4e0a      	ldr	r6, [pc, #40]	; (8005f5c <__libc_init_array+0x40>)
 8005f34:	4c0a      	ldr	r4, [pc, #40]	; (8005f60 <__libc_init_array+0x44>)
 8005f36:	1ba4      	subs	r4, r4, r6
 8005f38:	10a4      	asrs	r4, r4, #2
 8005f3a:	42a5      	cmp	r5, r4
 8005f3c:	d105      	bne.n	8005f4a <__libc_init_array+0x2e>
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f44:	4798      	blx	r3
 8005f46:	3501      	adds	r5, #1
 8005f48:	e7ee      	b.n	8005f28 <__libc_init_array+0xc>
 8005f4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f4e:	4798      	blx	r3
 8005f50:	3501      	adds	r5, #1
 8005f52:	e7f2      	b.n	8005f3a <__libc_init_array+0x1e>
 8005f54:	08007544 	.word	0x08007544
 8005f58:	08007544 	.word	0x08007544
 8005f5c:	08007544 	.word	0x08007544
 8005f60:	08007548 	.word	0x08007548

08005f64 <memset>:
 8005f64:	4603      	mov	r3, r0
 8005f66:	4402      	add	r2, r0
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d100      	bne.n	8005f6e <memset+0xa>
 8005f6c:	4770      	bx	lr
 8005f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005f72:	e7f9      	b.n	8005f68 <memset+0x4>

08005f74 <siprintf>:
 8005f74:	b40e      	push	{r1, r2, r3}
 8005f76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f7a:	b500      	push	{lr}
 8005f7c:	b09c      	sub	sp, #112	; 0x70
 8005f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8005f80:	9002      	str	r0, [sp, #8]
 8005f82:	9006      	str	r0, [sp, #24]
 8005f84:	9107      	str	r1, [sp, #28]
 8005f86:	9104      	str	r1, [sp, #16]
 8005f88:	4808      	ldr	r0, [pc, #32]	; (8005fac <siprintf+0x38>)
 8005f8a:	4909      	ldr	r1, [pc, #36]	; (8005fb0 <siprintf+0x3c>)
 8005f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f90:	9105      	str	r1, [sp, #20]
 8005f92:	6800      	ldr	r0, [r0, #0]
 8005f94:	a902      	add	r1, sp, #8
 8005f96:	9301      	str	r3, [sp, #4]
 8005f98:	f000 f86e 	bl	8006078 <_svfiprintf_r>
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	9b02      	ldr	r3, [sp, #8]
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	b01c      	add	sp, #112	; 0x70
 8005fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fa8:	b003      	add	sp, #12
 8005faa:	4770      	bx	lr
 8005fac:	20000024 	.word	0x20000024
 8005fb0:	ffff0208 	.word	0xffff0208

08005fb4 <strcpy>:
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fba:	f803 2b01 	strb.w	r2, [r3], #1
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	d1f9      	bne.n	8005fb6 <strcpy+0x2>
 8005fc2:	4770      	bx	lr

08005fc4 <__ssputs_r>:
 8005fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc8:	688e      	ldr	r6, [r1, #8]
 8005fca:	4682      	mov	sl, r0
 8005fcc:	429e      	cmp	r6, r3
 8005fce:	460c      	mov	r4, r1
 8005fd0:	4690      	mov	r8, r2
 8005fd2:	4699      	mov	r9, r3
 8005fd4:	d837      	bhi.n	8006046 <__ssputs_r+0x82>
 8005fd6:	898a      	ldrh	r2, [r1, #12]
 8005fd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fdc:	d031      	beq.n	8006042 <__ssputs_r+0x7e>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	6825      	ldr	r5, [r4, #0]
 8005fe2:	6909      	ldr	r1, [r1, #16]
 8005fe4:	1a6f      	subs	r7, r5, r1
 8005fe6:	6965      	ldr	r5, [r4, #20]
 8005fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fec:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ff0:	f109 0301 	add.w	r3, r9, #1
 8005ff4:	443b      	add	r3, r7
 8005ff6:	429d      	cmp	r5, r3
 8005ff8:	bf38      	it	cc
 8005ffa:	461d      	movcc	r5, r3
 8005ffc:	0553      	lsls	r3, r2, #21
 8005ffe:	d530      	bpl.n	8006062 <__ssputs_r+0x9e>
 8006000:	4629      	mov	r1, r5
 8006002:	f000 fb37 	bl	8006674 <_malloc_r>
 8006006:	4606      	mov	r6, r0
 8006008:	b950      	cbnz	r0, 8006020 <__ssputs_r+0x5c>
 800600a:	230c      	movs	r3, #12
 800600c:	f04f 30ff 	mov.w	r0, #4294967295
 8006010:	f8ca 3000 	str.w	r3, [sl]
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800601a:	81a3      	strh	r3, [r4, #12]
 800601c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006020:	463a      	mov	r2, r7
 8006022:	6921      	ldr	r1, [r4, #16]
 8006024:	f000 fab6 	bl	8006594 <memcpy>
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800602e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006032:	81a3      	strh	r3, [r4, #12]
 8006034:	6126      	str	r6, [r4, #16]
 8006036:	443e      	add	r6, r7
 8006038:	6026      	str	r6, [r4, #0]
 800603a:	464e      	mov	r6, r9
 800603c:	6165      	str	r5, [r4, #20]
 800603e:	1bed      	subs	r5, r5, r7
 8006040:	60a5      	str	r5, [r4, #8]
 8006042:	454e      	cmp	r6, r9
 8006044:	d900      	bls.n	8006048 <__ssputs_r+0x84>
 8006046:	464e      	mov	r6, r9
 8006048:	4632      	mov	r2, r6
 800604a:	4641      	mov	r1, r8
 800604c:	6820      	ldr	r0, [r4, #0]
 800604e:	f000 faac 	bl	80065aa <memmove>
 8006052:	68a3      	ldr	r3, [r4, #8]
 8006054:	2000      	movs	r0, #0
 8006056:	1b9b      	subs	r3, r3, r6
 8006058:	60a3      	str	r3, [r4, #8]
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	441e      	add	r6, r3
 800605e:	6026      	str	r6, [r4, #0]
 8006060:	e7dc      	b.n	800601c <__ssputs_r+0x58>
 8006062:	462a      	mov	r2, r5
 8006064:	f000 fb60 	bl	8006728 <_realloc_r>
 8006068:	4606      	mov	r6, r0
 800606a:	2800      	cmp	r0, #0
 800606c:	d1e2      	bne.n	8006034 <__ssputs_r+0x70>
 800606e:	6921      	ldr	r1, [r4, #16]
 8006070:	4650      	mov	r0, sl
 8006072:	f000 fab3 	bl	80065dc <_free_r>
 8006076:	e7c8      	b.n	800600a <__ssputs_r+0x46>

08006078 <_svfiprintf_r>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	461d      	mov	r5, r3
 800607e:	898b      	ldrh	r3, [r1, #12]
 8006080:	b09d      	sub	sp, #116	; 0x74
 8006082:	061f      	lsls	r7, r3, #24
 8006084:	4680      	mov	r8, r0
 8006086:	460c      	mov	r4, r1
 8006088:	4616      	mov	r6, r2
 800608a:	d50f      	bpl.n	80060ac <_svfiprintf_r+0x34>
 800608c:	690b      	ldr	r3, [r1, #16]
 800608e:	b96b      	cbnz	r3, 80060ac <_svfiprintf_r+0x34>
 8006090:	2140      	movs	r1, #64	; 0x40
 8006092:	f000 faef 	bl	8006674 <_malloc_r>
 8006096:	6020      	str	r0, [r4, #0]
 8006098:	6120      	str	r0, [r4, #16]
 800609a:	b928      	cbnz	r0, 80060a8 <_svfiprintf_r+0x30>
 800609c:	230c      	movs	r3, #12
 800609e:	f8c8 3000 	str.w	r3, [r8]
 80060a2:	f04f 30ff 	mov.w	r0, #4294967295
 80060a6:	e0c8      	b.n	800623a <_svfiprintf_r+0x1c2>
 80060a8:	2340      	movs	r3, #64	; 0x40
 80060aa:	6163      	str	r3, [r4, #20]
 80060ac:	2300      	movs	r3, #0
 80060ae:	9309      	str	r3, [sp, #36]	; 0x24
 80060b0:	2320      	movs	r3, #32
 80060b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060b6:	2330      	movs	r3, #48	; 0x30
 80060b8:	f04f 0b01 	mov.w	fp, #1
 80060bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060c0:	9503      	str	r5, [sp, #12]
 80060c2:	4637      	mov	r7, r6
 80060c4:	463d      	mov	r5, r7
 80060c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80060ca:	b10b      	cbz	r3, 80060d0 <_svfiprintf_r+0x58>
 80060cc:	2b25      	cmp	r3, #37	; 0x25
 80060ce:	d13e      	bne.n	800614e <_svfiprintf_r+0xd6>
 80060d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80060d4:	d00b      	beq.n	80060ee <_svfiprintf_r+0x76>
 80060d6:	4653      	mov	r3, sl
 80060d8:	4632      	mov	r2, r6
 80060da:	4621      	mov	r1, r4
 80060dc:	4640      	mov	r0, r8
 80060de:	f7ff ff71 	bl	8005fc4 <__ssputs_r>
 80060e2:	3001      	adds	r0, #1
 80060e4:	f000 80a4 	beq.w	8006230 <_svfiprintf_r+0x1b8>
 80060e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ea:	4453      	add	r3, sl
 80060ec:	9309      	str	r3, [sp, #36]	; 0x24
 80060ee:	783b      	ldrb	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 809d 	beq.w	8006230 <_svfiprintf_r+0x1b8>
 80060f6:	2300      	movs	r3, #0
 80060f8:	f04f 32ff 	mov.w	r2, #4294967295
 80060fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006100:	9304      	str	r3, [sp, #16]
 8006102:	9307      	str	r3, [sp, #28]
 8006104:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006108:	931a      	str	r3, [sp, #104]	; 0x68
 800610a:	462f      	mov	r7, r5
 800610c:	2205      	movs	r2, #5
 800610e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006112:	4850      	ldr	r0, [pc, #320]	; (8006254 <_svfiprintf_r+0x1dc>)
 8006114:	f000 fa30 	bl	8006578 <memchr>
 8006118:	9b04      	ldr	r3, [sp, #16]
 800611a:	b9d0      	cbnz	r0, 8006152 <_svfiprintf_r+0xda>
 800611c:	06d9      	lsls	r1, r3, #27
 800611e:	bf44      	itt	mi
 8006120:	2220      	movmi	r2, #32
 8006122:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006126:	071a      	lsls	r2, r3, #28
 8006128:	bf44      	itt	mi
 800612a:	222b      	movmi	r2, #43	; 0x2b
 800612c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006130:	782a      	ldrb	r2, [r5, #0]
 8006132:	2a2a      	cmp	r2, #42	; 0x2a
 8006134:	d015      	beq.n	8006162 <_svfiprintf_r+0xea>
 8006136:	462f      	mov	r7, r5
 8006138:	2000      	movs	r0, #0
 800613a:	250a      	movs	r5, #10
 800613c:	9a07      	ldr	r2, [sp, #28]
 800613e:	4639      	mov	r1, r7
 8006140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006144:	3b30      	subs	r3, #48	; 0x30
 8006146:	2b09      	cmp	r3, #9
 8006148:	d94d      	bls.n	80061e6 <_svfiprintf_r+0x16e>
 800614a:	b1b8      	cbz	r0, 800617c <_svfiprintf_r+0x104>
 800614c:	e00f      	b.n	800616e <_svfiprintf_r+0xf6>
 800614e:	462f      	mov	r7, r5
 8006150:	e7b8      	b.n	80060c4 <_svfiprintf_r+0x4c>
 8006152:	4a40      	ldr	r2, [pc, #256]	; (8006254 <_svfiprintf_r+0x1dc>)
 8006154:	463d      	mov	r5, r7
 8006156:	1a80      	subs	r0, r0, r2
 8006158:	fa0b f000 	lsl.w	r0, fp, r0
 800615c:	4318      	orrs	r0, r3
 800615e:	9004      	str	r0, [sp, #16]
 8006160:	e7d3      	b.n	800610a <_svfiprintf_r+0x92>
 8006162:	9a03      	ldr	r2, [sp, #12]
 8006164:	1d11      	adds	r1, r2, #4
 8006166:	6812      	ldr	r2, [r2, #0]
 8006168:	9103      	str	r1, [sp, #12]
 800616a:	2a00      	cmp	r2, #0
 800616c:	db01      	blt.n	8006172 <_svfiprintf_r+0xfa>
 800616e:	9207      	str	r2, [sp, #28]
 8006170:	e004      	b.n	800617c <_svfiprintf_r+0x104>
 8006172:	4252      	negs	r2, r2
 8006174:	f043 0302 	orr.w	r3, r3, #2
 8006178:	9207      	str	r2, [sp, #28]
 800617a:	9304      	str	r3, [sp, #16]
 800617c:	783b      	ldrb	r3, [r7, #0]
 800617e:	2b2e      	cmp	r3, #46	; 0x2e
 8006180:	d10c      	bne.n	800619c <_svfiprintf_r+0x124>
 8006182:	787b      	ldrb	r3, [r7, #1]
 8006184:	2b2a      	cmp	r3, #42	; 0x2a
 8006186:	d133      	bne.n	80061f0 <_svfiprintf_r+0x178>
 8006188:	9b03      	ldr	r3, [sp, #12]
 800618a:	3702      	adds	r7, #2
 800618c:	1d1a      	adds	r2, r3, #4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	9203      	str	r2, [sp, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	bfb8      	it	lt
 8006196:	f04f 33ff 	movlt.w	r3, #4294967295
 800619a:	9305      	str	r3, [sp, #20]
 800619c:	4d2e      	ldr	r5, [pc, #184]	; (8006258 <_svfiprintf_r+0x1e0>)
 800619e:	2203      	movs	r2, #3
 80061a0:	7839      	ldrb	r1, [r7, #0]
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 f9e8 	bl	8006578 <memchr>
 80061a8:	b138      	cbz	r0, 80061ba <_svfiprintf_r+0x142>
 80061aa:	2340      	movs	r3, #64	; 0x40
 80061ac:	1b40      	subs	r0, r0, r5
 80061ae:	fa03 f000 	lsl.w	r0, r3, r0
 80061b2:	9b04      	ldr	r3, [sp, #16]
 80061b4:	3701      	adds	r7, #1
 80061b6:	4303      	orrs	r3, r0
 80061b8:	9304      	str	r3, [sp, #16]
 80061ba:	7839      	ldrb	r1, [r7, #0]
 80061bc:	2206      	movs	r2, #6
 80061be:	4827      	ldr	r0, [pc, #156]	; (800625c <_svfiprintf_r+0x1e4>)
 80061c0:	1c7e      	adds	r6, r7, #1
 80061c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061c6:	f000 f9d7 	bl	8006578 <memchr>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d038      	beq.n	8006240 <_svfiprintf_r+0x1c8>
 80061ce:	4b24      	ldr	r3, [pc, #144]	; (8006260 <_svfiprintf_r+0x1e8>)
 80061d0:	bb13      	cbnz	r3, 8006218 <_svfiprintf_r+0x1a0>
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	3307      	adds	r3, #7
 80061d6:	f023 0307 	bic.w	r3, r3, #7
 80061da:	3308      	adds	r3, #8
 80061dc:	9303      	str	r3, [sp, #12]
 80061de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061e0:	444b      	add	r3, r9
 80061e2:	9309      	str	r3, [sp, #36]	; 0x24
 80061e4:	e76d      	b.n	80060c2 <_svfiprintf_r+0x4a>
 80061e6:	fb05 3202 	mla	r2, r5, r2, r3
 80061ea:	2001      	movs	r0, #1
 80061ec:	460f      	mov	r7, r1
 80061ee:	e7a6      	b.n	800613e <_svfiprintf_r+0xc6>
 80061f0:	2300      	movs	r3, #0
 80061f2:	250a      	movs	r5, #10
 80061f4:	4619      	mov	r1, r3
 80061f6:	3701      	adds	r7, #1
 80061f8:	9305      	str	r3, [sp, #20]
 80061fa:	4638      	mov	r0, r7
 80061fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006200:	3a30      	subs	r2, #48	; 0x30
 8006202:	2a09      	cmp	r2, #9
 8006204:	d903      	bls.n	800620e <_svfiprintf_r+0x196>
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0c8      	beq.n	800619c <_svfiprintf_r+0x124>
 800620a:	9105      	str	r1, [sp, #20]
 800620c:	e7c6      	b.n	800619c <_svfiprintf_r+0x124>
 800620e:	fb05 2101 	mla	r1, r5, r1, r2
 8006212:	2301      	movs	r3, #1
 8006214:	4607      	mov	r7, r0
 8006216:	e7f0      	b.n	80061fa <_svfiprintf_r+0x182>
 8006218:	ab03      	add	r3, sp, #12
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	4622      	mov	r2, r4
 800621e:	4b11      	ldr	r3, [pc, #68]	; (8006264 <_svfiprintf_r+0x1ec>)
 8006220:	a904      	add	r1, sp, #16
 8006222:	4640      	mov	r0, r8
 8006224:	f3af 8000 	nop.w
 8006228:	f1b0 3fff 	cmp.w	r0, #4294967295
 800622c:	4681      	mov	r9, r0
 800622e:	d1d6      	bne.n	80061de <_svfiprintf_r+0x166>
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	065b      	lsls	r3, r3, #25
 8006234:	f53f af35 	bmi.w	80060a2 <_svfiprintf_r+0x2a>
 8006238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800623a:	b01d      	add	sp, #116	; 0x74
 800623c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006240:	ab03      	add	r3, sp, #12
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	4622      	mov	r2, r4
 8006246:	4b07      	ldr	r3, [pc, #28]	; (8006264 <_svfiprintf_r+0x1ec>)
 8006248:	a904      	add	r1, sp, #16
 800624a:	4640      	mov	r0, r8
 800624c:	f000 f882 	bl	8006354 <_printf_i>
 8006250:	e7ea      	b.n	8006228 <_svfiprintf_r+0x1b0>
 8006252:	bf00      	nop
 8006254:	08007510 	.word	0x08007510
 8006258:	08007516 	.word	0x08007516
 800625c:	0800751a 	.word	0x0800751a
 8006260:	00000000 	.word	0x00000000
 8006264:	08005fc5 	.word	0x08005fc5

08006268 <_printf_common>:
 8006268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800626c:	4691      	mov	r9, r2
 800626e:	461f      	mov	r7, r3
 8006270:	688a      	ldr	r2, [r1, #8]
 8006272:	690b      	ldr	r3, [r1, #16]
 8006274:	4606      	mov	r6, r0
 8006276:	4293      	cmp	r3, r2
 8006278:	bfb8      	it	lt
 800627a:	4613      	movlt	r3, r2
 800627c:	f8c9 3000 	str.w	r3, [r9]
 8006280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006284:	460c      	mov	r4, r1
 8006286:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800628a:	b112      	cbz	r2, 8006292 <_printf_common+0x2a>
 800628c:	3301      	adds	r3, #1
 800628e:	f8c9 3000 	str.w	r3, [r9]
 8006292:	6823      	ldr	r3, [r4, #0]
 8006294:	0699      	lsls	r1, r3, #26
 8006296:	bf42      	ittt	mi
 8006298:	f8d9 3000 	ldrmi.w	r3, [r9]
 800629c:	3302      	addmi	r3, #2
 800629e:	f8c9 3000 	strmi.w	r3, [r9]
 80062a2:	6825      	ldr	r5, [r4, #0]
 80062a4:	f015 0506 	ands.w	r5, r5, #6
 80062a8:	d107      	bne.n	80062ba <_printf_common+0x52>
 80062aa:	f104 0a19 	add.w	sl, r4, #25
 80062ae:	68e3      	ldr	r3, [r4, #12]
 80062b0:	f8d9 2000 	ldr.w	r2, [r9]
 80062b4:	1a9b      	subs	r3, r3, r2
 80062b6:	42ab      	cmp	r3, r5
 80062b8:	dc29      	bgt.n	800630e <_printf_common+0xa6>
 80062ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80062be:	6822      	ldr	r2, [r4, #0]
 80062c0:	3300      	adds	r3, #0
 80062c2:	bf18      	it	ne
 80062c4:	2301      	movne	r3, #1
 80062c6:	0692      	lsls	r2, r2, #26
 80062c8:	d42e      	bmi.n	8006328 <_printf_common+0xc0>
 80062ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062ce:	4639      	mov	r1, r7
 80062d0:	4630      	mov	r0, r6
 80062d2:	47c0      	blx	r8
 80062d4:	3001      	adds	r0, #1
 80062d6:	d021      	beq.n	800631c <_printf_common+0xb4>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	68e5      	ldr	r5, [r4, #12]
 80062dc:	f003 0306 	and.w	r3, r3, #6
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	bf18      	it	ne
 80062e4:	2500      	movne	r5, #0
 80062e6:	f8d9 2000 	ldr.w	r2, [r9]
 80062ea:	f04f 0900 	mov.w	r9, #0
 80062ee:	bf08      	it	eq
 80062f0:	1aad      	subeq	r5, r5, r2
 80062f2:	68a3      	ldr	r3, [r4, #8]
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	bf08      	it	eq
 80062f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062fc:	4293      	cmp	r3, r2
 80062fe:	bfc4      	itt	gt
 8006300:	1a9b      	subgt	r3, r3, r2
 8006302:	18ed      	addgt	r5, r5, r3
 8006304:	341a      	adds	r4, #26
 8006306:	454d      	cmp	r5, r9
 8006308:	d11a      	bne.n	8006340 <_printf_common+0xd8>
 800630a:	2000      	movs	r0, #0
 800630c:	e008      	b.n	8006320 <_printf_common+0xb8>
 800630e:	2301      	movs	r3, #1
 8006310:	4652      	mov	r2, sl
 8006312:	4639      	mov	r1, r7
 8006314:	4630      	mov	r0, r6
 8006316:	47c0      	blx	r8
 8006318:	3001      	adds	r0, #1
 800631a:	d103      	bne.n	8006324 <_printf_common+0xbc>
 800631c:	f04f 30ff 	mov.w	r0, #4294967295
 8006320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006324:	3501      	adds	r5, #1
 8006326:	e7c2      	b.n	80062ae <_printf_common+0x46>
 8006328:	2030      	movs	r0, #48	; 0x30
 800632a:	18e1      	adds	r1, r4, r3
 800632c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006336:	4422      	add	r2, r4
 8006338:	3302      	adds	r3, #2
 800633a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800633e:	e7c4      	b.n	80062ca <_printf_common+0x62>
 8006340:	2301      	movs	r3, #1
 8006342:	4622      	mov	r2, r4
 8006344:	4639      	mov	r1, r7
 8006346:	4630      	mov	r0, r6
 8006348:	47c0      	blx	r8
 800634a:	3001      	adds	r0, #1
 800634c:	d0e6      	beq.n	800631c <_printf_common+0xb4>
 800634e:	f109 0901 	add.w	r9, r9, #1
 8006352:	e7d8      	b.n	8006306 <_printf_common+0x9e>

08006354 <_printf_i>:
 8006354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006358:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800635c:	460c      	mov	r4, r1
 800635e:	7e09      	ldrb	r1, [r1, #24]
 8006360:	b085      	sub	sp, #20
 8006362:	296e      	cmp	r1, #110	; 0x6e
 8006364:	4617      	mov	r7, r2
 8006366:	4606      	mov	r6, r0
 8006368:	4698      	mov	r8, r3
 800636a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800636c:	f000 80b3 	beq.w	80064d6 <_printf_i+0x182>
 8006370:	d822      	bhi.n	80063b8 <_printf_i+0x64>
 8006372:	2963      	cmp	r1, #99	; 0x63
 8006374:	d036      	beq.n	80063e4 <_printf_i+0x90>
 8006376:	d80a      	bhi.n	800638e <_printf_i+0x3a>
 8006378:	2900      	cmp	r1, #0
 800637a:	f000 80b9 	beq.w	80064f0 <_printf_i+0x19c>
 800637e:	2958      	cmp	r1, #88	; 0x58
 8006380:	f000 8083 	beq.w	800648a <_printf_i+0x136>
 8006384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006388:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800638c:	e032      	b.n	80063f4 <_printf_i+0xa0>
 800638e:	2964      	cmp	r1, #100	; 0x64
 8006390:	d001      	beq.n	8006396 <_printf_i+0x42>
 8006392:	2969      	cmp	r1, #105	; 0x69
 8006394:	d1f6      	bne.n	8006384 <_printf_i+0x30>
 8006396:	6820      	ldr	r0, [r4, #0]
 8006398:	6813      	ldr	r3, [r2, #0]
 800639a:	0605      	lsls	r5, r0, #24
 800639c:	f103 0104 	add.w	r1, r3, #4
 80063a0:	d52a      	bpl.n	80063f8 <_printf_i+0xa4>
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6011      	str	r1, [r2, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	da03      	bge.n	80063b2 <_printf_i+0x5e>
 80063aa:	222d      	movs	r2, #45	; 0x2d
 80063ac:	425b      	negs	r3, r3
 80063ae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80063b2:	486f      	ldr	r0, [pc, #444]	; (8006570 <_printf_i+0x21c>)
 80063b4:	220a      	movs	r2, #10
 80063b6:	e039      	b.n	800642c <_printf_i+0xd8>
 80063b8:	2973      	cmp	r1, #115	; 0x73
 80063ba:	f000 809d 	beq.w	80064f8 <_printf_i+0x1a4>
 80063be:	d808      	bhi.n	80063d2 <_printf_i+0x7e>
 80063c0:	296f      	cmp	r1, #111	; 0x6f
 80063c2:	d020      	beq.n	8006406 <_printf_i+0xb2>
 80063c4:	2970      	cmp	r1, #112	; 0x70
 80063c6:	d1dd      	bne.n	8006384 <_printf_i+0x30>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	f043 0320 	orr.w	r3, r3, #32
 80063ce:	6023      	str	r3, [r4, #0]
 80063d0:	e003      	b.n	80063da <_printf_i+0x86>
 80063d2:	2975      	cmp	r1, #117	; 0x75
 80063d4:	d017      	beq.n	8006406 <_printf_i+0xb2>
 80063d6:	2978      	cmp	r1, #120	; 0x78
 80063d8:	d1d4      	bne.n	8006384 <_printf_i+0x30>
 80063da:	2378      	movs	r3, #120	; 0x78
 80063dc:	4865      	ldr	r0, [pc, #404]	; (8006574 <_printf_i+0x220>)
 80063de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80063e2:	e055      	b.n	8006490 <_printf_i+0x13c>
 80063e4:	6813      	ldr	r3, [r2, #0]
 80063e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063ea:	1d19      	adds	r1, r3, #4
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6011      	str	r1, [r2, #0]
 80063f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80063f4:	2301      	movs	r3, #1
 80063f6:	e08c      	b.n	8006512 <_printf_i+0x1be>
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063fe:	6011      	str	r1, [r2, #0]
 8006400:	bf18      	it	ne
 8006402:	b21b      	sxthne	r3, r3
 8006404:	e7cf      	b.n	80063a6 <_printf_i+0x52>
 8006406:	6813      	ldr	r3, [r2, #0]
 8006408:	6825      	ldr	r5, [r4, #0]
 800640a:	1d18      	adds	r0, r3, #4
 800640c:	6010      	str	r0, [r2, #0]
 800640e:	0628      	lsls	r0, r5, #24
 8006410:	d501      	bpl.n	8006416 <_printf_i+0xc2>
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	e002      	b.n	800641c <_printf_i+0xc8>
 8006416:	0668      	lsls	r0, r5, #25
 8006418:	d5fb      	bpl.n	8006412 <_printf_i+0xbe>
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	296f      	cmp	r1, #111	; 0x6f
 800641e:	bf14      	ite	ne
 8006420:	220a      	movne	r2, #10
 8006422:	2208      	moveq	r2, #8
 8006424:	4852      	ldr	r0, [pc, #328]	; (8006570 <_printf_i+0x21c>)
 8006426:	2100      	movs	r1, #0
 8006428:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800642c:	6865      	ldr	r5, [r4, #4]
 800642e:	2d00      	cmp	r5, #0
 8006430:	60a5      	str	r5, [r4, #8]
 8006432:	f2c0 8095 	blt.w	8006560 <_printf_i+0x20c>
 8006436:	6821      	ldr	r1, [r4, #0]
 8006438:	f021 0104 	bic.w	r1, r1, #4
 800643c:	6021      	str	r1, [r4, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d13d      	bne.n	80064be <_printf_i+0x16a>
 8006442:	2d00      	cmp	r5, #0
 8006444:	f040 808e 	bne.w	8006564 <_printf_i+0x210>
 8006448:	4665      	mov	r5, ip
 800644a:	2a08      	cmp	r2, #8
 800644c:	d10b      	bne.n	8006466 <_printf_i+0x112>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	07db      	lsls	r3, r3, #31
 8006452:	d508      	bpl.n	8006466 <_printf_i+0x112>
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	6862      	ldr	r2, [r4, #4]
 8006458:	429a      	cmp	r2, r3
 800645a:	bfde      	ittt	le
 800645c:	2330      	movle	r3, #48	; 0x30
 800645e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006462:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006466:	ebac 0305 	sub.w	r3, ip, r5
 800646a:	6123      	str	r3, [r4, #16]
 800646c:	f8cd 8000 	str.w	r8, [sp]
 8006470:	463b      	mov	r3, r7
 8006472:	aa03      	add	r2, sp, #12
 8006474:	4621      	mov	r1, r4
 8006476:	4630      	mov	r0, r6
 8006478:	f7ff fef6 	bl	8006268 <_printf_common>
 800647c:	3001      	adds	r0, #1
 800647e:	d14d      	bne.n	800651c <_printf_i+0x1c8>
 8006480:	f04f 30ff 	mov.w	r0, #4294967295
 8006484:	b005      	add	sp, #20
 8006486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800648a:	4839      	ldr	r0, [pc, #228]	; (8006570 <_printf_i+0x21c>)
 800648c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006490:	6813      	ldr	r3, [r2, #0]
 8006492:	6821      	ldr	r1, [r4, #0]
 8006494:	1d1d      	adds	r5, r3, #4
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6015      	str	r5, [r2, #0]
 800649a:	060a      	lsls	r2, r1, #24
 800649c:	d50b      	bpl.n	80064b6 <_printf_i+0x162>
 800649e:	07ca      	lsls	r2, r1, #31
 80064a0:	bf44      	itt	mi
 80064a2:	f041 0120 	orrmi.w	r1, r1, #32
 80064a6:	6021      	strmi	r1, [r4, #0]
 80064a8:	b91b      	cbnz	r3, 80064b2 <_printf_i+0x15e>
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	f022 0220 	bic.w	r2, r2, #32
 80064b0:	6022      	str	r2, [r4, #0]
 80064b2:	2210      	movs	r2, #16
 80064b4:	e7b7      	b.n	8006426 <_printf_i+0xd2>
 80064b6:	064d      	lsls	r5, r1, #25
 80064b8:	bf48      	it	mi
 80064ba:	b29b      	uxthmi	r3, r3
 80064bc:	e7ef      	b.n	800649e <_printf_i+0x14a>
 80064be:	4665      	mov	r5, ip
 80064c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80064c4:	fb02 3311 	mls	r3, r2, r1, r3
 80064c8:	5cc3      	ldrb	r3, [r0, r3]
 80064ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80064ce:	460b      	mov	r3, r1
 80064d0:	2900      	cmp	r1, #0
 80064d2:	d1f5      	bne.n	80064c0 <_printf_i+0x16c>
 80064d4:	e7b9      	b.n	800644a <_printf_i+0xf6>
 80064d6:	6813      	ldr	r3, [r2, #0]
 80064d8:	6825      	ldr	r5, [r4, #0]
 80064da:	1d18      	adds	r0, r3, #4
 80064dc:	6961      	ldr	r1, [r4, #20]
 80064de:	6010      	str	r0, [r2, #0]
 80064e0:	0628      	lsls	r0, r5, #24
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	d501      	bpl.n	80064ea <_printf_i+0x196>
 80064e6:	6019      	str	r1, [r3, #0]
 80064e8:	e002      	b.n	80064f0 <_printf_i+0x19c>
 80064ea:	066a      	lsls	r2, r5, #25
 80064ec:	d5fb      	bpl.n	80064e6 <_printf_i+0x192>
 80064ee:	8019      	strh	r1, [r3, #0]
 80064f0:	2300      	movs	r3, #0
 80064f2:	4665      	mov	r5, ip
 80064f4:	6123      	str	r3, [r4, #16]
 80064f6:	e7b9      	b.n	800646c <_printf_i+0x118>
 80064f8:	6813      	ldr	r3, [r2, #0]
 80064fa:	1d19      	adds	r1, r3, #4
 80064fc:	6011      	str	r1, [r2, #0]
 80064fe:	681d      	ldr	r5, [r3, #0]
 8006500:	6862      	ldr	r2, [r4, #4]
 8006502:	2100      	movs	r1, #0
 8006504:	4628      	mov	r0, r5
 8006506:	f000 f837 	bl	8006578 <memchr>
 800650a:	b108      	cbz	r0, 8006510 <_printf_i+0x1bc>
 800650c:	1b40      	subs	r0, r0, r5
 800650e:	6060      	str	r0, [r4, #4]
 8006510:	6863      	ldr	r3, [r4, #4]
 8006512:	6123      	str	r3, [r4, #16]
 8006514:	2300      	movs	r3, #0
 8006516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800651a:	e7a7      	b.n	800646c <_printf_i+0x118>
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	462a      	mov	r2, r5
 8006520:	4639      	mov	r1, r7
 8006522:	4630      	mov	r0, r6
 8006524:	47c0      	blx	r8
 8006526:	3001      	adds	r0, #1
 8006528:	d0aa      	beq.n	8006480 <_printf_i+0x12c>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	079b      	lsls	r3, r3, #30
 800652e:	d413      	bmi.n	8006558 <_printf_i+0x204>
 8006530:	68e0      	ldr	r0, [r4, #12]
 8006532:	9b03      	ldr	r3, [sp, #12]
 8006534:	4298      	cmp	r0, r3
 8006536:	bfb8      	it	lt
 8006538:	4618      	movlt	r0, r3
 800653a:	e7a3      	b.n	8006484 <_printf_i+0x130>
 800653c:	2301      	movs	r3, #1
 800653e:	464a      	mov	r2, r9
 8006540:	4639      	mov	r1, r7
 8006542:	4630      	mov	r0, r6
 8006544:	47c0      	blx	r8
 8006546:	3001      	adds	r0, #1
 8006548:	d09a      	beq.n	8006480 <_printf_i+0x12c>
 800654a:	3501      	adds	r5, #1
 800654c:	68e3      	ldr	r3, [r4, #12]
 800654e:	9a03      	ldr	r2, [sp, #12]
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	42ab      	cmp	r3, r5
 8006554:	dcf2      	bgt.n	800653c <_printf_i+0x1e8>
 8006556:	e7eb      	b.n	8006530 <_printf_i+0x1dc>
 8006558:	2500      	movs	r5, #0
 800655a:	f104 0919 	add.w	r9, r4, #25
 800655e:	e7f5      	b.n	800654c <_printf_i+0x1f8>
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1ac      	bne.n	80064be <_printf_i+0x16a>
 8006564:	7803      	ldrb	r3, [r0, #0]
 8006566:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800656a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800656e:	e76c      	b.n	800644a <_printf_i+0xf6>
 8006570:	08007521 	.word	0x08007521
 8006574:	08007532 	.word	0x08007532

08006578 <memchr>:
 8006578:	b510      	push	{r4, lr}
 800657a:	b2c9      	uxtb	r1, r1
 800657c:	4402      	add	r2, r0
 800657e:	4290      	cmp	r0, r2
 8006580:	4603      	mov	r3, r0
 8006582:	d101      	bne.n	8006588 <memchr+0x10>
 8006584:	2300      	movs	r3, #0
 8006586:	e003      	b.n	8006590 <memchr+0x18>
 8006588:	781c      	ldrb	r4, [r3, #0]
 800658a:	3001      	adds	r0, #1
 800658c:	428c      	cmp	r4, r1
 800658e:	d1f6      	bne.n	800657e <memchr+0x6>
 8006590:	4618      	mov	r0, r3
 8006592:	bd10      	pop	{r4, pc}

08006594 <memcpy>:
 8006594:	b510      	push	{r4, lr}
 8006596:	1e43      	subs	r3, r0, #1
 8006598:	440a      	add	r2, r1
 800659a:	4291      	cmp	r1, r2
 800659c:	d100      	bne.n	80065a0 <memcpy+0xc>
 800659e:	bd10      	pop	{r4, pc}
 80065a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065a8:	e7f7      	b.n	800659a <memcpy+0x6>

080065aa <memmove>:
 80065aa:	4288      	cmp	r0, r1
 80065ac:	b510      	push	{r4, lr}
 80065ae:	eb01 0302 	add.w	r3, r1, r2
 80065b2:	d807      	bhi.n	80065c4 <memmove+0x1a>
 80065b4:	1e42      	subs	r2, r0, #1
 80065b6:	4299      	cmp	r1, r3
 80065b8:	d00a      	beq.n	80065d0 <memmove+0x26>
 80065ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80065c2:	e7f8      	b.n	80065b6 <memmove+0xc>
 80065c4:	4283      	cmp	r3, r0
 80065c6:	d9f5      	bls.n	80065b4 <memmove+0xa>
 80065c8:	1881      	adds	r1, r0, r2
 80065ca:	1ad2      	subs	r2, r2, r3
 80065cc:	42d3      	cmn	r3, r2
 80065ce:	d100      	bne.n	80065d2 <memmove+0x28>
 80065d0:	bd10      	pop	{r4, pc}
 80065d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065d6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80065da:	e7f7      	b.n	80065cc <memmove+0x22>

080065dc <_free_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	4605      	mov	r5, r0
 80065e0:	2900      	cmp	r1, #0
 80065e2:	d043      	beq.n	800666c <_free_r+0x90>
 80065e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065e8:	1f0c      	subs	r4, r1, #4
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bfb8      	it	lt
 80065ee:	18e4      	addlt	r4, r4, r3
 80065f0:	f000 f8d0 	bl	8006794 <__malloc_lock>
 80065f4:	4a1e      	ldr	r2, [pc, #120]	; (8006670 <_free_r+0x94>)
 80065f6:	6813      	ldr	r3, [r2, #0]
 80065f8:	4610      	mov	r0, r2
 80065fa:	b933      	cbnz	r3, 800660a <_free_r+0x2e>
 80065fc:	6063      	str	r3, [r4, #4]
 80065fe:	6014      	str	r4, [r2, #0]
 8006600:	4628      	mov	r0, r5
 8006602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006606:	f000 b8c6 	b.w	8006796 <__malloc_unlock>
 800660a:	42a3      	cmp	r3, r4
 800660c:	d90b      	bls.n	8006626 <_free_r+0x4a>
 800660e:	6821      	ldr	r1, [r4, #0]
 8006610:	1862      	adds	r2, r4, r1
 8006612:	4293      	cmp	r3, r2
 8006614:	bf01      	itttt	eq
 8006616:	681a      	ldreq	r2, [r3, #0]
 8006618:	685b      	ldreq	r3, [r3, #4]
 800661a:	1852      	addeq	r2, r2, r1
 800661c:	6022      	streq	r2, [r4, #0]
 800661e:	6063      	str	r3, [r4, #4]
 8006620:	6004      	str	r4, [r0, #0]
 8006622:	e7ed      	b.n	8006600 <_free_r+0x24>
 8006624:	4613      	mov	r3, r2
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	b10a      	cbz	r2, 800662e <_free_r+0x52>
 800662a:	42a2      	cmp	r2, r4
 800662c:	d9fa      	bls.n	8006624 <_free_r+0x48>
 800662e:	6819      	ldr	r1, [r3, #0]
 8006630:	1858      	adds	r0, r3, r1
 8006632:	42a0      	cmp	r0, r4
 8006634:	d10b      	bne.n	800664e <_free_r+0x72>
 8006636:	6820      	ldr	r0, [r4, #0]
 8006638:	4401      	add	r1, r0
 800663a:	1858      	adds	r0, r3, r1
 800663c:	4282      	cmp	r2, r0
 800663e:	6019      	str	r1, [r3, #0]
 8006640:	d1de      	bne.n	8006600 <_free_r+0x24>
 8006642:	6810      	ldr	r0, [r2, #0]
 8006644:	6852      	ldr	r2, [r2, #4]
 8006646:	4401      	add	r1, r0
 8006648:	6019      	str	r1, [r3, #0]
 800664a:	605a      	str	r2, [r3, #4]
 800664c:	e7d8      	b.n	8006600 <_free_r+0x24>
 800664e:	d902      	bls.n	8006656 <_free_r+0x7a>
 8006650:	230c      	movs	r3, #12
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	e7d4      	b.n	8006600 <_free_r+0x24>
 8006656:	6820      	ldr	r0, [r4, #0]
 8006658:	1821      	adds	r1, r4, r0
 800665a:	428a      	cmp	r2, r1
 800665c:	bf01      	itttt	eq
 800665e:	6811      	ldreq	r1, [r2, #0]
 8006660:	6852      	ldreq	r2, [r2, #4]
 8006662:	1809      	addeq	r1, r1, r0
 8006664:	6021      	streq	r1, [r4, #0]
 8006666:	6062      	str	r2, [r4, #4]
 8006668:	605c      	str	r4, [r3, #4]
 800666a:	e7c9      	b.n	8006600 <_free_r+0x24>
 800666c:	bd38      	pop	{r3, r4, r5, pc}
 800666e:	bf00      	nop
 8006670:	200004b0 	.word	0x200004b0

08006674 <_malloc_r>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	1ccd      	adds	r5, r1, #3
 8006678:	f025 0503 	bic.w	r5, r5, #3
 800667c:	3508      	adds	r5, #8
 800667e:	2d0c      	cmp	r5, #12
 8006680:	bf38      	it	cc
 8006682:	250c      	movcc	r5, #12
 8006684:	2d00      	cmp	r5, #0
 8006686:	4606      	mov	r6, r0
 8006688:	db01      	blt.n	800668e <_malloc_r+0x1a>
 800668a:	42a9      	cmp	r1, r5
 800668c:	d903      	bls.n	8006696 <_malloc_r+0x22>
 800668e:	230c      	movs	r3, #12
 8006690:	6033      	str	r3, [r6, #0]
 8006692:	2000      	movs	r0, #0
 8006694:	bd70      	pop	{r4, r5, r6, pc}
 8006696:	f000 f87d 	bl	8006794 <__malloc_lock>
 800669a:	4a21      	ldr	r2, [pc, #132]	; (8006720 <_malloc_r+0xac>)
 800669c:	6814      	ldr	r4, [r2, #0]
 800669e:	4621      	mov	r1, r4
 80066a0:	b991      	cbnz	r1, 80066c8 <_malloc_r+0x54>
 80066a2:	4c20      	ldr	r4, [pc, #128]	; (8006724 <_malloc_r+0xb0>)
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	b91b      	cbnz	r3, 80066b0 <_malloc_r+0x3c>
 80066a8:	4630      	mov	r0, r6
 80066aa:	f000 f863 	bl	8006774 <_sbrk_r>
 80066ae:	6020      	str	r0, [r4, #0]
 80066b0:	4629      	mov	r1, r5
 80066b2:	4630      	mov	r0, r6
 80066b4:	f000 f85e 	bl	8006774 <_sbrk_r>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d124      	bne.n	8006706 <_malloc_r+0x92>
 80066bc:	230c      	movs	r3, #12
 80066be:	4630      	mov	r0, r6
 80066c0:	6033      	str	r3, [r6, #0]
 80066c2:	f000 f868 	bl	8006796 <__malloc_unlock>
 80066c6:	e7e4      	b.n	8006692 <_malloc_r+0x1e>
 80066c8:	680b      	ldr	r3, [r1, #0]
 80066ca:	1b5b      	subs	r3, r3, r5
 80066cc:	d418      	bmi.n	8006700 <_malloc_r+0x8c>
 80066ce:	2b0b      	cmp	r3, #11
 80066d0:	d90f      	bls.n	80066f2 <_malloc_r+0x7e>
 80066d2:	600b      	str	r3, [r1, #0]
 80066d4:	18cc      	adds	r4, r1, r3
 80066d6:	50cd      	str	r5, [r1, r3]
 80066d8:	4630      	mov	r0, r6
 80066da:	f000 f85c 	bl	8006796 <__malloc_unlock>
 80066de:	f104 000b 	add.w	r0, r4, #11
 80066e2:	1d23      	adds	r3, r4, #4
 80066e4:	f020 0007 	bic.w	r0, r0, #7
 80066e8:	1ac3      	subs	r3, r0, r3
 80066ea:	d0d3      	beq.n	8006694 <_malloc_r+0x20>
 80066ec:	425a      	negs	r2, r3
 80066ee:	50e2      	str	r2, [r4, r3]
 80066f0:	e7d0      	b.n	8006694 <_malloc_r+0x20>
 80066f2:	684b      	ldr	r3, [r1, #4]
 80066f4:	428c      	cmp	r4, r1
 80066f6:	bf16      	itet	ne
 80066f8:	6063      	strne	r3, [r4, #4]
 80066fa:	6013      	streq	r3, [r2, #0]
 80066fc:	460c      	movne	r4, r1
 80066fe:	e7eb      	b.n	80066d8 <_malloc_r+0x64>
 8006700:	460c      	mov	r4, r1
 8006702:	6849      	ldr	r1, [r1, #4]
 8006704:	e7cc      	b.n	80066a0 <_malloc_r+0x2c>
 8006706:	1cc4      	adds	r4, r0, #3
 8006708:	f024 0403 	bic.w	r4, r4, #3
 800670c:	42a0      	cmp	r0, r4
 800670e:	d005      	beq.n	800671c <_malloc_r+0xa8>
 8006710:	1a21      	subs	r1, r4, r0
 8006712:	4630      	mov	r0, r6
 8006714:	f000 f82e 	bl	8006774 <_sbrk_r>
 8006718:	3001      	adds	r0, #1
 800671a:	d0cf      	beq.n	80066bc <_malloc_r+0x48>
 800671c:	6025      	str	r5, [r4, #0]
 800671e:	e7db      	b.n	80066d8 <_malloc_r+0x64>
 8006720:	200004b0 	.word	0x200004b0
 8006724:	200004b4 	.word	0x200004b4

08006728 <_realloc_r>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	4607      	mov	r7, r0
 800672c:	4614      	mov	r4, r2
 800672e:	460e      	mov	r6, r1
 8006730:	b921      	cbnz	r1, 800673c <_realloc_r+0x14>
 8006732:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006736:	4611      	mov	r1, r2
 8006738:	f7ff bf9c 	b.w	8006674 <_malloc_r>
 800673c:	b922      	cbnz	r2, 8006748 <_realloc_r+0x20>
 800673e:	f7ff ff4d 	bl	80065dc <_free_r>
 8006742:	4625      	mov	r5, r4
 8006744:	4628      	mov	r0, r5
 8006746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006748:	f000 f826 	bl	8006798 <_malloc_usable_size_r>
 800674c:	42a0      	cmp	r0, r4
 800674e:	d20f      	bcs.n	8006770 <_realloc_r+0x48>
 8006750:	4621      	mov	r1, r4
 8006752:	4638      	mov	r0, r7
 8006754:	f7ff ff8e 	bl	8006674 <_malloc_r>
 8006758:	4605      	mov	r5, r0
 800675a:	2800      	cmp	r0, #0
 800675c:	d0f2      	beq.n	8006744 <_realloc_r+0x1c>
 800675e:	4631      	mov	r1, r6
 8006760:	4622      	mov	r2, r4
 8006762:	f7ff ff17 	bl	8006594 <memcpy>
 8006766:	4631      	mov	r1, r6
 8006768:	4638      	mov	r0, r7
 800676a:	f7ff ff37 	bl	80065dc <_free_r>
 800676e:	e7e9      	b.n	8006744 <_realloc_r+0x1c>
 8006770:	4635      	mov	r5, r6
 8006772:	e7e7      	b.n	8006744 <_realloc_r+0x1c>

08006774 <_sbrk_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	2300      	movs	r3, #0
 8006778:	4c05      	ldr	r4, [pc, #20]	; (8006790 <_sbrk_r+0x1c>)
 800677a:	4605      	mov	r5, r0
 800677c:	4608      	mov	r0, r1
 800677e:	6023      	str	r3, [r4, #0]
 8006780:	f7fa fa5a 	bl	8000c38 <_sbrk>
 8006784:	1c43      	adds	r3, r0, #1
 8006786:	d102      	bne.n	800678e <_sbrk_r+0x1a>
 8006788:	6823      	ldr	r3, [r4, #0]
 800678a:	b103      	cbz	r3, 800678e <_sbrk_r+0x1a>
 800678c:	602b      	str	r3, [r5, #0]
 800678e:	bd38      	pop	{r3, r4, r5, pc}
 8006790:	200008f8 	.word	0x200008f8

08006794 <__malloc_lock>:
 8006794:	4770      	bx	lr

08006796 <__malloc_unlock>:
 8006796:	4770      	bx	lr

08006798 <_malloc_usable_size_r>:
 8006798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800679c:	1f18      	subs	r0, r3, #4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bfbc      	itt	lt
 80067a2:	580b      	ldrlt	r3, [r1, r0]
 80067a4:	18c0      	addlt	r0, r0, r3
 80067a6:	4770      	bx	lr

080067a8 <_init>:
 80067a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067aa:	bf00      	nop
 80067ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ae:	bc08      	pop	{r3}
 80067b0:	469e      	mov	lr, r3
 80067b2:	4770      	bx	lr

080067b4 <_fini>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	bf00      	nop
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr
