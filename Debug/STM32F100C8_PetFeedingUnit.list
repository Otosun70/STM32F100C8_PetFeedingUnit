
STM32F100C8_PetFeedingUnit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e0  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d90  080075b0  080075b0  000175b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009340  08009340  000201c0  2**0
                  CONTENTS
  4 .ARM          00000000  08009340  08009340  000201c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009340  08009340  000201c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009340  08009340  00019340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009344  08009344  00019344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c0  20000000  08009348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000898  200001c0  08009508  000201c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a58  08009508  00020a58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3e9  00000000  00000000  000201e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003968  00000000  00000000  0003c5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  0003ff40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  00041258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011ea1  00000000  00000000  000423b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013274  00000000  00000000  00054251  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000595c9  00000000  00000000  000674c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0a8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fa8  00000000  00000000  000c0b0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c0 	.word	0x200001c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007598 	.word	0x08007598

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c4 	.word	0x200001c4
 800020c:	08007598 	.word	0x08007598

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000216:	f000 fd16 	bl	8000c46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021a:	f000 f869 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021e:	f000 fa39 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 8000222:	f000 fa19 	bl	8000658 <MX_DMA_Init>
  MX_ADC1_Init();
 8000226:	f000 f8bd 	bl	80003a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 800022a:	f000 f92b 	bl	8000484 <MX_I2C1_Init>
  MX_RTC_Init();
 800022e:	f000 f957 	bl	80004e0 <MX_RTC_Init>
  MX_TIM15_Init();
 8000232:	f000 f971 	bl	8000518 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000236:	f004 fc7b 	bl	8004b30 <OLED_Init>
  InitTimer7();
 800023a:	f006 fd19 	bl	8006c70 <InitTimer7>
  Build_Menu();
 800023e:	f006 f8ed 	bl	800641c <Build_Menu>
  takvimGeriYukleme();
 8000242:	f005 fd57 	bl	8005cf4 <takvimGeriYukleme>
  alarmGeriYukleme();
 8000246:	f005 fd75 	bl	8005d34 <alarmGeriYukleme>
  displaySelectKey=GIRIS_EKRANI;
 800024a:	4b20      	ldr	r3, [pc, #128]	; (80002cc <main+0xbc>)
 800024c:	22a8      	movs	r2, #168	; 0xa8
 800024e:	701a      	strb	r2, [r3, #0]
  kayitOnayDurum=false;
 8000250:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <main+0xc0>)
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]

  HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1);
 8000256:	2100      	movs	r1, #0
 8000258:	481e      	ldr	r0, [pc, #120]	; (80002d4 <main+0xc4>)
 800025a:	f003 fe71 	bl	8003f40 <HAL_TIM_PWM_Start>

  char keyYer[8];
  sleepDurum=true;
 800025e:	4b1e      	ldr	r3, [pc, #120]	; (80002d8 <main+0xc8>)
 8000260:	2201      	movs	r2, #1
 8000262:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  displaySelect();
 8000264:	f005 fe26 	bl	8005eb4 <displaySelect>
	  pilGoster();
 8000268:	f004 fbf4 	bl	8004a54 <pilGoster>
	  OLED_SetCursor(0, 0);
 800026c:	2100      	movs	r1, #0
 800026e:	2000      	movs	r0, #0
 8000270:	f004 ff88 	bl	8005184 <OLED_SetCursor>
	  sprintf(keyYer, "%4d", deger[0]);
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <main+0xcc>)
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	463b      	mov	r3, r7
 800027c:	4918      	ldr	r1, [pc, #96]	; (80002e0 <main+0xd0>)
 800027e:	4618      	mov	r0, r3
 8000280:	f006 fd70 	bl	8006d64 <siprintf>
	  OLED_WriteString(keyYer, Font_7x10, White);
 8000284:	4a17      	ldr	r2, [pc, #92]	; (80002e4 <main+0xd4>)
 8000286:	4638      	mov	r0, r7
 8000288:	2301      	movs	r3, #1
 800028a:	ca06      	ldmia	r2, {r1, r2}
 800028c:	f004 ff54 	bl	8005138 <OLED_WriteString>
	  OLED_SetCursor(0, 10);
 8000290:	210a      	movs	r1, #10
 8000292:	2000      	movs	r0, #0
 8000294:	f004 ff76 	bl	8005184 <OLED_SetCursor>
	  sprintf(keyYer, "%3d", suSayaci);
 8000298:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <main+0xd8>)
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	461a      	mov	r2, r3
 800029e:	463b      	mov	r3, r7
 80002a0:	4912      	ldr	r1, [pc, #72]	; (80002ec <main+0xdc>)
 80002a2:	4618      	mov	r0, r3
 80002a4:	f006 fd5e 	bl	8006d64 <siprintf>
	  OLED_WriteString(keyYer, Font_7x10, White);
 80002a8:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <main+0xd4>)
 80002aa:	4638      	mov	r0, r7
 80002ac:	2301      	movs	r3, #1
 80002ae:	ca06      	ldmia	r2, {r1, r2}
 80002b0:	f004 ff42 	bl	8005138 <OLED_WriteString>
	  OLED_UpdateScreen();
 80002b4:	f004 fc02 	bl	8004abc <OLED_UpdateScreen>
	  ADC_DMA_degerOkuma();
 80002b8:	f004 fbb8 	bl	8004a2c <ADC_DMA_degerOkuma>
	  alarmDeneme(T1DEGER);
 80002bc:	20d8      	movs	r0, #216	; 0xd8
 80002be:	f005 fc37 	bl	8005b30 <alarmDeneme>
//	  giveFeed();
	  fault_Durum();
 80002c2:	f006 fc85 	bl	8006bd0 <fault_Durum>
	  sleepMode();
 80002c6:	f006 fca3 	bl	8006c10 <sleepMode>
  {
 80002ca:	e7cb      	b.n	8000264 <main+0x54>
 80002cc:	20000a22 	.word	0x20000a22
 80002d0:	20000a20 	.word	0x20000a20
 80002d4:	200006ec 	.word	0x200006ec
 80002d8:	200009c4 	.word	0x200009c4
 80002dc:	2000085c 	.word	0x2000085c
 80002e0:	080075b0 	.word	0x080075b0
 80002e4:	2000000c 	.word	0x2000000c
 80002e8:	20000612 	.word	0x20000612
 80002ec:	080075b4 	.word	0x080075b4

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b092      	sub	sp, #72	; 0x48
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0320 	add.w	r3, r7, #32
 80002fa:	2228      	movs	r2, #40	; 0x28
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f006 fd28 	bl	8006d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	2200      	movs	r2, #0
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	605a      	str	r2, [r3, #4]
 800030e:	609a      	str	r2, [r3, #8]
 8000310:	60da      	str	r2, [r3, #12]
 8000312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000314:	463b      	mov	r3, r7
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800031e:	2305      	movs	r3, #5
 8000320:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000326:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000328:	2300      	movs	r3, #0
 800032a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800032c:	2301      	movs	r3, #1
 800032e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000330:	2302      	movs	r3, #2
 8000332:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000338:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800033a:	2300      	movs	r3, #0
 800033c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	f107 0320 	add.w	r3, r7, #32
 8000342:	4618      	mov	r0, r3
 8000344:	f002 f9d6 	bl	80026f4 <HAL_RCC_OscConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800034e:	f000 fa3f 	bl	80007d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000352:	230f      	movs	r3, #15
 8000354:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000356:	2302      	movs	r3, #2
 8000358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000366:	f107 030c 	add.w	r3, r7, #12
 800036a:	2100      	movs	r1, #0
 800036c:	4618      	mov	r0, r3
 800036e:	f002 fc41 	bl	8002bf4 <HAL_RCC_ClockConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000378:	f000 fa2a 	bl	80007d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800037c:	2303      	movs	r3, #3
 800037e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000384:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000386:	2300      	movs	r3, #0
 8000388:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800038a:	463b      	mov	r3, r7
 800038c:	4618      	mov	r0, r3
 800038e:	f002 fd9d 	bl	8002ecc <HAL_RCCEx_PeriphCLKConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000398:	f000 fa1a 	bl	80007d0 <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3748      	adds	r7, #72	; 0x48
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80003b4:	4b31      	ldr	r3, [pc, #196]	; (800047c <MX_ADC1_Init+0xd8>)
 80003b6:	4a32      	ldr	r2, [pc, #200]	; (8000480 <MX_ADC1_Init+0xdc>)
 80003b8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003ba:	4b30      	ldr	r3, [pc, #192]	; (800047c <MX_ADC1_Init+0xd8>)
 80003bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003c2:	4b2e      	ldr	r3, [pc, #184]	; (800047c <MX_ADC1_Init+0xd8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003c8:	4b2c      	ldr	r3, [pc, #176]	; (800047c <MX_ADC1_Init+0xd8>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ce:	4b2b      	ldr	r3, [pc, #172]	; (800047c <MX_ADC1_Init+0xd8>)
 80003d0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d6:	4b29      	ldr	r3, [pc, #164]	; (800047c <MX_ADC1_Init+0xd8>)
 80003d8:	2200      	movs	r2, #0
 80003da:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 80003dc:	4b27      	ldr	r3, [pc, #156]	; (800047c <MX_ADC1_Init+0xd8>)
 80003de:	2205      	movs	r2, #5
 80003e0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003e2:	4826      	ldr	r0, [pc, #152]	; (800047c <MX_ADC1_Init+0xd8>)
 80003e4:	f000 fcaa 	bl	8000d3c <HAL_ADC_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80003ee:	f000 f9ef 	bl	80007d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f6:	2301      	movs	r3, #1
 80003f8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4619      	mov	r1, r3
 8000402:	481e      	ldr	r0, [pc, #120]	; (800047c <MX_ADC1_Init+0xd8>)
 8000404:	f000 fe6c 	bl	80010e0 <HAL_ADC_ConfigChannel>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800040e:	f000 f9df 	bl	80007d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000412:	2302      	movs	r3, #2
 8000414:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4619      	mov	r1, r3
 800041a:	4818      	ldr	r0, [pc, #96]	; (800047c <MX_ADC1_Init+0xd8>)
 800041c:	f000 fe60 	bl	80010e0 <HAL_ADC_ConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000426:	f000 f9d3 	bl	80007d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800042a:	2303      	movs	r3, #3
 800042c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	4619      	mov	r1, r3
 8000432:	4812      	ldr	r0, [pc, #72]	; (800047c <MX_ADC1_Init+0xd8>)
 8000434:	f000 fe54 	bl	80010e0 <HAL_ADC_ConfigChannel>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800043e:	f000 f9c7 	bl	80007d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000442:	2304      	movs	r3, #4
 8000444:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	4619      	mov	r1, r3
 800044a:	480c      	ldr	r0, [pc, #48]	; (800047c <MX_ADC1_Init+0xd8>)
 800044c:	f000 fe48 	bl	80010e0 <HAL_ADC_ConfigChannel>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000456:	f000 f9bb 	bl	80007d0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800045a:	2305      	movs	r3, #5
 800045c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	4619      	mov	r1, r3
 8000462:	4806      	ldr	r0, [pc, #24]	; (800047c <MX_ADC1_Init+0xd8>)
 8000464:	f000 fe3c 	bl	80010e0 <HAL_ADC_ConfigChannel>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800046e:	f000 f9af 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	2000082c 	.word	0x2000082c
 8000480:	40012400 	.word	0x40012400

08000484 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000488:	4b12      	ldr	r3, [pc, #72]	; (80004d4 <MX_I2C1_Init+0x50>)
 800048a:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <MX_I2C1_Init+0x54>)
 800048c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <MX_I2C1_Init+0x50>)
 8000490:	4a12      	ldr	r2, [pc, #72]	; (80004dc <MX_I2C1_Init+0x58>)
 8000492:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000494:	4b0f      	ldr	r3, [pc, #60]	; (80004d4 <MX_I2C1_Init+0x50>)
 8000496:	2200      	movs	r2, #0
 8000498:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800049a:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <MX_I2C1_Init+0x50>)
 800049c:	2200      	movs	r2, #0
 800049e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <MX_I2C1_Init+0x50>)
 80004a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004a8:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <MX_I2C1_Init+0x50>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004ae:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <MX_I2C1_Init+0x50>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004b4:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <MX_I2C1_Init+0x50>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <MX_I2C1_Init+0x50>)
 80004bc:	2200      	movs	r2, #0
 80004be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004c0:	4804      	ldr	r0, [pc, #16]	; (80004d4 <MX_I2C1_Init+0x50>)
 80004c2:	f001 fcd9 	bl	8001e78 <HAL_I2C_Init>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004cc:	f000 f980 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000698 	.word	0x20000698
 80004d8:	40005400 	.word	0x40005400
 80004dc:	000186a0 	.word	0x000186a0

080004e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <MX_RTC_Init+0x30>)
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <MX_RTC_Init+0x34>)
 80004e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <MX_RTC_Init+0x30>)
 80004ec:	f04f 32ff 	mov.w	r2, #4294967295
 80004f0:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <MX_RTC_Init+0x30>)
 80004f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004f8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <MX_RTC_Init+0x30>)
 80004fc:	f002 fde4 	bl	80030c8 <HAL_RTC_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000506:	f000 f963 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000924 	.word	0x20000924
 8000514:	40002800 	.word	0x40002800

08000518 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	; 0x58
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800051e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800052c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]
 8000546:	615a      	str	r2, [r3, #20]
 8000548:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2220      	movs	r2, #32
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f006 fbff 	bl	8006d54 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000556:	4b3e      	ldr	r3, [pc, #248]	; (8000650 <MX_TIM15_Init+0x138>)
 8000558:	4a3e      	ldr	r2, [pc, #248]	; (8000654 <MX_TIM15_Init+0x13c>)
 800055a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 85;
 800055c:	4b3c      	ldr	r3, [pc, #240]	; (8000650 <MX_TIM15_Init+0x138>)
 800055e:	2255      	movs	r2, #85	; 0x55
 8000560:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000562:	4b3b      	ldr	r3, [pc, #236]	; (8000650 <MX_TIM15_Init+0x138>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 935;
 8000568:	4b39      	ldr	r3, [pc, #228]	; (8000650 <MX_TIM15_Init+0x138>)
 800056a:	f240 32a7 	movw	r2, #935	; 0x3a7
 800056e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000570:	4b37      	ldr	r3, [pc, #220]	; (8000650 <MX_TIM15_Init+0x138>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000576:	4b36      	ldr	r3, [pc, #216]	; (8000650 <MX_TIM15_Init+0x138>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057c:	4b34      	ldr	r3, [pc, #208]	; (8000650 <MX_TIM15_Init+0x138>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000582:	4833      	ldr	r0, [pc, #204]	; (8000650 <MX_TIM15_Init+0x138>)
 8000584:	f003 fc7c 	bl	8003e80 <HAL_TIM_Base_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 800058e:	f000 f91f 	bl	80007d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000598:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800059c:	4619      	mov	r1, r3
 800059e:	482c      	ldr	r0, [pc, #176]	; (8000650 <MX_TIM15_Init+0x138>)
 80005a0:	f003 fde0 	bl	8004164 <HAL_TIM_ConfigClockSource>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 80005aa:	f000 f911 	bl	80007d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80005ae:	4828      	ldr	r0, [pc, #160]	; (8000650 <MX_TIM15_Init+0x138>)
 80005b0:	f003 fc91 	bl	8003ed6 <HAL_TIM_PWM_Init>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 80005ba:	f000 f909 	bl	80007d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005be:	2300      	movs	r3, #0
 80005c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80005c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005ca:	4619      	mov	r1, r3
 80005cc:	4820      	ldr	r0, [pc, #128]	; (8000650 <MX_TIM15_Init+0x138>)
 80005ce:	f004 f997 	bl	8004900 <HAL_TIMEx_MasterConfigSynchronization>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 80005d8:	f000 f8fa 	bl	80007d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005dc:	2360      	movs	r3, #96	; 0x60
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005e8:	2300      	movs	r3, #0
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005f4:	2300      	movs	r3, #0
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fc:	2200      	movs	r2, #0
 80005fe:	4619      	mov	r1, r3
 8000600:	4813      	ldr	r0, [pc, #76]	; (8000650 <MX_TIM15_Init+0x138>)
 8000602:	f003 fce9 	bl	8003fd8 <HAL_TIM_PWM_ConfigChannel>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 800060c:	f000 f8e0 	bl	80007d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000628:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4619      	mov	r1, r3
 8000632:	4807      	ldr	r0, [pc, #28]	; (8000650 <MX_TIM15_Init+0x138>)
 8000634:	f004 f9a8 	bl	8004988 <HAL_TIMEx_ConfigBreakDeadTime>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_TIM15_Init+0x12a>
  {
    Error_Handler();
 800063e:	f000 f8c7 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <MX_TIM15_Init+0x138>)
 8000644:	f000 f9f6 	bl	8000a34 <HAL_TIM_MspPostInit>

}
 8000648:	bf00      	nop
 800064a:	3758      	adds	r7, #88	; 0x58
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	200006ec 	.word	0x200006ec
 8000654:	40014000 	.word	0x40014000

08000658 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_DMA_Init+0x38>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <MX_DMA_Init+0x38>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_DMA_Init+0x38>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200b      	movs	r0, #11
 800067c:	f000 fff1 	bl	8001662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000680:	200b      	movs	r0, #11
 8000682:	f001 f80a 	bl	800169a <HAL_NVIC_EnableIRQ>

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a8:	4b45      	ldr	r3, [pc, #276]	; (80007c0 <MX_GPIO_Init+0x12c>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a44      	ldr	r2, [pc, #272]	; (80007c0 <MX_GPIO_Init+0x12c>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b42      	ldr	r3, [pc, #264]	; (80007c0 <MX_GPIO_Init+0x12c>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0310 	and.w	r3, r3, #16
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c0:	4b3f      	ldr	r3, [pc, #252]	; (80007c0 <MX_GPIO_Init+0x12c>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a3e      	ldr	r2, [pc, #248]	; (80007c0 <MX_GPIO_Init+0x12c>)
 80006c6:	f043 0320 	orr.w	r3, r3, #32
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b3c      	ldr	r3, [pc, #240]	; (80007c0 <MX_GPIO_Init+0x12c>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0320 	and.w	r3, r3, #32
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <MX_GPIO_Init+0x12c>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <MX_GPIO_Init+0x12c>)
 80006de:	f043 0304 	orr.w	r3, r3, #4
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <MX_GPIO_Init+0x12c>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0304 	and.w	r3, r3, #4
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <MX_GPIO_Init+0x12c>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a32      	ldr	r2, [pc, #200]	; (80007c0 <MX_GPIO_Init+0x12c>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <MX_GPIO_Init+0x12c>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSLEEP_Pin|MOTOR1_1_Pin|MOTOR1_2_Pin|SERVO_POWER_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f248 01e0 	movw	r1, #32992	; 0x80e0
 800070e:	482d      	ldr	r0, [pc, #180]	; (80007c4 <MX_GPIO_Init+0x130>)
 8000710:	f001 fb77 	bl	8001e02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR2_2_Pin|MOTOR2_1_Pin|LED_ALARM_Pin, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f240 4103 	movw	r1, #1027	; 0x403
 800071a:	482b      	ldr	r0, [pc, #172]	; (80007c8 <MX_GPIO_Init+0x134>)
 800071c:	f001 fb71 	bl	8001e02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NSLEEP_Pin MOTOR1_1_Pin MOTOR1_2_Pin SERVO_POWER_Pin */
  GPIO_InitStruct.Pin = NSLEEP_Pin|MOTOR1_1_Pin|MOTOR1_2_Pin|SERVO_POWER_Pin;
 8000720:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8000724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2302      	movs	r3, #2
 8000730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	4822      	ldr	r0, [pc, #136]	; (80007c4 <MX_GPIO_Init+0x130>)
 800073a:	f001 f9f1 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR2_2_Pin MOTOR2_1_Pin LED_ALARM_Pin */
  GPIO_InitStruct.Pin = MOTOR2_2_Pin|MOTOR2_1_Pin|LED_ALARM_Pin;
 800073e:	f240 4303 	movw	r3, #1027	; 0x403
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4619      	mov	r1, r3
 8000756:	481c      	ldr	r0, [pc, #112]	; (80007c8 <MX_GPIO_Init+0x134>)
 8000758:	f001 f9e2 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 800075c:	2304      	movs	r3, #4
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0310 	add.w	r3, r7, #16
 800076c:	4619      	mov	r1, r3
 800076e:	4816      	ldr	r0, [pc, #88]	; (80007c8 <MX_GPIO_Init+0x134>)
 8000770:	f001 f9d6 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : AKIS_SENS_Pin */
  GPIO_InitStruct.Pin = AKIS_SENS_Pin;
 8000774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_GPIO_Init+0x138>)
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800077e:	2302      	movs	r3, #2
 8000780:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AKIS_SENS_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0310 	add.w	r3, r7, #16
 8000786:	4619      	mov	r1, r3
 8000788:	480f      	ldr	r0, [pc, #60]	; (80007c8 <MX_GPIO_Init+0x134>)
 800078a:	f001 f9c9 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_1_Pin KEY_2_Pin KEY_3_Pin KEY_4_Pin 
                           KEY_5_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_2_Pin|KEY_3_Pin|KEY_4_Pin 
 800078e:	23f8      	movs	r3, #248	; 0xf8
 8000790:	613b      	str	r3, [r7, #16]
                          |KEY_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0310 	add.w	r3, r7, #16
 800079e:	4619      	mov	r1, r3
 80007a0:	4809      	ldr	r0, [pc, #36]	; (80007c8 <MX_GPIO_Init+0x134>)
 80007a2:	f001 f9bd 	bl	8001b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2100      	movs	r1, #0
 80007aa:	2028      	movs	r0, #40	; 0x28
 80007ac:	f000 ff59 	bl	8001662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b0:	2028      	movs	r0, #40	; 0x28
 80007b2:	f000 ff72 	bl	800169a <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3720      	adds	r7, #32
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010800 	.word	0x40010800
 80007c8:	40010c00 	.word	0x40010c00
 80007cc:	10110000 	.word	0x10110000

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <HAL_MspInit+0x5c>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <HAL_MspInit+0x5c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6193      	str	r3, [r2, #24]
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_MspInit+0x5c>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <HAL_MspInit+0x5c>)
 80007fc:	69db      	ldr	r3, [r3, #28]
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <HAL_MspInit+0x5c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	61d3      	str	r3, [r2, #28]
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <HAL_MspInit+0x5c>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <HAL_MspInit+0x60>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <HAL_MspInit+0x60>)
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	40021000 	.word	0x40021000
 800083c:	40010000 	.word	0x40010000

08000840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a28      	ldr	r2, [pc, #160]	; (80008fc <HAL_ADC_MspInit+0xbc>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d149      	bne.n	80008f4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000860:	4b27      	ldr	r3, [pc, #156]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a26      	ldr	r2, [pc, #152]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 8000866:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000878:	4b21      	ldr	r3, [pc, #132]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a20      	ldr	r2, [pc, #128]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <HAL_ADC_MspInit+0xc0>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0304 	and.w	r3, r3, #4
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000890:	231f      	movs	r3, #31
 8000892:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000894:	2303      	movs	r3, #3
 8000896:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	4819      	ldr	r0, [pc, #100]	; (8000904 <HAL_ADC_MspInit+0xc4>)
 80008a0:	f001 f93e 	bl	8001b20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_ADC_MspInit+0xc8>)
 80008a6:	4a19      	ldr	r2, [pc, #100]	; (800090c <HAL_ADC_MspInit+0xcc>)
 80008a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <HAL_ADC_MspInit+0xc8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_ADC_MspInit+0xc8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_ADC_MspInit+0xc8>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_ADC_MspInit+0xc8>)
 80008be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_ADC_MspInit+0xc8>)
 80008c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_ADC_MspInit+0xc8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_ADC_MspInit+0xc8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <HAL_ADC_MspInit+0xc8>)
 80008da:	f000 fef9 	bl	80016d0 <HAL_DMA_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80008e4:	f7ff ff74 	bl	80007d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a07      	ldr	r2, [pc, #28]	; (8000908 <HAL_ADC_MspInit+0xc8>)
 80008ec:	621a      	str	r2, [r3, #32]
 80008ee:	4a06      	ldr	r2, [pc, #24]	; (8000908 <HAL_ADC_MspInit+0xc8>)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40012400 	.word	0x40012400
 8000900:	40021000 	.word	0x40021000
 8000904:	40010800 	.word	0x40010800
 8000908:	200008d8 	.word	0x200008d8
 800090c:	40020008 	.word	0x40020008

08000910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <HAL_I2C_MspInit+0x90>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d132      	bne.n	8000996 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_I2C_MspInit+0x94>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <HAL_I2C_MspInit+0x94>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_I2C_MspInit+0x94>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0308 	and.w	r3, r3, #8
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000948:	f44f 7340 	mov.w	r3, #768	; 0x300
 800094c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094e:	2312      	movs	r3, #18
 8000950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4619      	mov	r1, r3
 800095c:	4812      	ldr	r0, [pc, #72]	; (80009a8 <HAL_I2C_MspInit+0x98>)
 800095e:	f001 f8df 	bl	8001b20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000962:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_I2C_MspInit+0x9c>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
 8000978:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <HAL_I2C_MspInit+0x9c>)
 800097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_I2C_MspInit+0x94>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_I2C_MspInit+0x94>)
 8000984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_I2C_MspInit+0x94>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40005400 	.word	0x40005400
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010c00 	.word	0x40010c00
 80009ac:	40010000 	.word	0x40010000

080009b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <HAL_RTC_MspInit+0x3c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d110      	bne.n	80009e4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80009c2:	f001 fe8b 	bl	80026dc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_RTC_MspInit+0x40>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <HAL_RTC_MspInit+0x40>)
 80009cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <HAL_RTC_MspInit+0x40>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_RTC_MspInit+0x44>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40002800 	.word	0x40002800
 80009f0:	40021000 	.word	0x40021000
 80009f4:	4242043c 	.word	0x4242043c

080009f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <HAL_TIM_Base_MspInit+0x34>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d10b      	bne.n	8000a22 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_TIM_Base_MspInit+0x38>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	4a08      	ldr	r2, [pc, #32]	; (8000a30 <HAL_TIM_Base_MspInit+0x38>)
 8000a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a14:	6193      	str	r3, [r2, #24]
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_TIM_Base_MspInit+0x38>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	40014000 	.word	0x40014000
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM15)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <HAL_TIM_MspPostInit+0x68>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d11e      	bne.n	8000a92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_TIM_MspPostInit+0x6c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <HAL_TIM_MspPostInit+0x6c>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_TIM_MspPostInit+0x6c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0308 	and.w	r3, r3, #8
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    /**TIM15 GPIO Configuration    
    PB14     ------> TIM15_CH1 
    */
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8000a6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <HAL_TIM_MspPostInit+0x70>)
 8000a82:	f001 f84d 	bl	8001b20 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM15_ENABLE();
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <HAL_TIM_MspPostInit+0x74>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4a07      	ldr	r2, [pc, #28]	; (8000aa8 <HAL_TIM_MspPostInit+0x74>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	61d3      	str	r3, [r2, #28]
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3720      	adds	r7, #32
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40014000 	.word	0x40014000
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010c00 	.word	0x40010c00
 8000aa8:	40010000 	.word	0x40010000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <HardFault_Handler+0x4>

08000abe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <MemManage_Handler+0x4>

08000ac4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <BusFault_Handler+0x4>

08000aca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <UsageFault_Handler+0x4>

08000ad0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f8e2 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <DMA1_Channel1_IRQHandler+0x10>)
 8000b06:	f000 fed7 	bl	80018b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200008d8 	.word	0x200008d8

08000b14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000b18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b1c:	f001 f98a 	bl	8001e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
suSayaci++;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <EXTI15_10_IRQHandler+0x1c>)
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	3301      	adds	r3, #1
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	4b01      	ldr	r3, [pc, #4]	; (8000b30 <EXTI15_10_IRQHandler+0x1c>)
 8000b2a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000612 	.word	0x20000612

08000b34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <_sbrk+0x50>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d102      	bne.n	8000b4a <_sbrk+0x16>
		heap_end = &end;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <_sbrk+0x50>)
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <_sbrk+0x54>)
 8000b48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <_sbrk+0x50>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <_sbrk+0x50>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4413      	add	r3, r2
 8000b58:	466a      	mov	r2, sp
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d907      	bls.n	8000b6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b5e:	f006 f8cf 	bl	8006d00 <__errno>
 8000b62:	4602      	mov	r2, r0
 8000b64:	230c      	movs	r3, #12
 8000b66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6c:	e006      	b.n	8000b7c <_sbrk+0x48>
	}

	heap_end += incr;
 8000b6e:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <_sbrk+0x50>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <_sbrk+0x50>)
 8000b78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200001dc 	.word	0x200001dc
 8000b88:	20000a58 	.word	0x20000a58

08000b8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <SystemInit+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <SystemInit+0x64>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <SystemInit+0x64>)
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	4913      	ldr	r1, [pc, #76]	; (8000bf0 <SystemInit+0x64>)
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <SystemInit+0x68>)
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <SystemInit+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <SystemInit+0x64>)
 8000bae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <SystemInit+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0c      	ldr	r2, [pc, #48]	; (8000bf0 <SystemInit+0x64>)
 8000bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <SystemInit+0x64>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <SystemInit+0x64>)
 8000bca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000bce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
#elif defined(STM32F100xB) || defined(STM32F100xE)
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <SystemInit+0x64>)
 8000bd2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000bd6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <SystemInit+0x64>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <SystemInit+0x6c>)
 8000be0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000be4:	609a      	str	r2, [r3, #8]
#endif 
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	f8ff0000 	.word	0xf8ff0000
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bfc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bfe:	e003      	b.n	8000c08 <LoopCopyDataInit>

08000c00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c06:	3104      	adds	r1, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c08:	480a      	ldr	r0, [pc, #40]	; (8000c34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c10:	d3f6      	bcc.n	8000c00 <CopyDataInit>
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c14:	e002      	b.n	8000c1c <LoopFillZerobss>

08000c16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c18:	f842 3b04 	str.w	r3, [r2], #4

08000c1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c20:	d3f9      	bcc.n	8000c16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c22:	f7ff ffb3 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c26:	f006 f871 	bl	8006d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2a:	f7ff faf1 	bl	8000210 <main>
  bx lr
 8000c2e:	4770      	bx	lr
  ldr r3, =_sidata
 8000c30:	08009348 	.word	0x08009348
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c38:	200001c0 	.word	0x200001c0
  ldr r2, =_sbss
 8000c3c:	200001c0 	.word	0x200001c0
  ldr r3, = _ebss
 8000c40:	20000a58 	.word	0x20000a58

08000c44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_IRQHandler>

08000c46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4a:	2003      	movs	r0, #3
 8000c4c:	f000 fcfe 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c50:	2000      	movs	r0, #0
 8000c52:	f000 f805 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c56:	f7ff fdc1 	bl	80007dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5a:	2300      	movs	r3, #0
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_InitTick+0x54>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x58>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 fd19 	bl	80016b6 <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00e      	b.n	8000cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d80a      	bhi.n	8000caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 fce1 	bl	8001662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <HAL_InitTick+0x5c>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <HAL_IncTick+0x1c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_IncTick+0x20>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a03      	ldr	r2, [pc, #12]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000a50 	.word	0x20000a50

08000ce4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b02      	ldr	r3, [pc, #8]	; (8000cf4 <HAL_GetTick+0x10>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	20000a50 	.word	0x20000a50

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff fff0 	bl	8000ce4 <HAL_GetTick>
 8000d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_Delay+0x40>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1e:	bf00      	nop
 8000d20:	f7ff ffe0 	bl	8000ce4 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000008 	.word	0x20000008

08000d3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d101      	bne.n	8000d5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e0be      	b.n	8000edc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff fd60 	bl	8000840 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 faf7 	bl	8001374 <ADC_ConversionStop_Disable>
 8000d86:	4603      	mov	r3, r0
 8000d88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8099 	bne.w	8000eca <HAL_ADC_Init+0x18e>
 8000d98:	7dfb      	ldrb	r3, [r7, #23]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f040 8095 	bne.w	8000eca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000da8:	f023 0302 	bic.w	r3, r3, #2
 8000dac:	f043 0202 	orr.w	r2, r3, #2
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dbc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7b1b      	ldrb	r3, [r3, #12]
 8000dc2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000dc4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000dd4:	d003      	beq.n	8000dde <HAL_ADC_Init+0xa2>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d102      	bne.n	8000de4 <HAL_ADC_Init+0xa8>
 8000dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de2:	e000      	b.n	8000de6 <HAL_ADC_Init+0xaa>
 8000de4:	2300      	movs	r3, #0
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7d1b      	ldrb	r3, [r3, #20]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d119      	bne.n	8000e28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7b1b      	ldrb	r3, [r3, #12]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d109      	bne.n	8000e10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	035a      	lsls	r2, r3, #13
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	e00b      	b.n	8000e28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e14:	f043 0220 	orr.w	r2, r3, #32
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	f043 0201 	orr.w	r2, r3, #1
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_ADC_Init+0x1a8>)
 8000e44:	4013      	ands	r3, r2
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e58:	d003      	beq.n	8000e62 <HAL_ADC_Init+0x126>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d104      	bne.n	8000e6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	051b      	lsls	r3, r3, #20
 8000e6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_ADC_Init+0x1ac>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d10b      	bne.n	8000ea8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	f023 0303 	bic.w	r3, r3, #3
 8000e9e:	f043 0201 	orr.w	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ea6:	e018      	b.n	8000eda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	f023 0312 	bic.w	r3, r3, #18
 8000eb0:	f043 0210 	orr.w	r2, r3, #16
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	f043 0201 	orr.w	r2, r3, #1
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ec8:	e007      	b.n	8000eda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ece:	f043 0210 	orr.w	r2, r3, #16
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	ffe1f7fd 	.word	0xffe1f7fd
 8000ee8:	ff1f0efe 	.word	0xff1f0efe

08000eec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	75fb      	strb	r3, [r7, #23]
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <HAL_ADC_Start_DMA+0x1e>
 8000f06:	2302      	movs	r3, #2
 8000f08:	e080      	b.n	800100c <HAL_ADC_Start_DMA+0x120>
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f000 f9dc 	bl	80012d0 <ADC_Enable>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d16f      	bne.n	8001002 <HAL_ADC_Start_DMA+0x116>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d007      	beq.n	8000f60 <HAL_ADC_Start_DMA+0x74>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	629a      	str	r2, [r3, #40]	; 0x28
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <HAL_ADC_Start_DMA+0x8e>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	f023 0206 	bic.w	r2, r3, #6
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f78:	e002      	b.n	8000f80 <HAL_ADC_Start_DMA+0x94>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2200      	movs	r2, #0
 8000f84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	4a21      	ldr	r2, [pc, #132]	; (8001014 <HAL_ADC_Start_DMA+0x128>)
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6a1b      	ldr	r3, [r3, #32]
 8000f94:	4a20      	ldr	r2, [pc, #128]	; (8001018 <HAL_ADC_Start_DMA+0x12c>)
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	4a1f      	ldr	r2, [pc, #124]	; (800101c <HAL_ADC_Start_DMA+0x130>)
 8000f9e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f06f 0202 	mvn.w	r2, #2
 8000fa8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fb8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6a18      	ldr	r0, [r3, #32]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	334c      	adds	r3, #76	; 0x4c
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	68ba      	ldr	r2, [r7, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f000 fbdb 	bl	8001784 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fd8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fdc:	d108      	bne.n	8000ff0 <HAL_ADC_Start_DMA+0x104>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	e00c      	b.n	800100a <HAL_ADC_Start_DMA+0x11e>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	e003      	b.n	800100a <HAL_ADC_Start_DMA+0x11e>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
 800100a:	7dfb      	ldrb	r3, [r7, #23]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	080013e9 	.word	0x080013e9
 8001018:	08001465 	.word	0x08001465
 800101c:	08001481 	.word	0x08001481

08001020 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001032:	2b01      	cmp	r3, #1
 8001034:	d101      	bne.n	800103a <HAL_ADC_Stop_DMA+0x1a>
 8001036:	2302      	movs	r3, #2
 8001038:	e033      	b.n	80010a2 <HAL_ADC_Stop_DMA+0x82>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f996 	bl	8001374 <ADC_ConversionStop_Disable>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d122      	bne.n	8001098 <HAL_ADC_Stop_DMA+0x78>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001060:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a1b      	ldr	r3, [r3, #32]
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fbeb 	bl	8001842 <HAL_DMA_Abort>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10a      	bne.n	800108c <HAL_ADC_Stop_DMA+0x6c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800107a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800107e:	f023 0301 	bic.w	r3, r3, #1
 8001082:	f043 0201 	orr.w	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
 800108a:	e005      	b.n	8001098 <HAL_ADC_Stop_DMA+0x78>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr

080010ce <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr

080010e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <HAL_ADC_ConfigChannel+0x20>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e0dc      	b.n	80012ba <HAL_ADC_ConfigChannel+0x1da>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b06      	cmp	r3, #6
 800110e:	d81c      	bhi.n	800114a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	3b05      	subs	r3, #5
 8001122:	221f      	movs	r2, #31
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	4019      	ands	r1, r3
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	3b05      	subs	r3, #5
 800113c:	fa00 f203 	lsl.w	r2, r0, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	635a      	str	r2, [r3, #52]	; 0x34
 8001148:	e03c      	b.n	80011c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b0c      	cmp	r3, #12
 8001150:	d81c      	bhi.n	800118c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	3b23      	subs	r3, #35	; 0x23
 8001164:	221f      	movs	r2, #31
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	4019      	ands	r1, r3
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	3b23      	subs	r3, #35	; 0x23
 800117e:	fa00 f203 	lsl.w	r2, r0, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
 800118a:	e01b      	b.n	80011c4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	3b41      	subs	r3, #65	; 0x41
 800119e:	221f      	movs	r2, #31
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4019      	ands	r1, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	3b41      	subs	r3, #65	; 0x41
 80011b8:	fa00 f203 	lsl.w	r2, r0, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b09      	cmp	r3, #9
 80011ca:	d91c      	bls.n	8001206 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68d9      	ldr	r1, [r3, #12]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	3b1e      	subs	r3, #30
 80011de:	2207      	movs	r2, #7
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4019      	ands	r1, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6898      	ldr	r0, [r3, #8]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	3b1e      	subs	r3, #30
 80011f8:	fa00 f203 	lsl.w	r2, r0, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	e019      	b.n	800123a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6919      	ldr	r1, [r3, #16]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4613      	mov	r3, r2
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	2207      	movs	r2, #7
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	4019      	ands	r1, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	6898      	ldr	r0, [r3, #8]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	fa00 f203 	lsl.w	r2, r0, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b10      	cmp	r3, #16
 8001240:	d003      	beq.n	800124a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001246:	2b11      	cmp	r3, #17
 8001248:	d132      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d125      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d126      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001270:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b10      	cmp	r3, #16
 8001278:	d11a      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <HAL_ADC_ConfigChannel+0x1ec>)
 8001280:	fba2 2303 	umull	r2, r3, r2, r3
 8001284:	0c9a      	lsrs	r2, r3, #18
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001290:	e002      	b.n	8001298 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	3b01      	subs	r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f9      	bne.n	8001292 <HAL_ADC_ConfigChannel+0x1b2>
 800129e:	e007      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f043 0220 	orr.w	r2, r3, #32
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	40012400 	.word	0x40012400
 80012c8:	20000000 	.word	0x20000000
 80012cc:	431bde83 	.word	0x431bde83

080012d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d039      	beq.n	8001362 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0201 	orr.w	r2, r2, #1
 80012fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <ADC_Enable+0x9c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <ADC_Enable+0xa0>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	0c9b      	lsrs	r3, r3, #18
 800130a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800130c:	e002      	b.n	8001314 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3b01      	subs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800131a:	f7ff fce3 	bl	8000ce4 <HAL_GetTick>
 800131e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001320:	e018      	b.n	8001354 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001322:	f7ff fcdf 	bl	8000ce4 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d911      	bls.n	8001354 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	f043 0210 	orr.w	r2, r3, #16
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	f043 0201 	orr.w	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e007      	b.n	8001364 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b01      	cmp	r3, #1
 8001360:	d1df      	bne.n	8001322 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	431bde83 	.word	0x431bde83

08001374 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b01      	cmp	r3, #1
 800138c:	d127      	bne.n	80013de <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0201 	bic.w	r2, r2, #1
 800139c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800139e:	f7ff fca1 	bl	8000ce4 <HAL_GetTick>
 80013a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013a4:	e014      	b.n	80013d0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013a6:	f7ff fc9d 	bl	8000ce4 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d90d      	bls.n	80013d0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	f043 0210 	orr.w	r2, r3, #16
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e007      	b.n	80013e0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d0e3      	beq.n	80013a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d127      	bne.n	8001452 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001418:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800141c:	d115      	bne.n	800144a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001422:	2b00      	cmp	r3, #0
 8001424:	d111      	bne.n	800144a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d105      	bne.n	800144a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001442:	f043 0201 	orr.w	r2, r3, #1
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7ff fe2d 	bl	80010aa <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001450:	e004      	b.n	800145c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	4798      	blx	r3
}
 800145c:	bf00      	nop
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff fe22 	bl	80010bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	f043 0204 	orr.w	r2, r3, #4
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f7ff fe11 	bl	80010ce <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4906      	ldr	r1, [pc, #24]	; (800154c <__NVIC_EnableIRQ+0x34>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f7ff ff90 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff2d 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001674:	f7ff ff42 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68b9      	ldr	r1, [r7, #8]
 800167e:	6978      	ldr	r0, [r7, #20]
 8001680:	f7ff ff90 	bl	80015a4 <NVIC_EncodePriority>
 8001684:	4602      	mov	r2, r0
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	4611      	mov	r1, r2
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff5f 	bl	8001550 <__NVIC_SetPriority>
}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff35 	bl	8001518 <__NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffa2 	bl	8001608 <SysTick_Config>
 80016c4:	4603      	mov	r3, r0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e043      	b.n	800176e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_DMA_Init+0xa8>)
 80016ee:	4413      	add	r3, r2
 80016f0:	4a22      	ldr	r2, [pc, #136]	; (800177c <HAL_DMA_Init+0xac>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	009a      	lsls	r2, r3, #2
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a1f      	ldr	r2, [pc, #124]	; (8001780 <HAL_DMA_Init+0xb0>)
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2202      	movs	r2, #2
 8001708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800171a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800171e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001728:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001734:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001740:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	bffdfff8 	.word	0xbffdfff8
 800177c:	cccccccd 	.word	0xcccccccd
 8001780:	40020000 	.word	0x40020000

08001784 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_DMA_Start_IT+0x20>
 80017a0:	2302      	movs	r3, #2
 80017a2:	e04a      	b.n	800183a <HAL_DMA_Start_IT+0xb6>
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d13a      	bne.n	800182c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2202      	movs	r2, #2
 80017ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	68b9      	ldr	r1, [r7, #8]
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f972 	bl	8001ac4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 020e 	orr.w	r2, r2, #14
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e00f      	b.n	800181a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0204 	bic.w	r2, r2, #4
 8001808:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 020a 	orr.w	r2, r2, #10
 8001818:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0201 	orr.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e005      	b.n	8001838 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001834:	2302      	movs	r3, #2
 8001836:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001838:	7dfb      	ldrb	r3, [r7, #23]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800184a:	2300      	movs	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001854:	2b02      	cmp	r3, #2
 8001856:	d008      	beq.n	800186a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2204      	movs	r2, #4
 800185c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e020      	b.n	80018ac <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 020e 	bic.w	r2, r2, #14
 8001878:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 0201 	bic.w	r2, r2, #1
 8001888:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001892:	2101      	movs	r1, #1
 8001894:	fa01 f202 	lsl.w	r2, r1, r2
 8001898:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2204      	movs	r2, #4
 80018d6:	409a      	lsls	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d04f      	beq.n	8001980 <HAL_DMA_IRQHandler+0xc8>
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d04a      	beq.n	8001980 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d107      	bne.n	8001908 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0204 	bic.w	r2, r2, #4
 8001906:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a66      	ldr	r2, [pc, #408]	; (8001aa8 <HAL_DMA_IRQHandler+0x1f0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d029      	beq.n	8001966 <HAL_DMA_IRQHandler+0xae>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a65      	ldr	r2, [pc, #404]	; (8001aac <HAL_DMA_IRQHandler+0x1f4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d022      	beq.n	8001962 <HAL_DMA_IRQHandler+0xaa>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a63      	ldr	r2, [pc, #396]	; (8001ab0 <HAL_DMA_IRQHandler+0x1f8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d01a      	beq.n	800195c <HAL_DMA_IRQHandler+0xa4>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a62      	ldr	r2, [pc, #392]	; (8001ab4 <HAL_DMA_IRQHandler+0x1fc>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d012      	beq.n	8001956 <HAL_DMA_IRQHandler+0x9e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a60      	ldr	r2, [pc, #384]	; (8001ab8 <HAL_DMA_IRQHandler+0x200>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d00a      	beq.n	8001950 <HAL_DMA_IRQHandler+0x98>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a5f      	ldr	r2, [pc, #380]	; (8001abc <HAL_DMA_IRQHandler+0x204>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d102      	bne.n	800194a <HAL_DMA_IRQHandler+0x92>
 8001944:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001948:	e00e      	b.n	8001968 <HAL_DMA_IRQHandler+0xb0>
 800194a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800194e:	e00b      	b.n	8001968 <HAL_DMA_IRQHandler+0xb0>
 8001950:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001954:	e008      	b.n	8001968 <HAL_DMA_IRQHandler+0xb0>
 8001956:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800195a:	e005      	b.n	8001968 <HAL_DMA_IRQHandler+0xb0>
 800195c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001960:	e002      	b.n	8001968 <HAL_DMA_IRQHandler+0xb0>
 8001962:	2340      	movs	r3, #64	; 0x40
 8001964:	e000      	b.n	8001968 <HAL_DMA_IRQHandler+0xb0>
 8001966:	2304      	movs	r3, #4
 8001968:	4a55      	ldr	r2, [pc, #340]	; (8001ac0 <HAL_DMA_IRQHandler+0x208>)
 800196a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 8094 	beq.w	8001a9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800197e:	e08e      	b.n	8001a9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	2202      	movs	r2, #2
 8001986:	409a      	lsls	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4013      	ands	r3, r2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d056      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x186>
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d051      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0320 	and.w	r3, r3, #32
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10b      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 020a 	bic.w	r2, r2, #10
 80019b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a38      	ldr	r2, [pc, #224]	; (8001aa8 <HAL_DMA_IRQHandler+0x1f0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d029      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x166>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a37      	ldr	r2, [pc, #220]	; (8001aac <HAL_DMA_IRQHandler+0x1f4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d022      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x162>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a35      	ldr	r2, [pc, #212]	; (8001ab0 <HAL_DMA_IRQHandler+0x1f8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d01a      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x15c>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a34      	ldr	r2, [pc, #208]	; (8001ab4 <HAL_DMA_IRQHandler+0x1fc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d012      	beq.n	8001a0e <HAL_DMA_IRQHandler+0x156>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a32      	ldr	r2, [pc, #200]	; (8001ab8 <HAL_DMA_IRQHandler+0x200>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00a      	beq.n	8001a08 <HAL_DMA_IRQHandler+0x150>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a31      	ldr	r2, [pc, #196]	; (8001abc <HAL_DMA_IRQHandler+0x204>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d102      	bne.n	8001a02 <HAL_DMA_IRQHandler+0x14a>
 80019fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a00:	e00e      	b.n	8001a20 <HAL_DMA_IRQHandler+0x168>
 8001a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a06:	e00b      	b.n	8001a20 <HAL_DMA_IRQHandler+0x168>
 8001a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0c:	e008      	b.n	8001a20 <HAL_DMA_IRQHandler+0x168>
 8001a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a12:	e005      	b.n	8001a20 <HAL_DMA_IRQHandler+0x168>
 8001a14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a18:	e002      	b.n	8001a20 <HAL_DMA_IRQHandler+0x168>
 8001a1a:	2320      	movs	r3, #32
 8001a1c:	e000      	b.n	8001a20 <HAL_DMA_IRQHandler+0x168>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <HAL_DMA_IRQHandler+0x208>)
 8001a22:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d034      	beq.n	8001a9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a3c:	e02f      	b.n	8001a9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	2208      	movs	r2, #8
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d028      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x1e8>
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d023      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 020e 	bic.w	r2, r2, #14
 8001a66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	4798      	blx	r3
    }
  }
  return;
 8001a9e:	bf00      	nop
 8001aa0:	bf00      	nop
}
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40020008 	.word	0x40020008
 8001aac:	4002001c 	.word	0x4002001c
 8001ab0:	40020030 	.word	0x40020030
 8001ab4:	40020044 	.word	0x40020044
 8001ab8:	40020058 	.word	0x40020058
 8001abc:	4002006c 	.word	0x4002006c
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d108      	bne.n	8001b04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b02:	e007      	b.n	8001b14 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	60da      	str	r2, [r3, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b08b      	sub	sp, #44	; 0x2c
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	e127      	b.n	8001d84 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b34:	2201      	movs	r2, #1
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f040 8116 	bne.w	8001d7e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b12      	cmp	r3, #18
 8001b58:	d034      	beq.n	8001bc4 <HAL_GPIO_Init+0xa4>
 8001b5a:	2b12      	cmp	r3, #18
 8001b5c:	d80d      	bhi.n	8001b7a <HAL_GPIO_Init+0x5a>
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d02b      	beq.n	8001bba <HAL_GPIO_Init+0x9a>
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d804      	bhi.n	8001b70 <HAL_GPIO_Init+0x50>
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d031      	beq.n	8001bce <HAL_GPIO_Init+0xae>
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d01c      	beq.n	8001ba8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b6e:	e048      	b.n	8001c02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d043      	beq.n	8001bfc <HAL_GPIO_Init+0xdc>
 8001b74:	2b11      	cmp	r3, #17
 8001b76:	d01b      	beq.n	8001bb0 <HAL_GPIO_Init+0x90>
          break;
 8001b78:	e043      	b.n	8001c02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b7a:	4a89      	ldr	r2, [pc, #548]	; (8001da0 <HAL_GPIO_Init+0x280>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d026      	beq.n	8001bce <HAL_GPIO_Init+0xae>
 8001b80:	4a87      	ldr	r2, [pc, #540]	; (8001da0 <HAL_GPIO_Init+0x280>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d806      	bhi.n	8001b94 <HAL_GPIO_Init+0x74>
 8001b86:	4a87      	ldr	r2, [pc, #540]	; (8001da4 <HAL_GPIO_Init+0x284>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d020      	beq.n	8001bce <HAL_GPIO_Init+0xae>
 8001b8c:	4a86      	ldr	r2, [pc, #536]	; (8001da8 <HAL_GPIO_Init+0x288>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01d      	beq.n	8001bce <HAL_GPIO_Init+0xae>
          break;
 8001b92:	e036      	b.n	8001c02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b94:	4a85      	ldr	r2, [pc, #532]	; (8001dac <HAL_GPIO_Init+0x28c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d019      	beq.n	8001bce <HAL_GPIO_Init+0xae>
 8001b9a:	4a85      	ldr	r2, [pc, #532]	; (8001db0 <HAL_GPIO_Init+0x290>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d016      	beq.n	8001bce <HAL_GPIO_Init+0xae>
 8001ba0:	4a84      	ldr	r2, [pc, #528]	; (8001db4 <HAL_GPIO_Init+0x294>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_GPIO_Init+0xae>
          break;
 8001ba6:	e02c      	b.n	8001c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	623b      	str	r3, [r7, #32]
          break;
 8001bae:	e028      	b.n	8001c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e023      	b.n	8001c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	3308      	adds	r3, #8
 8001bc0:	623b      	str	r3, [r7, #32]
          break;
 8001bc2:	e01e      	b.n	8001c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	623b      	str	r3, [r7, #32]
          break;
 8001bcc:	e019      	b.n	8001c02 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e012      	b.n	8001c02 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d105      	bne.n	8001bf0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be4:	2308      	movs	r3, #8
 8001be6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	611a      	str	r2, [r3, #16]
          break;
 8001bee:	e008      	b.n	8001c02 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	615a      	str	r2, [r3, #20]
          break;
 8001bfa:	e002      	b.n	8001c02 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
          break;
 8001c00:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2bff      	cmp	r3, #255	; 0xff
 8001c06:	d801      	bhi.n	8001c0c <HAL_GPIO_Init+0xec>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	e001      	b.n	8001c10 <HAL_GPIO_Init+0xf0>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2bff      	cmp	r3, #255	; 0xff
 8001c16:	d802      	bhi.n	8001c1e <HAL_GPIO_Init+0xfe>
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	e002      	b.n	8001c24 <HAL_GPIO_Init+0x104>
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	3b08      	subs	r3, #8
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	210f      	movs	r1, #15
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	401a      	ands	r2, r3
 8001c36:	6a39      	ldr	r1, [r7, #32]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 8096 	beq.w	8001d7e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c52:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <HAL_GPIO_Init+0x298>)
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	4a58      	ldr	r2, [pc, #352]	; (8001db8 <HAL_GPIO_Init+0x298>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6193      	str	r3, [r2, #24]
 8001c5e:	4b56      	ldr	r3, [pc, #344]	; (8001db8 <HAL_GPIO_Init+0x298>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c6a:	4a54      	ldr	r2, [pc, #336]	; (8001dbc <HAL_GPIO_Init+0x29c>)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4b      	ldr	r2, [pc, #300]	; (8001dc0 <HAL_GPIO_Init+0x2a0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d013      	beq.n	8001cbe <HAL_GPIO_Init+0x19e>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4a      	ldr	r2, [pc, #296]	; (8001dc4 <HAL_GPIO_Init+0x2a4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00d      	beq.n	8001cba <HAL_GPIO_Init+0x19a>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a49      	ldr	r2, [pc, #292]	; (8001dc8 <HAL_GPIO_Init+0x2a8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d007      	beq.n	8001cb6 <HAL_GPIO_Init+0x196>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a48      	ldr	r2, [pc, #288]	; (8001dcc <HAL_GPIO_Init+0x2ac>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d101      	bne.n	8001cb2 <HAL_GPIO_Init+0x192>
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e006      	b.n	8001cc0 <HAL_GPIO_Init+0x1a0>
 8001cb2:	2304      	movs	r3, #4
 8001cb4:	e004      	b.n	8001cc0 <HAL_GPIO_Init+0x1a0>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e002      	b.n	8001cc0 <HAL_GPIO_Init+0x1a0>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e000      	b.n	8001cc0 <HAL_GPIO_Init+0x1a0>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc2:	f002 0203 	and.w	r2, r2, #3
 8001cc6:	0092      	lsls	r2, r2, #2
 8001cc8:	4093      	lsls	r3, r2
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cd0:	493a      	ldr	r1, [pc, #232]	; (8001dbc <HAL_GPIO_Init+0x29c>)
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cea:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	4938      	ldr	r1, [pc, #224]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
 8001cf6:	e006      	b.n	8001d06 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	4933      	ldr	r1, [pc, #204]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	492e      	ldr	r1, [pc, #184]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
 8001d1e:	e006      	b.n	8001d2e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	43db      	mvns	r3, r3
 8001d28:	4929      	ldr	r1, [pc, #164]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	4924      	ldr	r1, [pc, #144]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
 8001d46:	e006      	b.n	8001d56 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	491f      	ldr	r1, [pc, #124]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	491a      	ldr	r1, [pc, #104]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60cb      	str	r3, [r1, #12]
 8001d6e:	e006      	b.n	8001d7e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	4915      	ldr	r1, [pc, #84]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	3301      	adds	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f47f aed0 	bne.w	8001b34 <HAL_GPIO_Init+0x14>
  }
}
 8001d94:	bf00      	nop
 8001d96:	372c      	adds	r7, #44	; 0x2c
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	10210000 	.word	0x10210000
 8001da4:	10110000 	.word	0x10110000
 8001da8:	10120000 	.word	0x10120000
 8001dac:	10310000 	.word	0x10310000
 8001db0:	10320000 	.word	0x10320000
 8001db4:	10220000 	.word	0x10220000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	40010400 	.word	0x40010400

08001dd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dec:	2301      	movs	r3, #1
 8001dee:	73fb      	strb	r3, [r7, #15]
 8001df0:	e001      	b.n	8001df6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3714      	adds	r7, #20
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	807b      	strh	r3, [r7, #2]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e12:	787b      	ldrb	r3, [r7, #1]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e18:	887a      	ldrh	r2, [r7, #2]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e1e:	e003      	b.n	8001e28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e20:	887b      	ldrh	r3, [r7, #2]
 8001e22:	041a      	lsls	r2, r3, #16
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	611a      	str	r2, [r3, #16]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
	...

08001e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e40:	695a      	ldr	r2, [r3, #20]
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d006      	beq.n	8001e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e50:	88fb      	ldrh	r3, [r7, #6]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 f806 	bl	8001e64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e58:	bf00      	nop
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e10f      	b.n	80020aa <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fd36 	bl	8000910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2224      	movs	r2, #36	; 0x24
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ebc:	f000 ffc0 	bl	8002e40 <HAL_RCC_GetPCLK1Freq>
 8001ec0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	4a7b      	ldr	r2, [pc, #492]	; (80020b4 <HAL_I2C_Init+0x23c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d807      	bhi.n	8001edc <HAL_I2C_Init+0x64>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4a7a      	ldr	r2, [pc, #488]	; (80020b8 <HAL_I2C_Init+0x240>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	bf94      	ite	ls
 8001ed4:	2301      	movls	r3, #1
 8001ed6:	2300      	movhi	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e006      	b.n	8001eea <HAL_I2C_Init+0x72>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a77      	ldr	r2, [pc, #476]	; (80020bc <HAL_I2C_Init+0x244>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	bf94      	ite	ls
 8001ee4:	2301      	movls	r3, #1
 8001ee6:	2300      	movhi	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e0db      	b.n	80020aa <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4a72      	ldr	r2, [pc, #456]	; (80020c0 <HAL_I2C_Init+0x248>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0c9b      	lsrs	r3, r3, #18
 8001efc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	4a64      	ldr	r2, [pc, #400]	; (80020b4 <HAL_I2C_Init+0x23c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d802      	bhi.n	8001f2c <HAL_I2C_Init+0xb4>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	e009      	b.n	8001f40 <HAL_I2C_Init+0xc8>
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	4a63      	ldr	r2, [pc, #396]	; (80020c4 <HAL_I2C_Init+0x24c>)
 8001f38:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3c:	099b      	lsrs	r3, r3, #6
 8001f3e:	3301      	adds	r3, #1
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4956      	ldr	r1, [pc, #344]	; (80020b4 <HAL_I2C_Init+0x23c>)
 8001f5c:	428b      	cmp	r3, r1
 8001f5e:	d80d      	bhi.n	8001f7c <HAL_I2C_Init+0x104>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	1e59      	subs	r1, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f6e:	3301      	adds	r3, #1
 8001f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	bf38      	it	cc
 8001f78:	2304      	movcc	r3, #4
 8001f7a:	e04f      	b.n	800201c <HAL_I2C_Init+0x1a4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <HAL_I2C_Init+0x130>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1e58      	subs	r0, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e012      	b.n	8001fce <HAL_I2C_Init+0x156>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	0099      	lsls	r1, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Init+0x15e>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e022      	b.n	800201c <HAL_I2C_Init+0x1a4>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10e      	bne.n	8001ffc <HAL_I2C_Init+0x184>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e58      	subs	r0, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	440b      	add	r3, r1
 8001fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffa:	e00f      	b.n	800201c <HAL_I2C_Init+0x1a4>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	0099      	lsls	r1, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	6809      	ldr	r1, [r1, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800204a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6911      	ldr	r1, [r2, #16]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	430b      	orrs	r3, r1
 800205e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	000186a0 	.word	0x000186a0
 80020b8:	001e847f 	.word	0x001e847f
 80020bc:	003d08ff 	.word	0x003d08ff
 80020c0:	431bde83 	.word	0x431bde83
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	4608      	mov	r0, r1
 80020d2:	4611      	mov	r1, r2
 80020d4:	461a      	mov	r2, r3
 80020d6:	4603      	mov	r3, r0
 80020d8:	817b      	strh	r3, [r7, #10]
 80020da:	460b      	mov	r3, r1
 80020dc:	813b      	strh	r3, [r7, #8]
 80020de:	4613      	mov	r3, r2
 80020e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020e2:	f7fe fdff 	bl	8000ce4 <HAL_GetTick>
 80020e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b20      	cmp	r3, #32
 80020f2:	f040 80d9 	bne.w	80022a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2319      	movs	r3, #25
 80020fc:	2201      	movs	r2, #1
 80020fe:	496d      	ldr	r1, [pc, #436]	; (80022b4 <HAL_I2C_Mem_Write+0x1ec>)
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f965 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800210c:	2302      	movs	r3, #2
 800210e:	e0cc      	b.n	80022aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_I2C_Mem_Write+0x56>
 800211a:	2302      	movs	r3, #2
 800211c:	e0c5      	b.n	80022aa <HAL_I2C_Mem_Write+0x1e2>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d007      	beq.n	8002144 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002152:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2221      	movs	r2, #33	; 0x21
 8002158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2240      	movs	r2, #64	; 0x40
 8002160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a3a      	ldr	r2, [r7, #32]
 800216e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002174:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a4d      	ldr	r2, [pc, #308]	; (80022b8 <HAL_I2C_Mem_Write+0x1f0>)
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002186:	88f8      	ldrh	r0, [r7, #6]
 8002188:	893a      	ldrh	r2, [r7, #8]
 800218a:	8979      	ldrh	r1, [r7, #10]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	4603      	mov	r3, r0
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f890 	bl	80022bc <I2C_RequestMemoryWrite>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d052      	beq.n	8002248 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e081      	b.n	80022aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f9e6 	bl	800257c <I2C_WaitOnTXEFlagUntilTimeout>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00d      	beq.n	80021d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d107      	bne.n	80021ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e06b      	b.n	80022aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	781a      	ldrb	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ec:	3b01      	subs	r3, #1
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b04      	cmp	r3, #4
 800220e:	d11b      	bne.n	8002248 <HAL_I2C_Mem_Write+0x180>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	d017      	beq.n	8002248 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1aa      	bne.n	80021a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f9d2 	bl	80025fe <I2C_WaitOnBTFFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	2b04      	cmp	r3, #4
 8002266:	d107      	bne.n	8002278 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002276:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e016      	b.n	80022aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800228a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e000      	b.n	80022aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80022a8:	2302      	movs	r3, #2
  }
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	00100002 	.word	0x00100002
 80022b8:	ffff0000 	.word	0xffff0000

080022bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	4608      	mov	r0, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	4603      	mov	r3, r0
 80022cc:	817b      	strh	r3, [r7, #10]
 80022ce:	460b      	mov	r3, r1
 80022d0:	813b      	strh	r3, [r7, #8]
 80022d2:	4613      	mov	r3, r2
 80022d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f86c 	bl	80023d0 <I2C_WaitOnFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e05f      	b.n	80023c2 <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002302:	897b      	ldrh	r3, [r7, #10]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002310:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	6a3a      	ldr	r2, [r7, #32]
 8002316:	492d      	ldr	r1, [pc, #180]	; (80023cc <I2C_RequestMemoryWrite+0x110>)
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f000 f8b0 	bl	800247e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e04c      	b.n	80023c2 <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800233e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002340:	6a39      	ldr	r1, [r7, #32]
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f91a 	bl	800257c <I2C_WaitOnTXEFlagUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00d      	beq.n	800236a <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	2b04      	cmp	r3, #4
 8002354:	d107      	bne.n	8002366 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002364:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e02b      	b.n	80023c2 <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d105      	bne.n	800237c <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002370:	893b      	ldrh	r3, [r7, #8]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	611a      	str	r2, [r3, #16]
 800237a:	e021      	b.n	80023c0 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800237c:	893b      	ldrh	r3, [r7, #8]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b29b      	uxth	r3, r3
 8002382:	b2da      	uxtb	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800238a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238c:	6a39      	ldr	r1, [r7, #32]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f8f4 	bl	800257c <I2C_WaitOnTXEFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00d      	beq.n	80023b6 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d107      	bne.n	80023b2 <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e005      	b.n	80023c2 <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023b6:	893b      	ldrh	r3, [r7, #8]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	00010002 	.word	0x00010002

080023d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	4613      	mov	r3, r2
 80023de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023e0:	e025      	b.n	800242e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d021      	beq.n	800242e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ea:	f7fe fc7b 	bl	8000ce4 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d302      	bcc.n	8002400 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d116      	bne.n	800242e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f043 0220 	orr.w	r2, r3, #32
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e023      	b.n	8002476 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10d      	bne.n	8002454 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	43da      	mvns	r2, r3
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4013      	ands	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	e00c      	b.n	800246e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	43da      	mvns	r2, r3
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4013      	ands	r3, r2
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	bf0c      	ite	eq
 8002466:	2301      	moveq	r3, #1
 8002468:	2300      	movne	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	429a      	cmp	r2, r3
 8002472:	d0b6      	beq.n	80023e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800248c:	e051      	b.n	8002532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249c:	d123      	bne.n	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f043 0204 	orr.w	r2, r3, #4
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e046      	b.n	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ec:	d021      	beq.n	8002532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ee:	f7fe fbf9 	bl	8000ce4 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d302      	bcc.n	8002504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d116      	bne.n	8002532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2220      	movs	r2, #32
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f043 0220 	orr.w	r2, r3, #32
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e020      	b.n	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d10c      	bne.n	8002556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4013      	ands	r3, r2
 8002548:	b29b      	uxth	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	e00b      	b.n	800256e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	43da      	mvns	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d18d      	bne.n	800248e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002588:	e02d      	b.n	80025e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f878 	bl	8002680 <I2C_IsAcknowledgeFailed>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e02d      	b.n	80025f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a0:	d021      	beq.n	80025e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a2:	f7fe fb9f 	bl	8000ce4 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d302      	bcc.n	80025b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d116      	bne.n	80025e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f043 0220 	orr.w	r2, r3, #32
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e007      	b.n	80025f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f0:	2b80      	cmp	r3, #128	; 0x80
 80025f2:	d1ca      	bne.n	800258a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800260a:	e02d      	b.n	8002668 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f837 	bl	8002680 <I2C_IsAcknowledgeFailed>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e02d      	b.n	8002678 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d021      	beq.n	8002668 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002624:	f7fe fb5e 	bl	8000ce4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	429a      	cmp	r2, r3
 8002632:	d302      	bcc.n	800263a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e007      	b.n	8002678 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f003 0304 	and.w	r3, r3, #4
 8002672:	2b04      	cmp	r3, #4
 8002674:	d1ca      	bne.n	800260c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002696:	d11b      	bne.n	80026d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0204 	orr.w	r2, r3, #4
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	420e0020 	.word	0x420e0020

080026f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e26c      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 8087 	beq.w	8002822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002714:	4b92      	ldr	r3, [pc, #584]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b04      	cmp	r3, #4
 800271e:	d00c      	beq.n	800273a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002720:	4b8f      	ldr	r3, [pc, #572]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b08      	cmp	r3, #8
 800272a:	d112      	bne.n	8002752 <HAL_RCC_OscConfig+0x5e>
 800272c:	4b8c      	ldr	r3, [pc, #560]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002738:	d10b      	bne.n	8002752 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273a:	4b89      	ldr	r3, [pc, #548]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d06c      	beq.n	8002820 <HAL_RCC_OscConfig+0x12c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d168      	bne.n	8002820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e246      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x76>
 800275c:	4b80      	ldr	r3, [pc, #512]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a7f      	ldr	r2, [pc, #508]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 8002762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	e02e      	b.n	80027c8 <HAL_RCC_OscConfig+0xd4>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x98>
 8002772:	4b7b      	ldr	r3, [pc, #492]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a7a      	ldr	r2, [pc, #488]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 8002778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	4b78      	ldr	r3, [pc, #480]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a77      	ldr	r2, [pc, #476]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 8002784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e01d      	b.n	80027c8 <HAL_RCC_OscConfig+0xd4>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0xbc>
 8002796:	4b72      	ldr	r3, [pc, #456]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a71      	ldr	r2, [pc, #452]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 800279c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b6f      	ldr	r3, [pc, #444]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a6e      	ldr	r2, [pc, #440]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0xd4>
 80027b0:	4b6b      	ldr	r3, [pc, #428]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6a      	ldr	r2, [pc, #424]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b68      	ldr	r3, [pc, #416]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a67      	ldr	r2, [pc, #412]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 80027c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fa88 	bl	8000ce4 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fa84 	bl	8000ce4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e1fa      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b5d      	ldr	r3, [pc, #372]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0xe4>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f8:	f7fe fa74 	bl	8000ce4 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fa70 	bl	8000ce4 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1e6      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	4b53      	ldr	r3, [pc, #332]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x10c>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d063      	beq.n	80028f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800282e:	4b4c      	ldr	r3, [pc, #304]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800283a:	4b49      	ldr	r3, [pc, #292]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b08      	cmp	r3, #8
 8002844:	d11c      	bne.n	8002880 <HAL_RCC_OscConfig+0x18c>
 8002846:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d116      	bne.n	8002880 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	4b43      	ldr	r3, [pc, #268]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_RCC_OscConfig+0x176>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e1ba      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286a:	4b3d      	ldr	r3, [pc, #244]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4939      	ldr	r1, [pc, #228]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800287e:	e03a      	b.n	80028f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d020      	beq.n	80028ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002888:	4b36      	ldr	r3, [pc, #216]	; (8002964 <HAL_RCC_OscConfig+0x270>)
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288e:	f7fe fa29 	bl	8000ce4 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe fa25 	bl	8000ce4 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e19b      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a8:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b4:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4927      	ldr	r1, [pc, #156]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	600b      	str	r3, [r1, #0]
 80028c8:	e015      	b.n	80028f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028ca:	4b26      	ldr	r3, [pc, #152]	; (8002964 <HAL_RCC_OscConfig+0x270>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7fe fa08 	bl	8000ce4 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d8:	f7fe fa04 	bl	8000ce4 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e17a      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d03a      	beq.n	8002978 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d019      	beq.n	800293e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290a:	4b17      	ldr	r3, [pc, #92]	; (8002968 <HAL_RCC_OscConfig+0x274>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002910:	f7fe f9e8 	bl	8000ce4 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002918:	f7fe f9e4 	bl	8000ce4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e15a      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <HAL_RCC_OscConfig+0x26c>)
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002936:	2001      	movs	r0, #1
 8002938:	f000 faaa 	bl	8002e90 <RCC_Delay>
 800293c:	e01c      	b.n	8002978 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_RCC_OscConfig+0x274>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002944:	f7fe f9ce 	bl	8000ce4 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294a:	e00f      	b.n	800296c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294c:	f7fe f9ca 	bl	8000ce4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d908      	bls.n	800296c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e140      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	42420000 	.word	0x42420000
 8002968:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	4b9e      	ldr	r3, [pc, #632]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1e9      	bne.n	800294c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a6 	beq.w	8002ad2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298a:	4b97      	ldr	r3, [pc, #604]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10d      	bne.n	80029b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	4b94      	ldr	r3, [pc, #592]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	4a93      	ldr	r2, [pc, #588]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a0:	61d3      	str	r3, [r2, #28]
 80029a2:	4b91      	ldr	r3, [pc, #580]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ae:	2301      	movs	r3, #1
 80029b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b2:	4b8e      	ldr	r3, [pc, #568]	; (8002bec <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d118      	bne.n	80029f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029be:	4b8b      	ldr	r3, [pc, #556]	; (8002bec <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a8a      	ldr	r2, [pc, #552]	; (8002bec <HAL_RCC_OscConfig+0x4f8>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ca:	f7fe f98b 	bl	8000ce4 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d2:	f7fe f987 	bl	8000ce4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b64      	cmp	r3, #100	; 0x64
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e0fd      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	4b81      	ldr	r3, [pc, #516]	; (8002bec <HAL_RCC_OscConfig+0x4f8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d106      	bne.n	8002a06 <HAL_RCC_OscConfig+0x312>
 80029f8:	4b7b      	ldr	r3, [pc, #492]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	4a7a      	ldr	r2, [pc, #488]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	6213      	str	r3, [r2, #32]
 8002a04:	e02d      	b.n	8002a62 <HAL_RCC_OscConfig+0x36e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x334>
 8002a0e:	4b76      	ldr	r3, [pc, #472]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a75      	ldr	r2, [pc, #468]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a14:	f023 0301 	bic.w	r3, r3, #1
 8002a18:	6213      	str	r3, [r2, #32]
 8002a1a:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	4a72      	ldr	r2, [pc, #456]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a20:	f023 0304 	bic.w	r3, r3, #4
 8002a24:	6213      	str	r3, [r2, #32]
 8002a26:	e01c      	b.n	8002a62 <HAL_RCC_OscConfig+0x36e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d10c      	bne.n	8002a4a <HAL_RCC_OscConfig+0x356>
 8002a30:	4b6d      	ldr	r3, [pc, #436]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4a6c      	ldr	r2, [pc, #432]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	6213      	str	r3, [r2, #32]
 8002a3c:	4b6a      	ldr	r3, [pc, #424]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4a69      	ldr	r2, [pc, #420]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6213      	str	r3, [r2, #32]
 8002a48:	e00b      	b.n	8002a62 <HAL_RCC_OscConfig+0x36e>
 8002a4a:	4b67      	ldr	r3, [pc, #412]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4a66      	ldr	r2, [pc, #408]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	6213      	str	r3, [r2, #32]
 8002a56:	4b64      	ldr	r3, [pc, #400]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	4a63      	ldr	r2, [pc, #396]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a5c:	f023 0304 	bic.w	r3, r3, #4
 8002a60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d015      	beq.n	8002a96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a6a:	f7fe f93b 	bl	8000ce4 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	e00a      	b.n	8002a88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe f937 	bl	8000ce4 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e0ab      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0ee      	beq.n	8002a72 <HAL_RCC_OscConfig+0x37e>
 8002a94:	e014      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a96:	f7fe f925 	bl	8000ce4 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9e:	f7fe f921 	bl	8000ce4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e095      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab4:	4b4c      	ldr	r3, [pc, #304]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ee      	bne.n	8002a9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d105      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac6:	4b48      	ldr	r3, [pc, #288]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	4a47      	ldr	r2, [pc, #284]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 8081 	beq.w	8002bde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002adc:	4b42      	ldr	r3, [pc, #264]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 030c 	and.w	r3, r3, #12
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d061      	beq.n	8002bac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d146      	bne.n	8002b7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af0:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <HAL_RCC_OscConfig+0x4fc>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe f8f5 	bl	8000ce4 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afe:	f7fe f8f1 	bl	8000ce4 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e067      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b10:	4b35      	ldr	r3, [pc, #212]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1f0      	bne.n	8002afe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b24:	d108      	bne.n	8002b38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b26:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	f023 020f 	bic.w	r2, r3, #15
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	492d      	ldr	r1, [pc, #180]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b38:	4b2b      	ldr	r3, [pc, #172]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a19      	ldr	r1, [r3, #32]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	4927      	ldr	r1, [pc, #156]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <HAL_RCC_OscConfig+0x4fc>)
 8002b52:	2201      	movs	r2, #1
 8002b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b56:	f7fe f8c5 	bl	8000ce4 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7fe f8c1 	bl	8000ce4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e037      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x46a>
 8002b7c:	e02f      	b.n	8002bde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <HAL_RCC_OscConfig+0x4fc>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b84:	f7fe f8ae 	bl	8000ce4 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8c:	f7fe f8aa 	bl	8000ce4 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e020      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b9e:	4b12      	ldr	r3, [pc, #72]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x498>
 8002baa:	e018      	b.n	8002bde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e013      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_RCC_OscConfig+0x4f4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d001      	beq.n	8002bde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40007000 	.word	0x40007000
 8002bf0:	42420060 	.word	0x42420060

08002bf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0a0      	b.n	8002d4a <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c20:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a4b      	ldr	r2, [pc, #300]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002c26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c38:	4b46      	ldr	r3, [pc, #280]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a45      	ldr	r2, [pc, #276]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002c3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b43      	ldr	r3, [pc, #268]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4940      	ldr	r1, [pc, #256]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d040      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d115      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e067      	b.n	8002d4a <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e05b      	b.n	8002d4a <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e053      	b.n	8002d4a <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca2:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f023 0203 	bic.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4929      	ldr	r1, [pc, #164]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb4:	f7fe f816 	bl	8000ce4 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7fe f812 	bl	8000ce4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e03b      	b.n	8002d4a <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	4b20      	ldr	r3, [pc, #128]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 020c 	and.w	r2, r3, #12
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1eb      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4915      	ldr	r1, [pc, #84]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	490d      	ldr	r1, [pc, #52]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d22:	f000 f81f 	bl	8002d64 <HAL_RCC_GetSysClockFreq>
 8002d26:	4601      	mov	r1, r0
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_RCC_ClockConfig+0x160>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <HAL_RCC_ClockConfig+0x164>)
 8002d34:	5cd3      	ldrb	r3, [r2, r3]
 8002d36:	fa21 f303 	lsr.w	r3, r1, r3
 8002d3a:	4a08      	ldr	r2, [pc, #32]	; (8002d5c <HAL_RCC_ClockConfig+0x168>)
 8002d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_RCC_ClockConfig+0x16c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd ff8c 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	08007774 	.word	0x08007774
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	20000004 	.word	0x20000004

08002d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d64:	b490      	push	{r4, r7}
 8002d66:	b08e      	sub	sp, #56	; 0x38
 8002d68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d6a:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d6c:	f107 0414 	add.w	r4, r7, #20
 8002d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002d76:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d78:	1d3c      	adds	r4, r7, #4
 8002d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d84:	2300      	movs	r3, #0
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d88:	2300      	movs	r3, #0
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d94:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d002      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x46>
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d003      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x4c>
 8002da8:	e02c      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002daa:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dae:	e02c      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db2:	0c9b      	lsrs	r3, r3, #18
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002dbc:	4413      	add	r3, r2
 8002dbe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d012      	beq.n	8002df4 <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002dda:	4413      	add	r3, r2
 8002ddc:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002de6:	fb02 f203 	mul.w	r2, r2, r3
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	637b      	str	r3, [r7, #52]	; 0x34
 8002df2:	e004      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002df8:	fb02 f303 	mul.w	r3, r2, r3
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e02:	e002      	b.n	8002e0a <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e04:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3738      	adds	r7, #56	; 0x38
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc90      	pop	{r4, r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	080075b8 	.word	0x080075b8
 8002e1c:	080075c8 	.word	0x080075c8
 8002e20:	40021000 	.word	0x40021000
 8002e24:	007a1200 	.word	0x007a1200
 8002e28:	003d0900 	.word	0x003d0900

08002e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e30:	4b02      	ldr	r3, [pc, #8]	; (8002e3c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	20000000 	.word	0x20000000

08002e40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e44:	f7ff fff2 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e48:	4601      	mov	r1, r0
 8002e4a:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	4a03      	ldr	r2, [pc, #12]	; (8002e64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	08007784 	.word	0x08007784

08002e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002e6c:	f7ff ffde 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e70:	4601      	mov	r1, r0
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	0adb      	lsrs	r3, r3, #11
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	4a03      	ldr	r2, [pc, #12]	; (8002e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e7e:	5cd3      	ldrb	r3, [r2, r3]
 8002e80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08007784 	.word	0x08007784

08002e90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e98:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <RCC_Delay+0x34>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <RCC_Delay+0x38>)
 8002e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea2:	0a5b      	lsrs	r3, r3, #9
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002eac:	bf00      	nop
  }
  while (Delay --);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1e5a      	subs	r2, r3, #1
 8002eb2:	60fa      	str	r2, [r7, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f9      	bne.n	8002eac <RCC_Delay+0x1c>
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	10624dd3 	.word	0x10624dd3

08002ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d07d      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eec:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10d      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef8:	4b44      	ldr	r3, [pc, #272]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	4a43      	ldr	r2, [pc, #268]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f02:	61d3      	str	r3, [r2, #28]
 8002f04:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f10:	2301      	movs	r3, #1
 8002f12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f14:	4b3e      	ldr	r3, [pc, #248]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d118      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f20:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a3a      	ldr	r2, [pc, #232]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2c:	f7fd feda 	bl	8000ce4 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	e008      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f34:	f7fd fed6 	bl	8000ce4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e05e      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b32      	ldr	r3, [pc, #200]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f52:	4b2e      	ldr	r3, [pc, #184]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d02e      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d027      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f70:	4b26      	ldr	r3, [pc, #152]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f7a:	4b26      	ldr	r3, [pc, #152]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f80:	4b24      	ldr	r3, [pc, #144]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f86:	4a21      	ldr	r2, [pc, #132]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d014      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f96:	f7fd fea5 	bl	8000ce4 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fd fea1 	bl	8000ce4 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e027      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ee      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc0:	4b12      	ldr	r3, [pc, #72]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	490f      	ldr	r1, [pc, #60]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fd2:	7dfb      	ldrb	r3, [r7, #23]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d105      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	4a0b      	ldr	r2, [pc, #44]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4903      	ldr	r1, [pc, #12]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	40007000 	.word	0x40007000
 8003014:	42420440 	.word	0x42420440

08003018 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d002      	beq.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 800302e:	2b02      	cmp	r3, #2
 8003030:	d033      	beq.n	800309a <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003032:	e041      	b.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      temp_reg = RCC->BDCR;
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	60bb      	str	r3, [r7, #8]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003044:	d108      	bne.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
        frequency = LSE_VALUE;
 8003050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e01f      	b.n	8003098 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003062:	d109      	bne.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 8003064:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = LSI_VALUE;
 8003070:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e00f      	b.n	8003098 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003082:	d118      	bne.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8003084:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d012      	beq.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        frequency = HSE_VALUE / 128U;
 8003090:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003094:	60fb      	str	r3, [r7, #12]
      break;
 8003096:	e00e      	b.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8003098:	e00d      	b.n	80030b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800309a:	f7ff fee5 	bl	8002e68 <HAL_RCC_GetPCLK2Freq>
 800309e:	4602      	mov	r2, r0
 80030a0:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	0b9b      	lsrs	r3, r3, #14
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	3301      	adds	r3, #1
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b2:	60fb      	str	r3, [r7, #12]
      break;
 80030b4:	e000      	b.n	80030b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      break;
 80030b6:	bf00      	nop
    }
  }
  return (frequency);
 80030b8:	68fb      	ldr	r3, [r7, #12]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000

080030c8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e084      	b.n	80031e8 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	7c5b      	ldrb	r3, [r3, #17]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd fc5e 	bl	80009b0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fc1e 	bl	800393c <HAL_RTC_WaitForSynchro>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2204      	movs	r2, #4
 800310a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e06b      	b.n	80031e8 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fcd7 	bl	8003ac4 <RTC_EnterInitMode>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d004      	beq.n	8003126 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2204      	movs	r2, #4
 8003120:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e060      	b.n	80031e8 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0207 	bic.w	r2, r2, #7
 8003134:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800313e:	4b2c      	ldr	r3, [pc, #176]	; (80031f0 <HAL_RTC_Init+0x128>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a2b      	ldr	r2, [pc, #172]	; (80031f0 <HAL_RTC_Init+0x128>)
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800314a:	4b29      	ldr	r3, [pc, #164]	; (80031f0 <HAL_RTC_Init+0x128>)
 800314c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	4926      	ldr	r1, [pc, #152]	; (80031f0 <HAL_RTC_Init+0x128>)
 8003158:	4313      	orrs	r3, r2
 800315a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d003      	beq.n	800316e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e00e      	b.n	800318c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800316e:	2001      	movs	r0, #1
 8003170:	f7ff ff52 	bl	8003018 <HAL_RCCEx_GetPeriphCLKFreq>
 8003174:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d104      	bne.n	8003186 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2204      	movs	r2, #4
 8003180:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e030      	b.n	80031e8 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3b01      	subs	r3, #1
 800318a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f023 010f 	bic.w	r1, r3, #15
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	0c1a      	lsrs	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	0c1b      	lsrs	r3, r3, #16
 80031aa:	041b      	lsls	r3, r3, #16
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	b291      	uxth	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fcab 	bl	8003b14 <RTC_ExitInitMode>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d004      	beq.n	80031ce <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2204      	movs	r2, #4
 80031c8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00c      	b.n	80031e8 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
  }
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40006c00 	.word	0x40006c00

080031f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80031f4:	b590      	push	{r4, r7, lr}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_RTC_SetTime+0x20>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e080      	b.n	800331a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	7c1b      	ldrb	r3, [r3, #16]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_RTC_SetTime+0x30>
 8003220:	2302      	movs	r3, #2
 8003222:	e07a      	b.n	800331a <HAL_RTC_SetTime+0x126>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2202      	movs	r2, #2
 800322e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d113      	bne.n	800325e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003240:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	785b      	ldrb	r3, [r3, #1]
 8003248:	4619      	mov	r1, r3
 800324a:	460b      	mov	r3, r1
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a5b      	subs	r3, r3, r1
 8003250:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003252:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003258:	4413      	add	r3, r2
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	e01e      	b.n	800329c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fc9b 	bl	8003b9e <RTC_Bcd2ToByte>
 8003268:	4603      	mov	r3, r0
 800326a:	461a      	mov	r2, r3
 800326c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003270:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fc90 	bl	8003b9e <RTC_Bcd2ToByte>
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800328a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	789b      	ldrb	r3, [r3, #2]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fc84 	bl	8003b9e <RTC_Bcd2ToByte>
 8003296:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003298:	4423      	add	r3, r4
 800329a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800329c:	6979      	ldr	r1, [r7, #20]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 fba9 	bl	80039f6 <RTC_WriteTimeCounter>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2204      	movs	r2, #4
 80032ae:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e02f      	b.n	800331a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0205 	bic.w	r2, r2, #5
 80032c8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fbba 	bl	8003a44 <RTC_ReadAlarmCounter>
 80032d0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d8:	d018      	beq.n	800330c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d214      	bcs.n	800330c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80032e8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80032ec:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80032ee:	6939      	ldr	r1, [r7, #16]
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 fbc0 	bl	8003a76 <RTC_WriteAlarmCounter>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2204      	movs	r2, #4
 8003300:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e006      	b.n	800331a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2201      	movs	r2, #1
 8003310:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003318:	2300      	movs	r3, #0
  }
}
 800331a:	4618      	mov	r0, r3
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd90      	pop	{r4, r7, pc}
	...

08003324 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_RTC_GetTime+0x28>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b5      	b.n	80034bc <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e0ac      	b.n	80034bc <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fb17 	bl	8003996 <RTC_ReadTimeCounter>
 8003368:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	4a55      	ldr	r2, [pc, #340]	; (80034c4 <HAL_RTC_GetTime+0x1a0>)
 800336e:	fba2 2303 	umull	r2, r3, r2, r3
 8003372:	0adb      	lsrs	r3, r3, #11
 8003374:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4b52      	ldr	r3, [pc, #328]	; (80034c4 <HAL_RTC_GetTime+0x1a0>)
 800337a:	fba3 1302 	umull	r1, r3, r3, r2
 800337e:	0adb      	lsrs	r3, r3, #11
 8003380:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	4a4f      	ldr	r2, [pc, #316]	; (80034c8 <HAL_RTC_GetTime+0x1a4>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	b2da      	uxtb	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	4a4a      	ldr	r2, [pc, #296]	; (80034c4 <HAL_RTC_GetTime+0x1a0>)
 800339c:	fba2 1203 	umull	r1, r2, r2, r3
 80033a0:	0ad2      	lsrs	r2, r2, #11
 80033a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80033a6:	fb01 f202 	mul.w	r2, r1, r2
 80033aa:	1a9a      	subs	r2, r3, r2
 80033ac:	4b46      	ldr	r3, [pc, #280]	; (80034c8 <HAL_RTC_GetTime+0x1a4>)
 80033ae:	fba3 1302 	umull	r1, r3, r3, r2
 80033b2:	0959      	lsrs	r1, r3, #5
 80033b4:	460b      	mov	r3, r1
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a5b      	subs	r3, r3, r1
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	1ad1      	subs	r1, r2, r3
 80033be:	b2ca      	uxtb	r2, r1
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	2b17      	cmp	r3, #23
 80033c8:	d955      	bls.n	8003476 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4a3f      	ldr	r2, [pc, #252]	; (80034cc <HAL_RTC_GetTime+0x1a8>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80033d6:	6939      	ldr	r1, [r7, #16]
 80033d8:	4b3c      	ldr	r3, [pc, #240]	; (80034cc <HAL_RTC_GetTime+0x1a8>)
 80033da:	fba3 2301 	umull	r2, r3, r3, r1
 80033de:	091a      	lsrs	r2, r3, #4
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	1aca      	subs	r2, r1, r3
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fb27 	bl	8003a44 <RTC_ReadAlarmCounter>
 80033f6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fe:	d008      	beq.n	8003412 <HAL_RTC_GetTime+0xee>
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	429a      	cmp	r2, r3
 8003406:	d904      	bls.n	8003412 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	e002      	b.n	8003418 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003412:	f04f 33ff 	mov.w	r3, #4294967295
 8003416:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	4a2d      	ldr	r2, [pc, #180]	; (80034d0 <HAL_RTC_GetTime+0x1ac>)
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003426:	69b9      	ldr	r1, [r7, #24]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fae4 	bl	80039f6 <RTC_WriteTimeCounter>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e041      	b.n	80034bc <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d00c      	beq.n	800345a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	4413      	add	r3, r2
 8003446:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003448:	69f9      	ldr	r1, [r7, #28]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 fb13 	bl	8003a76 <RTC_WriteAlarmCounter>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e030      	b.n	80034bc <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800345a:	69f9      	ldr	r1, [r7, #28]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 fb0a 	bl	8003a76 <RTC_WriteAlarmCounter>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e027      	b.n	80034bc <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800346c:	6979      	ldr	r1, [r7, #20]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fbb2 	bl	8003bd8 <RTC_DateUpdate>
 8003474:	e003      	b.n	800347e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d01a      	beq.n	80034ba <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f000 fb6b 	bl	8003b64 <RTC_ByteToBcd2>
 800348e:	4603      	mov	r3, r0
 8003490:	461a      	mov	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	785b      	ldrb	r3, [r3, #1]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fb62 	bl	8003b64 <RTC_ByteToBcd2>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	789b      	ldrb	r3, [r3, #2]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fb59 	bl	8003b64 <RTC_ByteToBcd2>
 80034b2:	4603      	mov	r3, r0
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	91a2b3c5 	.word	0x91a2b3c5
 80034c8:	88888889 	.word	0x88888889
 80034cc:	aaaaaaab 	.word	0xaaaaaaab
 80034d0:	00015180 	.word	0x00015180

080034d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61fb      	str	r3, [r7, #28]
 80034e4:	2300      	movs	r3, #0
 80034e6:	61bb      	str	r3, [r7, #24]
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <HAL_RTC_SetDate+0x24>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e097      	b.n	800362c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	7c1b      	ldrb	r3, [r3, #16]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_RTC_SetDate+0x34>
 8003504:	2302      	movs	r3, #2
 8003506:	e091      	b.n	800362c <HAL_RTC_SetDate+0x158>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2202      	movs	r2, #2
 8003512:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10c      	bne.n	8003534 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	78da      	ldrb	r2, [r3, #3]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	785a      	ldrb	r2, [r3, #1]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	789a      	ldrb	r2, [r3, #2]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	739a      	strb	r2, [r3, #14]
 8003532:	e01a      	b.n	800356a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	78db      	ldrb	r3, [r3, #3]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fb30 	bl	8003b9e <RTC_Bcd2ToByte>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	785b      	ldrb	r3, [r3, #1]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fb27 	bl	8003b9e <RTC_Bcd2ToByte>
 8003550:	4603      	mov	r3, r0
 8003552:	461a      	mov	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	789b      	ldrb	r3, [r3, #2]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fb1e 	bl	8003b9e <RTC_Bcd2ToByte>
 8003562:	4603      	mov	r3, r0
 8003564:	461a      	mov	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	7bdb      	ldrb	r3, [r3, #15]
 800356e:	4618      	mov	r0, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	7b59      	ldrb	r1, [r3, #13]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	7b9b      	ldrb	r3, [r3, #14]
 8003578:	461a      	mov	r2, r3
 800357a:	f000 fc09 	bl	8003d90 <RTC_WeekDayNum>
 800357e:	4603      	mov	r3, r0
 8003580:	461a      	mov	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	7b1a      	ldrb	r2, [r3, #12]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fa01 	bl	8003996 <RTC_ReadTimeCounter>
 8003594:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	4a26      	ldr	r2, [pc, #152]	; (8003634 <HAL_RTC_SetDate+0x160>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	0adb      	lsrs	r3, r3, #11
 80035a0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b18      	cmp	r3, #24
 80035a6:	d93a      	bls.n	800361e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	4a23      	ldr	r2, [pc, #140]	; (8003638 <HAL_RTC_SetDate+0x164>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	091b      	lsrs	r3, r3, #4
 80035b2:	4a22      	ldr	r2, [pc, #136]	; (800363c <HAL_RTC_SetDate+0x168>)
 80035b4:	fb02 f303 	mul.w	r3, r2, r3
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80035be:	69f9      	ldr	r1, [r7, #28]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 fa18 	bl	80039f6 <RTC_WriteTimeCounter>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d007      	beq.n	80035dc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2204      	movs	r2, #4
 80035d0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e027      	b.n	800362c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fa31 	bl	8003a44 <RTC_ReadAlarmCounter>
 80035e2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d018      	beq.n	800361e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d214      	bcs.n	800361e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80035fa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80035fe:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003600:	69b9      	ldr	r1, [r7, #24]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fa37 	bl	8003a76 <RTC_WriteAlarmCounter>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2204      	movs	r2, #4
 8003612:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e006      	b.n	800362c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2201      	movs	r2, #1
 8003622:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3720      	adds	r7, #32
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	91a2b3c5 	.word	0x91a2b3c5
 8003638:	aaaaaaab 	.word	0xaaaaaaab
 800363c:	00015180 	.word	0x00015180

08003640 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800364c:	f107 0314 	add.w	r3, r7, #20
 8003650:	2100      	movs	r1, #0
 8003652:	460a      	mov	r2, r1
 8003654:	801a      	strh	r2, [r3, #0]
 8003656:	460a      	mov	r2, r1
 8003658:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_RTC_GetDate+0x26>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e03a      	b.n	80036e0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800366a:	f107 0314 	add.w	r3, r7, #20
 800366e:	2200      	movs	r2, #0
 8003670:	4619      	mov	r1, r3
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f7ff fe56 	bl	8003324 <HAL_RTC_GetTime>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e02e      	b.n	80036e0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	7b1a      	ldrb	r2, [r3, #12]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	7bda      	ldrb	r2, [r3, #15]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	7b5a      	ldrb	r2, [r3, #13]
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	7b9a      	ldrb	r2, [r3, #14]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01a      	beq.n	80036de <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	78db      	ldrb	r3, [r3, #3]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fa59 	bl	8003b64 <RTC_ByteToBcd2>
 80036b2:	4603      	mov	r3, r0
 80036b4:	461a      	mov	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	785b      	ldrb	r3, [r3, #1]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fa50 	bl	8003b64 <RTC_ByteToBcd2>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461a      	mov	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	789b      	ldrb	r3, [r3, #2]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fa47 	bl	8003b64 <RTC_ByteToBcd2>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t counter_alarm = 0U, counter_time;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
  RTC_TimeTypeDef stime = {0U};
 80036f8:	f107 0314 	add.w	r3, r7, #20
 80036fc:	2100      	movs	r1, #0
 80036fe:	460a      	mov	r2, r1
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	460a      	mov	r2, r1
 8003704:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d002      	beq.n	8003712 <HAL_RTC_SetAlarm_IT+0x2a>
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RTC_SetAlarm_IT+0x2e>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e096      	b.n	8003844 <HAL_RTC_SetAlarm_IT+0x15c>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(sAlarm->Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	7c1b      	ldrb	r3, [r3, #16]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_RTC_SetAlarm_IT+0x3a>
 800371e:	2302      	movs	r3, #2
 8003720:	e090      	b.n	8003844 <HAL_RTC_SetAlarm_IT+0x15c>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2202      	movs	r2, #2
 800372c:	745a      	strb	r2, [r3, #17]

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800372e:	f107 0314 	add.w	r3, r7, #20
 8003732:	2200      	movs	r2, #0
 8003734:	4619      	mov	r1, r3
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f7ff fdf4 	bl	8003324 <HAL_RTC_GetTime>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_RTC_SetAlarm_IT+0x5e>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07e      	b.n	8003844 <HAL_RTC_SetAlarm_IT+0x15c>
  }

  /* Convert time in seconds */
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003746:	7d3b      	ldrb	r3, [r7, #20]
 8003748:	461a      	mov	r2, r3
 800374a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800374e:	fb03 f202 	mul.w	r2, r3, r2
                            ((uint32_t)stime.Minutes * 60U) + \
 8003752:	7d7b      	ldrb	r3, [r7, #21]
 8003754:	4619      	mov	r1, r3
 8003756:	460b      	mov	r3, r1
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	1a5b      	subs	r3, r3, r1
 800375c:	009b      	lsls	r3, r3, #2
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 800375e:	4413      	add	r3, r2
                            ((uint32_t)stime.Seconds));
 8003760:	7dba      	ldrb	r2, [r7, #22]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8003762:	4413      	add	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]

  if (Format == RTC_FORMAT_BIN)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d113      	bne.n	8003794 <HAL_RTC_SetAlarm_IT+0xac>
  {
    assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
    assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
    assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003776:	fb03 f202 	mul.w	r2, r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	4619      	mov	r1, r3
 8003780:	460b      	mov	r3, r1
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a5b      	subs	r3, r3, r1
 8003786:	009b      	lsls	r3, r3, #2
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8003788:	4413      	add	r3, r2
                               ((uint32_t)sAlarm->AlarmTime.Seconds));
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	7892      	ldrb	r2, [r2, #2]
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 800378e:	4413      	add	r3, r2
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	e01e      	b.n	80037d2 <HAL_RTC_SetAlarm_IT+0xea>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));

    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fa00 	bl	8003b9e <RTC_Bcd2ToByte>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80037a6:	fb03 f402 	mul.w	r4, r3, r2
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f9f5 	bl	8003b9e <RTC_Bcd2ToByte>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80037c0:	441c      	add	r4, r3
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	789b      	ldrb	r3, [r3, #2]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f9e9 	bl	8003b9e <RTC_Bcd2ToByte>
 80037cc:	4603      	mov	r3, r0
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 80037ce:	4423      	add	r3, r4
 80037d0:	61fb      	str	r3, [r7, #28]
  }

  /* Check that requested alarm should expire in the same day (otherwise add 1 day) */
  if (counter_alarm < counter_time)
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d205      	bcs.n	80037e6 <HAL_RTC_SetAlarm_IT+0xfe>
  {
    /* Add 1 day to alarm counter*/
    counter_alarm += (uint32_t)(24U * 3600U);
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80037e0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80037e4:	61fb      	str	r3, [r7, #28]
  }

  /* Write alarm counter in RTC registers */
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80037e6:	69f9      	ldr	r1, [r7, #28]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f944 	bl	8003a76 <RTC_WriteAlarmCounter>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <HAL_RTC_SetAlarm_IT+0x11c>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2204      	movs	r2, #4
 80037f8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e01f      	b.n	8003844 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0202 	mvn.w	r2, #2
 800380c:	605a      	str	r2, [r3, #4]

    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0202 	orr.w	r2, r2, #2
 800381c:	601a      	str	r2, [r3, #0]

    /* RTC Alarm Interrupt Configuration: EXTI configuration */
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <HAL_RTC_SetAlarm_IT+0x164>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a0a      	ldr	r2, [pc, #40]	; (800384c <HAL_RTC_SetAlarm_IT+0x164>)
 8003824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003828:	6013      	str	r3, [r2, #0]

    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800382a:	4b08      	ldr	r3, [pc, #32]	; (800384c <HAL_RTC_SetAlarm_IT+0x164>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4a07      	ldr	r2, [pc, #28]	; (800384c <HAL_RTC_SetAlarm_IT+0x164>)
 8003830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003834:	6093      	str	r3, [r2, #8]

    hrtc->State = HAL_RTC_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003842:	2300      	movs	r3, #0
  }
}
 8003844:	4618      	mov	r0, r3
 8003846:	3724      	adds	r7, #36	; 0x24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd90      	pop	{r4, r7, pc}
 800384c:	40010400 	.word	0x40010400

08003850 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  uint32_t counter_alarm = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Alarm);

  /* Check input parameters */
  if ((hrtc == NULL) || (sAlarm == NULL))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_RTC_GetAlarm+0x1e>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RTC_GetAlarm+0x22>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e05a      	b.n	8003928 <HAL_RTC_GetAlarm+0xd8>
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  /* Read Alarm counter in RTC registers */
  counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f8e6 	bl	8003a44 <RTC_ReadAlarmCounter>
 8003878:	6178      	str	r0, [r7, #20]

  /* Fill the structure with the read parameters */
  /* Set hours in a day range (between 0 to 24)*/
  sAlarm->AlarmTime.Hours   = (uint32_t)((counter_alarm / 3600U) % 24U);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	4a2c      	ldr	r2, [pc, #176]	; (8003930 <HAL_RTC_GetAlarm+0xe0>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0ad9      	lsrs	r1, r3, #11
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <HAL_RTC_GetAlarm+0xe4>)
 8003886:	fba3 2301 	umull	r2, r3, r3, r1
 800388a:	091a      	lsrs	r2, r3, #4
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	1aca      	subs	r2, r1, r3
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes = (uint32_t)((counter_alarm % 3600U) / 60U);
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	4b24      	ldr	r3, [pc, #144]	; (8003930 <HAL_RTC_GetAlarm+0xe0>)
 80038a0:	fba3 1302 	umull	r1, r3, r3, r2
 80038a4:	0adb      	lsrs	r3, r3, #11
 80038a6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80038aa:	fb01 f303 	mul.w	r3, r1, r3
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	4a21      	ldr	r2, [pc, #132]	; (8003938 <HAL_RTC_GetAlarm+0xe8>)
 80038b2:	fba2 2303 	umull	r2, r3, r2, r3
 80038b6:	095b      	lsrs	r3, r3, #5
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds = (uint32_t)((counter_alarm % 3600U) % 60U);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	4a1b      	ldr	r2, [pc, #108]	; (8003930 <HAL_RTC_GetAlarm+0xe0>)
 80038c2:	fba2 1203 	umull	r1, r2, r2, r3
 80038c6:	0ad2      	lsrs	r2, r2, #11
 80038c8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80038cc:	fb01 f202 	mul.w	r2, r1, r2
 80038d0:	1a9a      	subs	r2, r3, r2
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_RTC_GetAlarm+0xe8>)
 80038d4:	fba3 1302 	umull	r1, r3, r3, r2
 80038d8:	0959      	lsrs	r1, r3, #5
 80038da:	460b      	mov	r3, r1
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a5b      	subs	r3, r3, r1
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	1ad1      	subs	r1, r2, r3
 80038e4:	b2ca      	uxtb	r2, r1
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	709a      	strb	r2, [r3, #2]

  if (Format != RTC_FORMAT_BIN)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01a      	beq.n	8003926 <HAL_RTC_GetAlarm+0xd6>
  {
    sAlarm->AlarmTime.Hours   = RTC_ByteToBcd2(sAlarm->AlarmTime.Hours);
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 f935 	bl	8003b64 <RTC_ByteToBcd2>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	785b      	ldrb	r3, [r3, #1]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f92c 	bl	8003b64 <RTC_ByteToBcd2>
 800390c:	4603      	mov	r3, r0
 800390e:	461a      	mov	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	789b      	ldrb	r3, [r3, #2]
 8003918:	4618      	mov	r0, r3
 800391a:	f000 f923 	bl	8003b64 <RTC_ByteToBcd2>
 800391e:	4603      	mov	r3, r0
 8003920:	461a      	mov	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	91a2b3c5 	.word	0x91a2b3c5
 8003934:	aaaaaaab 	.word	0xaaaaaaab
 8003938:	88888889 	.word	0x88888889

0800393c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e01d      	b.n	800398e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0208 	bic.w	r2, r2, #8
 8003960:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003962:	f7fd f9bf 	bl	8000ce4 <HAL_GetTick>
 8003966:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003968:	e009      	b.n	800397e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800396a:	f7fd f9bb 	bl	8000ce4 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003978:	d901      	bls.n	800397e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e007      	b.n	800398e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0ee      	beq.n	800396a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003996:	b480      	push	{r7}
 8003998:	b087      	sub	sp, #28
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	827b      	strh	r3, [r7, #18]
 80039a2:	2300      	movs	r3, #0
 80039a4:	823b      	strh	r3, [r7, #16]
 80039a6:	2300      	movs	r3, #0
 80039a8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	699b      	ldr	r3, [r3, #24]
 80039b4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80039c6:	8a7a      	ldrh	r2, [r7, #18]
 80039c8:	8a3b      	ldrh	r3, [r7, #16]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d008      	beq.n	80039e0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80039ce:	8a3b      	ldrh	r3, [r7, #16]
 80039d0:	041a      	lsls	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e004      	b.n	80039ea <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80039e0:	8a7b      	ldrh	r3, [r7, #18]
 80039e2:	041a      	lsls	r2, r3, #16
 80039e4:	89fb      	ldrh	r3, [r7, #14]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80039ea:	697b      	ldr	r3, [r7, #20]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr

080039f6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f85d 	bl	8003ac4 <RTC_EnterInitMode>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
 8003a14:	e011      	b.n	8003a3a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	0c12      	lsrs	r2, r2, #16
 8003a1e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	b292      	uxth	r2, r2
 8003a28:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f872 	bl	8003b14 <RTC_ExitInitMode>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	81fb      	strh	r3, [r7, #14]
 8003a50:	2300      	movs	r3, #0
 8003a52:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003a64:	89fb      	ldrh	r3, [r7, #14]
 8003a66:	041a      	lsls	r2, r3, #16
 8003a68:	89bb      	ldrh	r3, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bc80      	pop	{r7}
 8003a74:	4770      	bx	lr

08003a76 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f81d 	bl	8003ac4 <RTC_EnterInitMode>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
 8003a94:	e011      	b.n	8003aba <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	0c12      	lsrs	r2, r2, #16
 8003a9e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	b292      	uxth	r2, r2
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f832 	bl	8003b14 <RTC_ExitInitMode>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003ad0:	f7fd f908 	bl	8000ce4 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ad6:	e009      	b.n	8003aec <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003ad8:	f7fd f904 	bl	8000ce4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ae6:	d901      	bls.n	8003aec <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e00f      	b.n	8003b0c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0ee      	beq.n	8003ad8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0210 	orr.w	r2, r2, #16
 8003b08:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0210 	bic.w	r2, r2, #16
 8003b2e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003b30:	f7fd f8d8 	bl	8000ce4 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b36:	e009      	b.n	8003b4c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003b38:	f7fd f8d4 	bl	8000ce4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b46:	d901      	bls.n	8003b4c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e007      	b.n	8003b5c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0ee      	beq.n	8003b38 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003b72:	e005      	b.n	8003b80 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3301      	adds	r3, #1
 8003b78:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	3b0a      	subs	r3, #10
 8003b7e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003b80:	79fb      	ldrb	r3, [r7, #7]
 8003b82:	2b09      	cmp	r3, #9
 8003b84:	d8f6      	bhi.n	8003b74 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	b2db      	uxtb	r3, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bc80      	pop	{r7}
 8003b9c:	4770      	bx	lr

08003b9e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	b2db      	uxtb	r3, r3
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	7bdb      	ldrb	r3, [r3, #15]
 8003bf6:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7b5b      	ldrb	r3, [r3, #13]
 8003bfc:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7b9b      	ldrb	r3, [r3, #14]
 8003c02:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003c04:	2300      	movs	r3, #0
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	e06f      	b.n	8003cea <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d011      	beq.n	8003c34 <RTC_DateUpdate+0x5c>
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d00e      	beq.n	8003c34 <RTC_DateUpdate+0x5c>
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b05      	cmp	r3, #5
 8003c1a:	d00b      	beq.n	8003c34 <RTC_DateUpdate+0x5c>
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2b07      	cmp	r3, #7
 8003c20:	d008      	beq.n	8003c34 <RTC_DateUpdate+0x5c>
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d005      	beq.n	8003c34 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	2b0a      	cmp	r3, #10
 8003c2c:	d002      	beq.n	8003c34 <RTC_DateUpdate+0x5c>
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b0c      	cmp	r3, #12
 8003c32:	d117      	bne.n	8003c64 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b1e      	cmp	r3, #30
 8003c38:	d803      	bhi.n	8003c42 <RTC_DateUpdate+0x6a>
      {
        day++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003c40:	e050      	b.n	8003ce4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	d005      	beq.n	8003c54 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003c52:	e047      	b.n	8003ce4 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003c54:	2301      	movs	r3, #1
 8003c56:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
          year++;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003c62:	e03f      	b.n	8003ce4 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d008      	beq.n	8003c7c <RTC_DateUpdate+0xa4>
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d005      	beq.n	8003c7c <RTC_DateUpdate+0xa4>
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	2b09      	cmp	r3, #9
 8003c74:	d002      	beq.n	8003c7c <RTC_DateUpdate+0xa4>
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	2b0b      	cmp	r3, #11
 8003c7a:	d10c      	bne.n	8003c96 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b1d      	cmp	r3, #29
 8003c80:	d803      	bhi.n	8003c8a <RTC_DateUpdate+0xb2>
      {
        day++;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3301      	adds	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003c88:	e02c      	b.n	8003ce4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003c90:	2301      	movs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003c94:	e026      	b.n	8003ce4 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d123      	bne.n	8003ce4 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b1b      	cmp	r3, #27
 8003ca0:	d803      	bhi.n	8003caa <RTC_DateUpdate+0xd2>
      {
        day++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	e01c      	b.n	8003ce4 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2b1c      	cmp	r3, #28
 8003cae:	d111      	bne.n	8003cd4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 f839 	bl	8003d2c <RTC_IsLeapYear>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <RTC_DateUpdate+0xf0>
        {
          day++;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e00d      	b.n	8003ce4 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	e007      	b.n	8003ce4 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b1d      	cmp	r3, #29
 8003cd8:	d104      	bne.n	8003ce4 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d38b      	bcc.n	8003c0a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	4619      	mov	r1, r3
 8003d14:	6978      	ldr	r0, [r7, #20]
 8003d16:	f000 f83b 	bl	8003d90 <RTC_WeekDayNum>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	731a      	strb	r2, [r3, #12]
}
 8003d22:	bf00      	nop
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003d36:	88fb      	ldrh	r3, [r7, #6]
 8003d38:	f003 0303 	and.w	r3, r3, #3
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e01d      	b.n	8003d82 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <RTC_IsLeapYear+0x60>)
 8003d4a:	fba2 1203 	umull	r1, r2, r2, r3
 8003d4e:	0952      	lsrs	r2, r2, #5
 8003d50:	2164      	movs	r1, #100	; 0x64
 8003d52:	fb01 f202 	mul.w	r2, r1, r2
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e00f      	b.n	8003d82 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <RTC_IsLeapYear+0x60>)
 8003d66:	fba2 1203 	umull	r1, r2, r2, r3
 8003d6a:	09d2      	lsrs	r2, r2, #7
 8003d6c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003d70:	fb01 f202 	mul.w	r2, r1, r2
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003d80:	2300      	movs	r3, #0
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr
 8003d8c:	51eb851f 	.word	0x51eb851f

08003d90 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	70fb      	strb	r3, [r7, #3]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60bb      	str	r3, [r7, #8]
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003dae:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d82d      	bhi.n	8003e12 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	4613      	mov	r3, r2
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	4413      	add	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	4a2c      	ldr	r2, [pc, #176]	; (8003e74 <RTC_WeekDayNum+0xe4>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	085a      	lsrs	r2, r3, #1
 8003dca:	78bb      	ldrb	r3, [r7, #2]
 8003dcc:	441a      	add	r2, r3
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	441a      	add	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	089b      	lsrs	r3, r3, #2
 8003dd8:	441a      	add	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	4926      	ldr	r1, [pc, #152]	; (8003e78 <RTC_WeekDayNum+0xe8>)
 8003de0:	fba1 1303 	umull	r1, r3, r1, r3
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	1ad2      	subs	r2, r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	4922      	ldr	r1, [pc, #136]	; (8003e78 <RTC_WeekDayNum+0xe8>)
 8003dee:	fba1 1303 	umull	r1, r3, r1, r3
 8003df2:	09db      	lsrs	r3, r3, #7
 8003df4:	4413      	add	r3, r2
 8003df6:	1d1a      	adds	r2, r3, #4
 8003df8:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <RTC_WeekDayNum+0xec>)
 8003dfa:	fba3 1302 	umull	r1, r3, r3, r2
 8003dfe:	1ad1      	subs	r1, r2, r3
 8003e00:	0849      	lsrs	r1, r1, #1
 8003e02:	440b      	add	r3, r1
 8003e04:	0899      	lsrs	r1, r3, #2
 8003e06:	460b      	mov	r3, r1
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	1a5b      	subs	r3, r3, r1
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	e029      	b.n	8003e66 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	4613      	mov	r3, r2
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	4413      	add	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <RTC_WeekDayNum+0xe4>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	085a      	lsrs	r2, r3, #1
 8003e26:	78bb      	ldrb	r3, [r7, #2]
 8003e28:	441a      	add	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	089b      	lsrs	r3, r3, #2
 8003e32:	441a      	add	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4910      	ldr	r1, [pc, #64]	; (8003e78 <RTC_WeekDayNum+0xe8>)
 8003e38:	fba1 1303 	umull	r1, r3, r1, r3
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	1ad2      	subs	r2, r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	490d      	ldr	r1, [pc, #52]	; (8003e78 <RTC_WeekDayNum+0xe8>)
 8003e44:	fba1 1303 	umull	r1, r3, r1, r3
 8003e48:	09db      	lsrs	r3, r3, #7
 8003e4a:	4413      	add	r3, r2
 8003e4c:	1c9a      	adds	r2, r3, #2
 8003e4e:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <RTC_WeekDayNum+0xec>)
 8003e50:	fba3 1302 	umull	r1, r3, r3, r2
 8003e54:	1ad1      	subs	r1, r2, r3
 8003e56:	0849      	lsrs	r1, r1, #1
 8003e58:	440b      	add	r3, r1
 8003e5a:	0899      	lsrs	r1, r3, #2
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	1a5b      	subs	r3, r3, r1
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	b2db      	uxtb	r3, r3
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr
 8003e74:	38e38e39 	.word	0x38e38e39
 8003e78:	51eb851f 	.word	0x51eb851f
 8003e7c:	24924925 	.word	0x24924925

08003e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e01d      	b.n	8003ece <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fc fda6 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f000 fa08 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e01d      	b.n	8003f24 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d106      	bne.n	8003f02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 f815 	bl	8003f2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	4619      	mov	r1, r3
 8003f14:	4610      	mov	r0, r2
 8003f16:	f000 f9dd 	bl	80042d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bc80      	pop	{r7}
 8003f3c:	4770      	bx	lr
	...

08003f40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	6839      	ldr	r1, [r7, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fcb0 	bl	80048b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1a      	ldr	r2, [pc, #104]	; (8003fc8 <HAL_TIM_PWM_Start+0x88>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00e      	beq.n	8003f80 <HAL_TIM_PWM_Start+0x40>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <HAL_TIM_PWM_Start+0x8c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d009      	beq.n	8003f80 <HAL_TIM_PWM_Start+0x40>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <HAL_TIM_PWM_Start+0x90>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d004      	beq.n	8003f80 <HAL_TIM_PWM_Start+0x40>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <HAL_TIM_PWM_Start+0x94>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d101      	bne.n	8003f84 <HAL_TIM_PWM_Start+0x44>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_TIM_PWM_Start+0x46>
 8003f84:	2300      	movs	r3, #0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_TIM_PWM_Start+0x5a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b06      	cmp	r3, #6
 8003faa:	d007      	beq.n	8003fbc <HAL_TIM_PWM_Start+0x7c>
  {
    __HAL_TIM_ENABLE(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40012c00 	.word	0x40012c00
 8003fcc:	40014000 	.word	0x40014000
 8003fd0:	40014400 	.word	0x40014400
 8003fd4:	40014800 	.word	0x40014800

08003fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e0b4      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	f200 809f 	bhi.w	8004148 <HAL_TIM_PWM_ConfigChannel+0x170>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004045 	.word	0x08004045
 8004014:	08004149 	.word	0x08004149
 8004018:	08004149 	.word	0x08004149
 800401c:	08004149 	.word	0x08004149
 8004020:	08004085 	.word	0x08004085
 8004024:	08004149 	.word	0x08004149
 8004028:	08004149 	.word	0x08004149
 800402c:	08004149 	.word	0x08004149
 8004030:	080040c7 	.word	0x080040c7
 8004034:	08004149 	.word	0x08004149
 8004038:	08004149 	.word	0x08004149
 800403c:	08004149 	.word	0x08004149
 8004040:	08004107 	.word	0x08004107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 f9c2 	bl	80043d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699a      	ldr	r2, [r3, #24]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0208 	orr.w	r2, r2, #8
 800405e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0204 	bic.w	r2, r2, #4
 800406e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6999      	ldr	r1, [r3, #24]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	619a      	str	r2, [r3, #24]
      break;
 8004082:	e062      	b.n	800414a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fa26 	bl	80044dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800409e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6999      	ldr	r1, [r3, #24]
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	021a      	lsls	r2, r3, #8
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	619a      	str	r2, [r3, #24]
      break;
 80040c4:	e041      	b.n	800414a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fa81 	bl	80045d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	69da      	ldr	r2, [r3, #28]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 0208 	orr.w	r2, r2, #8
 80040e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0204 	bic.w	r2, r2, #4
 80040f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69d9      	ldr	r1, [r3, #28]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	61da      	str	r2, [r3, #28]
      break;
 8004104:	e021      	b.n	800414a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fadd 	bl	80046cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69da      	ldr	r2, [r3, #28]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	69d9      	ldr	r1, [r3, #28]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	021a      	lsls	r2, r3, #8
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	61da      	str	r2, [r3, #28]
      break;
 8004146:	e000      	b.n	800414a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004148:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_TIM_ConfigClockSource+0x18>
 8004178:	2302      	movs	r3, #2
 800417a:	e0a6      	b.n	80042ca <HAL_TIM_ConfigClockSource+0x166>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800419a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d067      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0x120>
 80041b4:	2b40      	cmp	r3, #64	; 0x40
 80041b6:	d80b      	bhi.n	80041d0 <HAL_TIM_ConfigClockSource+0x6c>
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d073      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x140>
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d802      	bhi.n	80041c6 <HAL_TIM_ConfigClockSource+0x62>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d06f      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80041c4:	e078      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d06c      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x140>
 80041ca:	2b30      	cmp	r3, #48	; 0x30
 80041cc:	d06a      	beq.n	80042a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80041ce:	e073      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041d0:	2b70      	cmp	r3, #112	; 0x70
 80041d2:	d00d      	beq.n	80041f0 <HAL_TIM_ConfigClockSource+0x8c>
 80041d4:	2b70      	cmp	r3, #112	; 0x70
 80041d6:	d804      	bhi.n	80041e2 <HAL_TIM_ConfigClockSource+0x7e>
 80041d8:	2b50      	cmp	r3, #80	; 0x50
 80041da:	d033      	beq.n	8004244 <HAL_TIM_ConfigClockSource+0xe0>
 80041dc:	2b60      	cmp	r3, #96	; 0x60
 80041de:	d041      	beq.n	8004264 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80041e0:	e06a      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e6:	d066      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0x152>
 80041e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ec:	d017      	beq.n	800421e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80041ee:	e063      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	6899      	ldr	r1, [r3, #8]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	f000 fb3b 	bl	800487a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004212:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	609a      	str	r2, [r3, #8]
      break;
 800421c:	e04c      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	6899      	ldr	r1, [r3, #8]
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f000 fb24 	bl	800487a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004240:	609a      	str	r2, [r3, #8]
      break;
 8004242:	e039      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	461a      	mov	r2, r3
 8004252:	f000 fa9b 	bl	800478c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2150      	movs	r1, #80	; 0x50
 800425c:	4618      	mov	r0, r3
 800425e:	f000 faf2 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 8004262:	e029      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6818      	ldr	r0, [r3, #0]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	6859      	ldr	r1, [r3, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	461a      	mov	r2, r3
 8004272:	f000 fab9 	bl	80047e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2160      	movs	r1, #96	; 0x60
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fae2 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 8004282:	e019      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6859      	ldr	r1, [r3, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	461a      	mov	r2, r3
 8004292:	f000 fa7b 	bl	800478c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2140      	movs	r1, #64	; 0x40
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fad2 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 80042a2:	e009      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f000 fac9 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 80042b4:	e000      	b.n	80042b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80042b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a35      	ldr	r2, [pc, #212]	; (80043bc <TIM_Base_SetConfig+0xe8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00b      	beq.n	8004304 <TIM_Base_SetConfig+0x30>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f2:	d007      	beq.n	8004304 <TIM_Base_SetConfig+0x30>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a32      	ldr	r2, [pc, #200]	; (80043c0 <TIM_Base_SetConfig+0xec>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0x30>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a31      	ldr	r2, [pc, #196]	; (80043c4 <TIM_Base_SetConfig+0xf0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a28      	ldr	r2, [pc, #160]	; (80043bc <TIM_Base_SetConfig+0xe8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d017      	beq.n	800434e <TIM_Base_SetConfig+0x7a>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004324:	d013      	beq.n	800434e <TIM_Base_SetConfig+0x7a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <TIM_Base_SetConfig+0xec>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00f      	beq.n	800434e <TIM_Base_SetConfig+0x7a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a24      	ldr	r2, [pc, #144]	; (80043c4 <TIM_Base_SetConfig+0xf0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00b      	beq.n	800434e <TIM_Base_SetConfig+0x7a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <TIM_Base_SetConfig+0xf4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <TIM_Base_SetConfig+0x7a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a22      	ldr	r2, [pc, #136]	; (80043cc <TIM_Base_SetConfig+0xf8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_Base_SetConfig+0x7a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a21      	ldr	r2, [pc, #132]	; (80043d0 <TIM_Base_SetConfig+0xfc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d108      	bne.n	8004360 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a0d      	ldr	r2, [pc, #52]	; (80043bc <TIM_Base_SetConfig+0xe8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00b      	beq.n	80043a4 <TIM_Base_SetConfig+0xd0>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a0e      	ldr	r2, [pc, #56]	; (80043c8 <TIM_Base_SetConfig+0xf4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d007      	beq.n	80043a4 <TIM_Base_SetConfig+0xd0>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a0d      	ldr	r2, [pc, #52]	; (80043cc <TIM_Base_SetConfig+0xf8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d003      	beq.n	80043a4 <TIM_Base_SetConfig+0xd0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a0c      	ldr	r2, [pc, #48]	; (80043d0 <TIM_Base_SetConfig+0xfc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d103      	bne.n	80043ac <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	615a      	str	r2, [r3, #20]
}
 80043b2:	bf00      	nop
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800
 80043c8:	40014000 	.word	0x40014000
 80043cc:	40014400 	.word	0x40014400
 80043d0:	40014800 	.word	0x40014800

080043d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f023 0201 	bic.w	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0303 	bic.w	r3, r3, #3
 800440a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f023 0302 	bic.w	r3, r3, #2
 800441c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a28      	ldr	r2, [pc, #160]	; (80044cc <TIM_OC1_SetConfig+0xf8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00b      	beq.n	8004448 <TIM_OC1_SetConfig+0x74>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a27      	ldr	r2, [pc, #156]	; (80044d0 <TIM_OC1_SetConfig+0xfc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <TIM_OC1_SetConfig+0x74>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a26      	ldr	r2, [pc, #152]	; (80044d4 <TIM_OC1_SetConfig+0x100>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_OC1_SetConfig+0x74>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a25      	ldr	r2, [pc, #148]	; (80044d8 <TIM_OC1_SetConfig+0x104>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d10c      	bne.n	8004462 <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f023 0308 	bic.w	r3, r3, #8
 800444e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f023 0304 	bic.w	r3, r3, #4
 8004460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a19      	ldr	r2, [pc, #100]	; (80044cc <TIM_OC1_SetConfig+0xf8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00b      	beq.n	8004482 <TIM_OC1_SetConfig+0xae>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a18      	ldr	r2, [pc, #96]	; (80044d0 <TIM_OC1_SetConfig+0xfc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d007      	beq.n	8004482 <TIM_OC1_SetConfig+0xae>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a17      	ldr	r2, [pc, #92]	; (80044d4 <TIM_OC1_SetConfig+0x100>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d003      	beq.n	8004482 <TIM_OC1_SetConfig+0xae>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a16      	ldr	r2, [pc, #88]	; (80044d8 <TIM_OC1_SetConfig+0x104>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d111      	bne.n	80044a6 <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	621a      	str	r2, [r3, #32]
}
 80044c0:	bf00      	nop
 80044c2:	371c      	adds	r7, #28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40014400 	.word	0x40014400
 80044d8:	40014800 	.word	0x40014800

080044dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f023 0210 	bic.w	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800450a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	021b      	lsls	r3, r3, #8
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4313      	orrs	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f023 0320 	bic.w	r3, r3, #32
 8004526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	011b      	lsls	r3, r3, #4
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a23      	ldr	r2, [pc, #140]	; (80045c4 <TIM_OC2_SetConfig+0xe8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d10d      	bne.n	8004558 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004556:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a1a      	ldr	r2, [pc, #104]	; (80045c4 <TIM_OC2_SetConfig+0xe8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00b      	beq.n	8004578 <TIM_OC2_SetConfig+0x9c>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <TIM_OC2_SetConfig+0xec>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <TIM_OC2_SetConfig+0x9c>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a18      	ldr	r2, [pc, #96]	; (80045cc <TIM_OC2_SetConfig+0xf0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_OC2_SetConfig+0x9c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a17      	ldr	r2, [pc, #92]	; (80045d0 <TIM_OC2_SetConfig+0xf4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d113      	bne.n	80045a0 <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800457e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	bc80      	pop	{r7}
 80045c2:	4770      	bx	lr
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800

080045d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0303 	bic.w	r3, r3, #3
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800461c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a23      	ldr	r2, [pc, #140]	; (80046bc <TIM_OC3_SetConfig+0xe8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10d      	bne.n	800464e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004638:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800464c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1a      	ldr	r2, [pc, #104]	; (80046bc <TIM_OC3_SetConfig+0xe8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00b      	beq.n	800466e <TIM_OC3_SetConfig+0x9a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <TIM_OC3_SetConfig+0xec>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <TIM_OC3_SetConfig+0x9a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <TIM_OC3_SetConfig+0xf0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_OC3_SetConfig+0x9a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a17      	ldr	r2, [pc, #92]	; (80046c8 <TIM_OC3_SetConfig+0xf4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d113      	bne.n	8004696 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	693a      	ldr	r2, [r7, #16]
 8004686:	4313      	orrs	r3, r2
 8004688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	621a      	str	r2, [r3, #32]
}
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40014400 	.word	0x40014400
 80046c8:	40014800 	.word	0x40014800

080046cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	031b      	lsls	r3, r3, #12
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a15      	ldr	r2, [pc, #84]	; (800477c <TIM_OC4_SetConfig+0xb0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00b      	beq.n	8004744 <TIM_OC4_SetConfig+0x78>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a14      	ldr	r2, [pc, #80]	; (8004780 <TIM_OC4_SetConfig+0xb4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d007      	beq.n	8004744 <TIM_OC4_SetConfig+0x78>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a13      	ldr	r2, [pc, #76]	; (8004784 <TIM_OC4_SetConfig+0xb8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d003      	beq.n	8004744 <TIM_OC4_SetConfig+0x78>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a12      	ldr	r2, [pc, #72]	; (8004788 <TIM_OC4_SetConfig+0xbc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d109      	bne.n	8004758 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800474a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	019b      	lsls	r3, r3, #6
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	bc80      	pop	{r7}
 800477a:	4770      	bx	lr
 800477c:	40012c00 	.word	0x40012c00
 8004780:	40014000 	.word	0x40014000
 8004784:	40014400 	.word	0x40014400
 8004788:	40014800 	.word	0x40014800

0800478c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0201 	bic.w	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f023 030a 	bic.w	r3, r3, #10
 80047c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	bf00      	nop
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr

080047e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f023 0210 	bic.w	r2, r3, #16
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004812:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	031b      	lsls	r3, r3, #12
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	4313      	orrs	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004824:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	4313      	orrs	r3, r2
 800482e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	621a      	str	r2, [r3, #32]
}
 800483c:	bf00      	nop
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	f043 0307 	orr.w	r3, r3, #7
 8004868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	609a      	str	r2, [r3, #8]
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	bc80      	pop	{r7}
 8004878:	4770      	bx	lr

0800487a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800487a:	b480      	push	{r7}
 800487c:	b087      	sub	sp, #28
 800487e:	af00      	add	r7, sp, #0
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	607a      	str	r2, [r7, #4]
 8004886:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004894:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	021a      	lsls	r2, r3, #8
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	431a      	orrs	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	609a      	str	r2, [r3, #8]
}
 80048ae:	bf00      	nop
 80048b0:	371c      	adds	r7, #28
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	2201      	movs	r2, #1
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1a      	ldr	r2, [r3, #32]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	43db      	mvns	r3, r3
 80048da:	401a      	ands	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a1a      	ldr	r2, [r3, #32]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 031f 	and.w	r3, r3, #31
 80048ea:	6879      	ldr	r1, [r7, #4]
 80048ec:	fa01 f303 	lsl.w	r3, r1, r3
 80048f0:	431a      	orrs	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr

08004900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004914:	2302      	movs	r3, #2
 8004916:	e032      	b.n	800497e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004950:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	4313      	orrs	r3, r2
 800495a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049a0:	2302      	movs	r3, #2
 80049a2:	e03d      	b.n	8004a20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3714      	adds	r7, #20
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr
	...

08004a2c <ADC_DMA_degerOkuma>:
extern uint16_t deger[5];
extern int potDeger;

char keyYer[14];

void ADC_DMA_degerOkuma() {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, deger, 5);
 8004a30:	2205      	movs	r2, #5
 8004a32:	4906      	ldr	r1, [pc, #24]	; (8004a4c <ADC_DMA_degerOkuma+0x20>)
 8004a34:	4806      	ldr	r0, [pc, #24]	; (8004a50 <ADC_DMA_degerOkuma+0x24>)
 8004a36:	f7fc fa59 	bl	8000eec <HAL_ADC_Start_DMA>
	HAL_ADC_ConvHalfCpltCallback(&hadc1);
 8004a3a:	4805      	ldr	r0, [pc, #20]	; (8004a50 <ADC_DMA_degerOkuma+0x24>)
 8004a3c:	f7fc fb3e 	bl	80010bc <HAL_ADC_ConvHalfCpltCallback>
	HAL_ADC_Stop_DMA(&hadc1);
 8004a40:	4803      	ldr	r0, [pc, #12]	; (8004a50 <ADC_DMA_degerOkuma+0x24>)
 8004a42:	f7fc faed 	bl	8001020 <HAL_ADC_Stop_DMA>
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	2000085c 	.word	0x2000085c
 8004a50:	2000082c 	.word	0x2000082c

08004a54 <pilGoster>:

void pilGoster() {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
	int pilDeger = (deger[0]>>6);
 8004a5a:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <pilGoster+0x30>)
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	099b      	lsrs	r3, r3, #6
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	607b      	str	r3, [r7, #4]

	OLED_SetCursor(111, 0);
 8004a64:	2100      	movs	r1, #0
 8004a66:	206f      	movs	r0, #111	; 0x6f
 8004a68:	f000 fb8c 	bl	8005184 <OLED_SetCursor>
	OLED_WriteChar((pilDeger), Font_16x6, White);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	b2d8      	uxtb	r0, r3
 8004a70:	4a05      	ldr	r2, [pc, #20]	; (8004a88 <pilGoster+0x34>)
 8004a72:	2301      	movs	r3, #1
 8004a74:	ca06      	ldmia	r2, {r1, r2}
 8004a76:	f000 fadf 	bl	8005038 <OLED_WriteChar>
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	2000085c 	.word	0x2000085c
 8004a88:	20000024 	.word	0x20000024

08004a8c <OLED_WriteCommand>:

//
//  Send a byte to the command register
//
void OLED_WriteCommand(uint8_t command)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af04      	add	r7, sp, #16
 8004a92:	4603      	mov	r3, r0
 8004a94:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,&command,1,10);
 8004a96:	230a      	movs	r3, #10
 8004a98:	9302      	str	r3, [sp, #8]
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	1dfb      	adds	r3, r7, #7
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2178      	movs	r1, #120	; 0x78
 8004aa8:	4803      	ldr	r0, [pc, #12]	; (8004ab8 <OLED_WriteCommand+0x2c>)
 8004aaa:	f7fd fb0d 	bl	80020c8 <HAL_I2C_Mem_Write>
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000698 	.word	0x20000698

08004abc <OLED_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void OLED_UpdateScreen(void)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af04      	add	r7, sp, #16
//	extern DMA_HandleTypeDef hdma_i2c1_tx;
	uint8_t i;
	uint8_t buffComd[3];
	uint8_t *buffComdPtr;
	buffComd[1]=0x00;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	717b      	strb	r3, [r7, #5]
	buffComd[2]=0x10;
 8004ac6:	2310      	movs	r3, #16
 8004ac8:	71bb      	strb	r3, [r7, #6]

	buffComdPtr=&buffComd[0];
 8004aca:	1d3b      	adds	r3, r7, #4
 8004acc:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < 8; i++) {
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73fb      	strb	r3, [r7, #15]
 8004ad2:	e021      	b.n	8004b18 <OLED_UpdateScreen+0x5c>

		buffComd[0]=(0xB0+i);
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	3b50      	subs	r3, #80	; 0x50
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	713b      	strb	r3, [r7, #4]

		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x00,1,buffComdPtr,3,20);
 8004adc:	2314      	movs	r3, #20
 8004ade:	9302      	str	r3, [sp, #8]
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	9301      	str	r3, [sp, #4]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	2301      	movs	r3, #1
 8004aea:	2200      	movs	r2, #0
 8004aec:	2178      	movs	r1, #120	; 0x78
 8004aee:	480e      	ldr	r0, [pc, #56]	; (8004b28 <OLED_UpdateScreen+0x6c>)
 8004af0:	f7fd faea 	bl	80020c8 <HAL_I2C_Mem_Write>

//		HAL_I2C_Master_Transmit_DMA(&hdma_i2c1_tx, OLED_I2C_ADDR, &buffComd_ptr,4);



		HAL_I2C_Mem_Write(&hi2c1,OLED_I2C_ADDR,0x40,1,&OLED_Buffer[OLED_WIDTH*i],OLED_WIDTH,20);
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	01db      	lsls	r3, r3, #7
 8004af8:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <OLED_UpdateScreen+0x70>)
 8004afa:	4413      	add	r3, r2
 8004afc:	2214      	movs	r2, #20
 8004afe:	9202      	str	r2, [sp, #8]
 8004b00:	2280      	movs	r2, #128	; 0x80
 8004b02:	9201      	str	r2, [sp, #4]
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	2301      	movs	r3, #1
 8004b08:	2240      	movs	r2, #64	; 0x40
 8004b0a:	2178      	movs	r1, #120	; 0x78
 8004b0c:	4806      	ldr	r0, [pc, #24]	; (8004b28 <OLED_UpdateScreen+0x6c>)
 8004b0e:	f7fd fadb 	bl	80020c8 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	3301      	adds	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b07      	cmp	r3, #7
 8004b1c:	d9da      	bls.n	8004ad4 <OLED_UpdateScreen+0x18>

//		HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
//		HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)

	}
}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000698 	.word	0x20000698
 8004b2c:	200001e8 	.word	0x200001e8

08004b30 <OLED_Init>:

//
//	Initialize the oled screen
//
uint8_t OLED_Init(void)
{	
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8004b34:	2064      	movs	r0, #100	; 0x64
 8004b36:	f7fc f8df 	bl	8000cf8 <HAL_Delay>
	
	/* Init LCD */
	OLED_WriteCommand(0xAE); //display off
 8004b3a:	20ae      	movs	r0, #174	; 0xae
 8004b3c:	f7ff ffa6 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x20); //Set Memory Addressing Mode   
 8004b40:	2020      	movs	r0, #32
 8004b42:	f7ff ffa3 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004b46:	2010      	movs	r0, #16
 8004b48:	f7ff ffa0 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004b4c:	20b0      	movs	r0, #176	; 0xb0
 8004b4e:	f7ff ff9d 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004b52:	20c8      	movs	r0, #200	; 0xc8
 8004b54:	f7ff ff9a 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x00); //---set low column address
 8004b58:	2000      	movs	r0, #0
 8004b5a:	f7ff ff97 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x10); //---set high column address
 8004b5e:	2010      	movs	r0, #16
 8004b60:	f7ff ff94 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x40); //--set start line address
 8004b64:	2040      	movs	r0, #64	; 0x40
 8004b66:	f7ff ff91 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x81); //--set contrast control register
 8004b6a:	2081      	movs	r0, #129	; 0x81
 8004b6c:	f7ff ff8e 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xFF);
 8004b70:	20ff      	movs	r0, #255	; 0xff
 8004b72:	f7ff ff8b 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8004b76:	20a1      	movs	r0, #161	; 0xa1
 8004b78:	f7ff ff88 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xA6); //--set normal display
 8004b7c:	20a6      	movs	r0, #166	; 0xa6
 8004b7e:	f7ff ff85 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8004b82:	20a8      	movs	r0, #168	; 0xa8
 8004b84:	f7ff ff82 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x3F); //
 8004b88:	203f      	movs	r0, #63	; 0x3f
 8004b8a:	f7ff ff7f 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004b8e:	20a4      	movs	r0, #164	; 0xa4
 8004b90:	f7ff ff7c 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xD3); //-set display offset
 8004b94:	20d3      	movs	r0, #211	; 0xd3
 8004b96:	f7ff ff79 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x00); //-not offset
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	f7ff ff76 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004ba0:	20d5      	movs	r0, #213	; 0xd5
 8004ba2:	f7ff ff73 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xF0); //--set divide ratio
 8004ba6:	20f0      	movs	r0, #240	; 0xf0
 8004ba8:	f7ff ff70 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xD9); //--set pre-charge period
 8004bac:	20d9      	movs	r0, #217	; 0xd9
 8004bae:	f7ff ff6d 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x22); //
 8004bb2:	2022      	movs	r0, #34	; 0x22
 8004bb4:	f7ff ff6a 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xDA); //--set com pins hardware configuration
 8004bb8:	20da      	movs	r0, #218	; 0xda
 8004bba:	f7ff ff67 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8004bbe:	2012      	movs	r0, #18
 8004bc0:	f7ff ff64 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xDB); //--set vcomh
 8004bc4:	20db      	movs	r0, #219	; 0xdb
 8004bc6:	f7ff ff61 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x20); //0x20,0.77xVcc
 8004bca:	2020      	movs	r0, #32
 8004bcc:	f7ff ff5e 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x8D); //--set DC-DC enable
 8004bd0:	208d      	movs	r0, #141	; 0x8d
 8004bd2:	f7ff ff5b 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0x14); //
 8004bd6:	2014      	movs	r0, #20
 8004bd8:	f7ff ff58 	bl	8004a8c <OLED_WriteCommand>
	OLED_WriteCommand(0xAF); //--turn on SSD1306 panel
 8004bdc:	20af      	movs	r0, #175	; 0xaf
 8004bde:	f7ff ff55 	bl	8004a8c <OLED_WriteCommand>
	
	displayDurum=true;
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <OLED_Init+0xdc>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	701a      	strb	r2, [r3, #0]
	// Clear screen
	OLED1_Fill(Black);
 8004be8:	2000      	movs	r0, #0
 8004bea:	f000 f82b 	bl	8004c44 <OLED1_Fill>
	
	// Flush buffer to screen
	OLED_UpdateScreen();
 8004bee:	f7ff ff65 	bl	8004abc <OLED_UpdateScreen>
	
	// Set default values for screen object
	OLED.CurrentX = 0;
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <OLED_Init+0xe0>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <OLED_Init+0xe0>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	805a      	strh	r2, [r3, #2]
	
	OLED.Initialized = 1;
 8004bfe:	4b04      	ldr	r3, [pc, #16]	; (8004c10 <OLED_Init+0xe0>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	715a      	strb	r2, [r3, #5]
	
	return 1;
 8004c04:	2301      	movs	r3, #1
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000748 	.word	0x20000748
 8004c10:	200001e0 	.word	0x200001e0

08004c14 <OLED_Fill>:

//
//  Fill the whole screen with the given color
//
void OLED_Fill(OLED_COLOR color) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(OLED_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(OLED_Buffer));
 8004c1e:	79fb      	ldrb	r3, [r7, #7]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <OLED_Fill+0x14>
 8004c24:	2300      	movs	r3, #0
 8004c26:	e000      	b.n	8004c2a <OLED_Fill+0x16>
 8004c28:	23ff      	movs	r3, #255	; 0xff
 8004c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4803      	ldr	r0, [pc, #12]	; (8004c40 <OLED_Fill+0x2c>)
 8004c32:	f002 f88f 	bl	8006d54 <memset>
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	200001e8 	.word	0x200001e8

08004c44 <OLED1_Fill>:

void OLED1_Fill(OLED_COLOR color)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(OLED_Buffer); i++)
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e00d      	b.n	8004c70 <OLED1_Fill+0x2c>
	{
		OLED_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <OLED1_Fill+0x1a>
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	e000      	b.n	8004c60 <OLED1_Fill+0x1c>
 8004c5e:	21ff      	movs	r1, #255	; 0xff
 8004c60:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <OLED1_Fill+0x40>)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4413      	add	r3, r2
 8004c66:	460a      	mov	r2, r1
 8004c68:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(OLED_Buffer); i++)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c76:	d3ed      	bcc.n	8004c54 <OLED1_Fill+0x10>
	}
}
 8004c78:	bf00      	nop
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	200001e8 	.word	0x200001e8

08004c88 <OLED_GotoXY>:
	for (i = 0; i < sizeof(OLED_Buffer); i++) {
		OLED_Buffer[i] = ~OLED_Buffer[i];
	}
}

void OLED_GotoXY(uint16_t x, uint16_t y) {
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	4603      	mov	r3, r0
 8004c90:	460a      	mov	r2, r1
 8004c92:	80fb      	strh	r3, [r7, #6]
 8004c94:	4613      	mov	r3, r2
 8004c96:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	OLED.CurrentX = x;
 8004c98:	4a05      	ldr	r2, [pc, #20]	; (8004cb0 <OLED_GotoXY+0x28>)
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	8013      	strh	r3, [r2, #0]
	OLED.CurrentY = y;
 8004c9e:	4a04      	ldr	r2, [pc, #16]	; (8004cb0 <OLED_GotoXY+0x28>)
 8004ca0:	88bb      	ldrh	r3, [r7, #4]
 8004ca2:	8053      	strh	r3, [r2, #2]
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	200001e0 	.word	0x200001e0

08004cb4 <OLED_DrawLine>:

void OLED_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, OLED_COLOR c) {
 8004cb4:	b590      	push	{r4, r7, lr}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4623      	mov	r3, r4
 8004cc4:	80fb      	strh	r3, [r7, #6]
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	80bb      	strh	r3, [r7, #4]
 8004cca:	460b      	mov	r3, r1
 8004ccc:	807b      	strh	r3, [r7, #2]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	/* Check for overflow */
	if (x0 >= OLED_WIDTH) {
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004cd6:	d901      	bls.n	8004cdc <OLED_DrawLine+0x28>
		x0 = OLED_WIDTH - 1;
 8004cd8:	237f      	movs	r3, #127	; 0x7f
 8004cda:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= OLED_WIDTH) {
 8004cdc:	887b      	ldrh	r3, [r7, #2]
 8004cde:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce0:	d901      	bls.n	8004ce6 <OLED_DrawLine+0x32>
		x1 = OLED_WIDTH - 1;
 8004ce2:	237f      	movs	r3, #127	; 0x7f
 8004ce4:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= OLED_HEIGHT) {
 8004ce6:	88bb      	ldrh	r3, [r7, #4]
 8004ce8:	2b3f      	cmp	r3, #63	; 0x3f
 8004cea:	d901      	bls.n	8004cf0 <OLED_DrawLine+0x3c>
		y0 = OLED_HEIGHT - 1;
 8004cec:	233f      	movs	r3, #63	; 0x3f
 8004cee:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= OLED_HEIGHT) {
 8004cf0:	883b      	ldrh	r3, [r7, #0]
 8004cf2:	2b3f      	cmp	r3, #63	; 0x3f
 8004cf4:	d901      	bls.n	8004cfa <OLED_DrawLine+0x46>
		y1 = OLED_HEIGHT - 1;
 8004cf6:	233f      	movs	r3, #63	; 0x3f
 8004cf8:	803b      	strh	r3, [r7, #0]
	}

	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 8004cfa:	88fa      	ldrh	r2, [r7, #6]
 8004cfc:	887b      	ldrh	r3, [r7, #2]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d205      	bcs.n	8004d0e <OLED_DrawLine+0x5a>
 8004d02:	887a      	ldrh	r2, [r7, #2]
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	b21b      	sxth	r3, r3
 8004d0c:	e004      	b.n	8004d18 <OLED_DrawLine+0x64>
 8004d0e:	88fa      	ldrh	r2, [r7, #6]
 8004d10:	887b      	ldrh	r3, [r7, #2]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	b21b      	sxth	r3, r3
 8004d18:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 8004d1a:	88ba      	ldrh	r2, [r7, #4]
 8004d1c:	883b      	ldrh	r3, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d205      	bcs.n	8004d2e <OLED_DrawLine+0x7a>
 8004d22:	883a      	ldrh	r2, [r7, #0]
 8004d24:	88bb      	ldrh	r3, [r7, #4]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	b21b      	sxth	r3, r3
 8004d2c:	e004      	b.n	8004d38 <OLED_DrawLine+0x84>
 8004d2e:	88ba      	ldrh	r2, [r7, #4]
 8004d30:	883b      	ldrh	r3, [r7, #0]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	b21b      	sxth	r3, r3
 8004d38:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 8004d3a:	88fa      	ldrh	r2, [r7, #6]
 8004d3c:	887b      	ldrh	r3, [r7, #2]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d201      	bcs.n	8004d46 <OLED_DrawLine+0x92>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e001      	b.n	8004d4a <OLED_DrawLine+0x96>
 8004d46:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4a:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 8004d4c:	88ba      	ldrh	r2, [r7, #4]
 8004d4e:	883b      	ldrh	r3, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d201      	bcs.n	8004d58 <OLED_DrawLine+0xa4>
 8004d54:	2301      	movs	r3, #1
 8004d56:	e001      	b.n	8004d5c <OLED_DrawLine+0xa8>
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5c:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8004d5e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004d62:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	dd06      	ble.n	8004d78 <OLED_DrawLine+0xc4>
 8004d6a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d6e:	0fda      	lsrs	r2, r3, #31
 8004d70:	4413      	add	r3, r2
 8004d72:	105b      	asrs	r3, r3, #1
 8004d74:	b21b      	sxth	r3, r3
 8004d76:	e006      	b.n	8004d86 <OLED_DrawLine+0xd2>
 8004d78:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d7c:	425b      	negs	r3, r3
 8004d7e:	0fda      	lsrs	r2, r3, #31
 8004d80:	4413      	add	r3, r2
 8004d82:	105b      	asrs	r3, r3, #1
 8004d84:	b21b      	sxth	r3, r3
 8004d86:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8004d88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d12b      	bne.n	8004de8 <OLED_DrawLine+0x134>
		if (y1 < y0) {
 8004d90:	883a      	ldrh	r2, [r7, #0]
 8004d92:	88bb      	ldrh	r3, [r7, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d205      	bcs.n	8004da4 <OLED_DrawLine+0xf0>
			tmp = y1;
 8004d98:	883b      	ldrh	r3, [r7, #0]
 8004d9a:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8004d9c:	88bb      	ldrh	r3, [r7, #4]
 8004d9e:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8004da0:	893b      	ldrh	r3, [r7, #8]
 8004da2:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8004da4:	887a      	ldrh	r2, [r7, #2]
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d205      	bcs.n	8004db8 <OLED_DrawLine+0x104>
			tmp = x1;
 8004dac:	887b      	ldrh	r3, [r7, #2]
 8004dae:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8004db0:	88fb      	ldrh	r3, [r7, #6]
 8004db2:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8004db4:	893b      	ldrh	r3, [r7, #8]
 8004db6:	80fb      	strh	r3, [r7, #6]
		}

		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8004db8:	88bb      	ldrh	r3, [r7, #4]
 8004dba:	82bb      	strh	r3, [r7, #20]
 8004dbc:	e00e      	b.n	8004ddc <OLED_DrawLine+0x128>
			OLED_DrawPixel(x0, i, c);
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	8aba      	ldrh	r2, [r7, #20]
 8004dc4:	b2d1      	uxtb	r1, r2
 8004dc6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 f874 	bl	8004eb8 <OLED_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8004dd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	82bb      	strh	r3, [r7, #20]
 8004ddc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004de0:	883b      	ldrh	r3, [r7, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	ddeb      	ble.n	8004dbe <OLED_DrawLine+0x10a>
		}

		/* Return from function */
		return;
 8004de6:	e063      	b.n	8004eb0 <OLED_DrawLine+0x1fc>
	}

	if (dy == 0) {
 8004de8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d12b      	bne.n	8004e48 <OLED_DrawLine+0x194>
		if (y1 < y0) {
 8004df0:	883a      	ldrh	r2, [r7, #0]
 8004df2:	88bb      	ldrh	r3, [r7, #4]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d205      	bcs.n	8004e04 <OLED_DrawLine+0x150>
			tmp = y1;
 8004df8:	883b      	ldrh	r3, [r7, #0]
 8004dfa:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8004dfc:	88bb      	ldrh	r3, [r7, #4]
 8004dfe:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8004e00:	893b      	ldrh	r3, [r7, #8]
 8004e02:	80bb      	strh	r3, [r7, #4]
		}

		if (x1 < x0) {
 8004e04:	887a      	ldrh	r2, [r7, #2]
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d205      	bcs.n	8004e18 <OLED_DrawLine+0x164>
			tmp = x1;
 8004e0c:	887b      	ldrh	r3, [r7, #2]
 8004e0e:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8004e10:	88fb      	ldrh	r3, [r7, #6]
 8004e12:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8004e14:	893b      	ldrh	r3, [r7, #8]
 8004e16:	80fb      	strh	r3, [r7, #6]
		}

		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8004e18:	88fb      	ldrh	r3, [r7, #6]
 8004e1a:	82bb      	strh	r3, [r7, #20]
 8004e1c:	e00e      	b.n	8004e3c <OLED_DrawLine+0x188>
			OLED_DrawPixel(i, y0, c);
 8004e1e:	8abb      	ldrh	r3, [r7, #20]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	88ba      	ldrh	r2, [r7, #4]
 8004e24:	b2d1      	uxtb	r1, r2
 8004e26:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f844 	bl	8004eb8 <OLED_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8004e30:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3301      	adds	r3, #1
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	82bb      	strh	r3, [r7, #20]
 8004e3c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8004e40:	887b      	ldrh	r3, [r7, #2]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	ddeb      	ble.n	8004e1e <OLED_DrawLine+0x16a>
		}

		/* Return from function */
		return;
 8004e46:	e033      	b.n	8004eb0 <OLED_DrawLine+0x1fc>
	}

	while (1) {
		OLED_DrawPixel(x0, y0, c);
 8004e48:	88fb      	ldrh	r3, [r7, #6]
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	88ba      	ldrh	r2, [r7, #4]
 8004e4e:	b2d1      	uxtb	r1, r2
 8004e50:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 f82f 	bl	8004eb8 <OLED_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8004e5a:	88fa      	ldrh	r2, [r7, #6]
 8004e5c:	887b      	ldrh	r3, [r7, #2]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d103      	bne.n	8004e6a <OLED_DrawLine+0x1b6>
 8004e62:	88ba      	ldrh	r2, [r7, #4]
 8004e64:	883b      	ldrh	r3, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d021      	beq.n	8004eae <OLED_DrawLine+0x1fa>
			break;
		}
		e2 = err;
 8004e6a:	8afb      	ldrh	r3, [r7, #22]
 8004e6c:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8004e6e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004e72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004e76:	425b      	negs	r3, r3
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	dd08      	ble.n	8004e8e <OLED_DrawLine+0x1da>
			err -= dy;
 8004e7c:	8afa      	ldrh	r2, [r7, #22]
 8004e7e:	8a3b      	ldrh	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8004e86:	89fa      	ldrh	r2, [r7, #14]
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
		}
		if (e2 < dy) {
 8004e8e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004e92:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	dad6      	bge.n	8004e48 <OLED_DrawLine+0x194>
			err += dx;
 8004e9a:	8afa      	ldrh	r2, [r7, #22]
 8004e9c:	8a7b      	ldrh	r3, [r7, #18]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8004ea4:	89ba      	ldrh	r2, [r7, #12]
 8004ea6:	88bb      	ldrh	r3, [r7, #4]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	80bb      	strh	r3, [r7, #4]
		OLED_DrawPixel(x0, y0, c);
 8004eac:	e7cc      	b.n	8004e48 <OLED_DrawLine+0x194>
			break;
 8004eae:	bf00      	nop
		}
	}
}
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd90      	pop	{r4, r7, pc}
	...

08004eb8 <OLED_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//

void OLED_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color) {
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	71fb      	strb	r3, [r7, #7]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	71bb      	strb	r3, [r7, #6]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	717b      	strb	r3, [r7, #5]
	if (
		x >= OLED_WIDTH ||
 8004eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
	if (
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	db48      	blt.n	8004f64 <OLED_DrawPixel+0xac>
		x >= OLED_WIDTH ||
 8004ed2:	79bb      	ldrb	r3, [r7, #6]
 8004ed4:	2b3f      	cmp	r3, #63	; 0x3f
 8004ed6:	d845      	bhi.n	8004f64 <OLED_DrawPixel+0xac>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (OLED.Inverted) {
 8004ed8:	4b25      	ldr	r3, [pc, #148]	; (8004f70 <OLED_DrawPixel+0xb8>)
 8004eda:	791b      	ldrb	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d006      	beq.n	8004eee <OLED_DrawPixel+0x36>
		color = (OLED_COLOR)!color;
 8004ee0:	797b      	ldrb	r3, [r7, #5]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bf0c      	ite	eq
 8004ee6:	2301      	moveq	r3, #1
 8004ee8:	2300      	movne	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	717b      	strb	r3, [r7, #5]
	}

	/* Set color */
	if (color == White) {
 8004eee:	797b      	ldrb	r3, [r7, #5]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d11a      	bne.n	8004f2a <OLED_DrawPixel+0x72>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 8004ef4:	79fa      	ldrb	r2, [r7, #7]
 8004ef6:	79bb      	ldrb	r3, [r7, #6]
 8004ef8:	08db      	lsrs	r3, r3, #3
 8004efa:	b2d8      	uxtb	r0, r3
 8004efc:	4603      	mov	r3, r0
 8004efe:	01db      	lsls	r3, r3, #7
 8004f00:	4413      	add	r3, r2
 8004f02:	4a1c      	ldr	r2, [pc, #112]	; (8004f74 <OLED_DrawPixel+0xbc>)
 8004f04:	5cd3      	ldrb	r3, [r2, r3]
 8004f06:	b25a      	sxtb	r2, r3
 8004f08:	79bb      	ldrb	r3, [r7, #6]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	2101      	movs	r1, #1
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	b25b      	sxtb	r3, r3
 8004f16:	4313      	orrs	r3, r2
 8004f18:	b259      	sxtb	r1, r3
 8004f1a:	79fa      	ldrb	r2, [r7, #7]
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	01db      	lsls	r3, r3, #7
 8004f20:	4413      	add	r3, r2
 8004f22:	b2c9      	uxtb	r1, r1
 8004f24:	4a13      	ldr	r2, [pc, #76]	; (8004f74 <OLED_DrawPixel+0xbc>)
 8004f26:	54d1      	strb	r1, [r2, r3]
 8004f28:	e01d      	b.n	8004f66 <OLED_DrawPixel+0xae>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8004f2a:	79fa      	ldrb	r2, [r7, #7]
 8004f2c:	79bb      	ldrb	r3, [r7, #6]
 8004f2e:	08db      	lsrs	r3, r3, #3
 8004f30:	b2d8      	uxtb	r0, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	01db      	lsls	r3, r3, #7
 8004f36:	4413      	add	r3, r2
 8004f38:	4a0e      	ldr	r2, [pc, #56]	; (8004f74 <OLED_DrawPixel+0xbc>)
 8004f3a:	5cd3      	ldrb	r3, [r2, r3]
 8004f3c:	b25a      	sxtb	r2, r3
 8004f3e:	79bb      	ldrb	r3, [r7, #6]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	2101      	movs	r1, #1
 8004f46:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4a:	b25b      	sxtb	r3, r3
 8004f4c:	43db      	mvns	r3, r3
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	4013      	ands	r3, r2
 8004f52:	b259      	sxtb	r1, r3
 8004f54:	79fa      	ldrb	r2, [r7, #7]
 8004f56:	4603      	mov	r3, r0
 8004f58:	01db      	lsls	r3, r3, #7
 8004f5a:	4413      	add	r3, r2
 8004f5c:	b2c9      	uxtb	r1, r1
 8004f5e:	4a05      	ldr	r2, [pc, #20]	; (8004f74 <OLED_DrawPixel+0xbc>)
 8004f60:	54d1      	strb	r1, [r2, r3]
 8004f62:	e000      	b.n	8004f66 <OLED_DrawPixel+0xae>
		return;
 8004f64:	bf00      	nop
	}
}
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	200001e0 	.word	0x200001e0
 8004f74:	200001e8 	.word	0x200001e8

08004f78 <OLED1_DrawPixel>:


void OLED1_DrawPixel(uint8_t x, uint8_t y, OLED_COLOR color)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
 8004f82:	460b      	mov	r3, r1
 8004f84:	71bb      	strb	r3, [r7, #6]
 8004f86:	4613      	mov	r3, r2
 8004f88:	717b      	strb	r3, [r7, #5]
	if (x >= OLED_WIDTH || y >= OLED_HEIGHT) 
 8004f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	db48      	blt.n	8005024 <OLED1_DrawPixel+0xac>
 8004f92:	79bb      	ldrb	r3, [r7, #6]
 8004f94:	2b3f      	cmp	r3, #63	; 0x3f
 8004f96:	d845      	bhi.n	8005024 <OLED1_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (OLED.Inverted) 
 8004f98:	4b25      	ldr	r3, [pc, #148]	; (8005030 <OLED1_DrawPixel+0xb8>)
 8004f9a:	791b      	ldrb	r3, [r3, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d006      	beq.n	8004fae <OLED1_DrawPixel+0x36>
	{
		color = (OLED_COLOR)!color;
 8004fa0:	797b      	ldrb	r3, [r7, #5]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 8004fae:	797b      	ldrb	r3, [r7, #5]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d11a      	bne.n	8004fea <OLED1_DrawPixel+0x72>
	{
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 8004fb4:	79fa      	ldrb	r2, [r7, #7]
 8004fb6:	79bb      	ldrb	r3, [r7, #6]
 8004fb8:	08db      	lsrs	r3, r3, #3
 8004fba:	b2d8      	uxtb	r0, r3
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	01db      	lsls	r3, r3, #7
 8004fc0:	4413      	add	r3, r2
 8004fc2:	4a1c      	ldr	r2, [pc, #112]	; (8005034 <OLED1_DrawPixel+0xbc>)
 8004fc4:	5cd3      	ldrb	r3, [r2, r3]
 8004fc6:	b25a      	sxtb	r2, r3
 8004fc8:	79bb      	ldrb	r3, [r7, #6]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	2101      	movs	r1, #1
 8004fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd4:	b25b      	sxtb	r3, r3
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	b259      	sxtb	r1, r3
 8004fda:	79fa      	ldrb	r2, [r7, #7]
 8004fdc:	4603      	mov	r3, r0
 8004fde:	01db      	lsls	r3, r3, #7
 8004fe0:	4413      	add	r3, r2
 8004fe2:	b2c9      	uxtb	r1, r1
 8004fe4:	4a13      	ldr	r2, [pc, #76]	; (8005034 <OLED1_DrawPixel+0xbc>)
 8004fe6:	54d1      	strb	r1, [r2, r3]
 8004fe8:	e01d      	b.n	8005026 <OLED1_DrawPixel+0xae>
	} 
	else 
	{
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8004fea:	79fa      	ldrb	r2, [r7, #7]
 8004fec:	79bb      	ldrb	r3, [r7, #6]
 8004fee:	08db      	lsrs	r3, r3, #3
 8004ff0:	b2d8      	uxtb	r0, r3
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	01db      	lsls	r3, r3, #7
 8004ff6:	4413      	add	r3, r2
 8004ff8:	4a0e      	ldr	r2, [pc, #56]	; (8005034 <OLED1_DrawPixel+0xbc>)
 8004ffa:	5cd3      	ldrb	r3, [r2, r3]
 8004ffc:	b25a      	sxtb	r2, r3
 8004ffe:	79bb      	ldrb	r3, [r7, #6]
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	2101      	movs	r1, #1
 8005006:	fa01 f303 	lsl.w	r3, r1, r3
 800500a:	b25b      	sxtb	r3, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	b25b      	sxtb	r3, r3
 8005010:	4013      	ands	r3, r2
 8005012:	b259      	sxtb	r1, r3
 8005014:	79fa      	ldrb	r2, [r7, #7]
 8005016:	4603      	mov	r3, r0
 8005018:	01db      	lsls	r3, r3, #7
 800501a:	4413      	add	r3, r2
 800501c:	b2c9      	uxtb	r1, r1
 800501e:	4a05      	ldr	r2, [pc, #20]	; (8005034 <OLED1_DrawPixel+0xbc>)
 8005020:	54d1      	strb	r1, [r2, r3]
 8005022:	e000      	b.n	8005026 <OLED1_DrawPixel+0xae>
		return;
 8005024:	bf00      	nop
	}
}
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	bc80      	pop	{r7}
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	200001e0 	.word	0x200001e0
 8005034:	200001e8 	.word	0x200001e8

08005038 <OLED_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char OLED_WriteChar(char ch, FontDef Font, OLED_COLOR color)
{
 8005038:	b590      	push	{r4, r7, lr}
 800503a:	b089      	sub	sp, #36	; 0x24
 800503c:	af00      	add	r7, sp, #0
 800503e:	4604      	mov	r4, r0
 8005040:	1d38      	adds	r0, r7, #4
 8005042:	e880 0006 	stmia.w	r0, {r1, r2}
 8005046:	461a      	mov	r2, r3
 8005048:	4623      	mov	r3, r4
 800504a:	73fb      	strb	r3, [r7, #15]
 800504c:	4613      	mov	r3, r2
 800504e:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8005050:	4b38      	ldr	r3, [pc, #224]	; (8005134 <OLED_WriteChar+0xfc>)
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	793b      	ldrb	r3, [r7, #4]
 8005058:	4413      	add	r3, r2
 800505a:	2b7f      	cmp	r3, #127	; 0x7f
 800505c:	dc06      	bgt.n	800506c <OLED_WriteChar+0x34>
		OLED_HEIGHT <= (OLED.CurrentY + Font.FontHeight))
 800505e:	4b35      	ldr	r3, [pc, #212]	; (8005134 <OLED_WriteChar+0xfc>)
 8005060:	885b      	ldrh	r3, [r3, #2]
 8005062:	461a      	mov	r2, r3
 8005064:	797b      	ldrb	r3, [r7, #5]
 8005066:	4413      	add	r3, r2
	if (OLED_WIDTH <= (OLED.CurrentX + Font.FontWidth) ||
 8005068:	2b3f      	cmp	r3, #63	; 0x3f
 800506a:	dd01      	ble.n	8005070 <OLED_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 800506c:	2300      	movs	r3, #0
 800506e:	e05d      	b.n	800512c <OLED_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	e04c      	b.n	8005110 <OLED_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	3b20      	subs	r3, #32
 800507c:	7979      	ldrb	r1, [r7, #5]
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	4619      	mov	r1, r3
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	440b      	add	r3, r1
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4413      	add	r3, r2
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8005090:	2300      	movs	r3, #0
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	e034      	b.n	8005100 <OLED_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d012      	beq.n	80050cc <OLED_WriteChar+0x94>
			{
				OLED1_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR) color);
 80050a6:	4b23      	ldr	r3, [pc, #140]	; (8005134 <OLED_WriteChar+0xfc>)
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	4413      	add	r3, r2
 80050b2:	b2d8      	uxtb	r0, r3
 80050b4:	4b1f      	ldr	r3, [pc, #124]	; (8005134 <OLED_WriteChar+0xfc>)
 80050b6:	885b      	ldrh	r3, [r3, #2]
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	4413      	add	r3, r2
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	7bba      	ldrb	r2, [r7, #14]
 80050c4:	4619      	mov	r1, r3
 80050c6:	f7ff ff57 	bl	8004f78 <OLED1_DrawPixel>
 80050ca:	e016      	b.n	80050fa <OLED_WriteChar+0xc2>
			} 
			else 
			{
				OLED1_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR)!color);
 80050cc:	4b19      	ldr	r3, [pc, #100]	; (8005134 <OLED_WriteChar+0xfc>)
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	4413      	add	r3, r2
 80050d8:	b2d8      	uxtb	r0, r3
 80050da:	4b16      	ldr	r3, [pc, #88]	; (8005134 <OLED_WriteChar+0xfc>)
 80050dc:	885b      	ldrh	r3, [r3, #2]
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	4413      	add	r3, r2
 80050e6:	b2d9      	uxtb	r1, r3
 80050e8:	7bbb      	ldrb	r3, [r7, #14]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	bf0c      	ite	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	2300      	movne	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	f7ff ff3f 	bl	8004f78 <OLED1_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	3301      	adds	r3, #1
 80050fe:	61bb      	str	r3, [r7, #24]
 8005100:	793b      	ldrb	r3, [r7, #4]
 8005102:	461a      	mov	r2, r3
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	4293      	cmp	r3, r2
 8005108:	d3c5      	bcc.n	8005096 <OLED_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	3301      	adds	r3, #1
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	797b      	ldrb	r3, [r7, #5]
 8005112:	461a      	mov	r2, r3
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4293      	cmp	r3, r2
 8005118:	d3ad      	bcc.n	8005076 <OLED_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	OLED.CurrentX += Font.FontWidth;
 800511a:	4b06      	ldr	r3, [pc, #24]	; (8005134 <OLED_WriteChar+0xfc>)
 800511c:	881a      	ldrh	r2, [r3, #0]
 800511e:	793b      	ldrb	r3, [r7, #4]
 8005120:	b29b      	uxth	r3, r3
 8005122:	4413      	add	r3, r2
 8005124:	b29a      	uxth	r2, r3
 8005126:	4b03      	ldr	r3, [pc, #12]	; (8005134 <OLED_WriteChar+0xfc>)
 8005128:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 800512a:	7bfb      	ldrb	r3, [r7, #15]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3724      	adds	r7, #36	; 0x24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd90      	pop	{r4, r7, pc}
 8005134:	200001e0 	.word	0x200001e0

08005138 <OLED_WriteString>:

//
//  Write full string to screenbuffer
//
char OLED_WriteString(char* str, FontDef Font, OLED_COLOR color)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	1d38      	adds	r0, r7, #4
 8005142:	e880 0006 	stmia.w	r0, {r1, r2}
 8005146:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 8005148:	e012      	b.n	8005170 <OLED_WriteString+0x38>
	{
		if (OLED_WriteChar(*str, Font, color) != *str)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	7818      	ldrb	r0, [r3, #0]
 800514e:	78fb      	ldrb	r3, [r7, #3]
 8005150:	1d3a      	adds	r2, r7, #4
 8005152:	ca06      	ldmia	r2, {r1, r2}
 8005154:	f7ff ff70 	bl	8005038 <OLED_WriteChar>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d002      	beq.n	800516a <OLED_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	e008      	b.n	800517c <OLED_WriteString+0x44>
		}
		
		// Next char
		str++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3301      	adds	r3, #1
 800516e:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e8      	bne.n	800514a <OLED_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	781b      	ldrb	r3, [r3, #0]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <OLED_SetCursor>:

//
//	Position the cursor
//
void OLED_SetCursor(uint8_t x, uint8_t y) 
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	4603      	mov	r3, r0
 800518c:	460a      	mov	r2, r1
 800518e:	71fb      	strb	r3, [r7, #7]
 8005190:	4613      	mov	r3, r2
 8005192:	71bb      	strb	r3, [r7, #6]
	OLED.CurrentX = x;
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	b29a      	uxth	r2, r3
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <OLED_SetCursor+0x2c>)
 800519a:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = y;
 800519c:	79bb      	ldrb	r3, [r7, #6]
 800519e:	b29a      	uxth	r2, r3
 80051a0:	4b03      	ldr	r3, [pc, #12]	; (80051b0 <OLED_SetCursor+0x2c>)
 80051a2:	805a      	strh	r2, [r3, #2]
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	200001e0 	.word	0x200001e0

080051b4 <saatAyarla>:
 *      Author: tosun_n
 */
#include "include_Ap.h"

void saatAyarla()
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_TimeTypeDef sTime;
//	sTime.TimeFormat=RTC_HOURFORMAT12_AM;
	sTime.Hours		=SaatAry[0];
 80051ba:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <saatAyarla+0x44>)
 80051bc:	f993 3000 	ldrsb.w	r3, [r3]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	713b      	strb	r3, [r7, #4]
	sTime.Minutes	=SaatAry[1];
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <saatAyarla+0x44>)
 80051c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	717b      	strb	r3, [r7, #5]
	sTime.Seconds	=SaatAry[2];
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <saatAyarla+0x44>)
 80051d0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	71bb      	strb	r3, [r7, #6]
//	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
//	sTime.StoreOperation = RTC_STOREOPERATION_RESET;

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 80051d8:	1d3b      	adds	r3, r7, #4
 80051da:	2200      	movs	r2, #0
 80051dc:	4619      	mov	r1, r3
 80051de:	4807      	ldr	r0, [pc, #28]	; (80051fc <saatAyarla+0x48>)
 80051e0:	f7fe f808 	bl	80031f4 <HAL_RTC_SetTime>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <saatAyarla+0x3a>
		Error_Handler();
 80051ea:	f7fb faf1 	bl	80007d0 <Error_Handler>
	}
//	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
//	RTC->CR &= ~(1<<6);


}
 80051ee:	bf00      	nop
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20000920 	.word	0x20000920
 80051fc:	20000924 	.word	0x20000924

08005200 <alarmAyarla>:

void alarmAyarla()
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_AlarmTypeDef sAlarm;

	sAlarm.AlarmTime.Hours=SaatAry[0];
 8005206:	4b18      	ldr	r3, [pc, #96]	; (8005268 <alarmAyarla+0x68>)
 8005208:	f993 3000 	ldrsb.w	r3, [r3]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes=SaatAry[1];
 8005210:	4b15      	ldr	r3, [pc, #84]	; (8005268 <alarmAyarla+0x68>)
 8005212:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds=SaatAry[2];
 800521a:	4b13      	ldr	r3, [pc, #76]	; (8005268 <alarmAyarla+0x68>)
 800521c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	70bb      	strb	r3, [r7, #2]

	sAlarm.Alarm = RTC_ALARM_A;
 8005224:	2300      	movs	r3, #0
 8005226:	607b      	str	r3, [r7, #4]

	  BKP->DR6=(SaatAry[0]<<8)|(SaatAry[1]);
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <alarmAyarla+0x68>)
 800522a:	f993 3000 	ldrsb.w	r3, [r3]
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	4a0d      	ldr	r2, [pc, #52]	; (8005268 <alarmAyarla+0x68>)
 8005232:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8005236:	431a      	orrs	r2, r3
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <alarmAyarla+0x6c>)
 800523a:	619a      	str	r2, [r3, #24]
	  BKP->DR7=(SaatAry[2]<<8);
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <alarmAyarla+0x68>)
 800523e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005242:	021a      	lsls	r2, r3, #8
 8005244:	4b09      	ldr	r3, [pc, #36]	; (800526c <alarmAyarla+0x6c>)
 8005246:	61da      	str	r2, [r3, #28]


	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8005248:	463b      	mov	r3, r7
 800524a:	2200      	movs	r2, #0
 800524c:	4619      	mov	r1, r3
 800524e:	4808      	ldr	r0, [pc, #32]	; (8005270 <alarmAyarla+0x70>)
 8005250:	f7fe fa4a 	bl	80036e8 <HAL_RTC_SetAlarm_IT>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <alarmAyarla+0x5e>
	  {
	    Error_Handler();
 800525a:	f7fb fab9 	bl	80007d0 <Error_Handler>
	  }
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000920 	.word	0x20000920
 800526c:	40006c00 	.word	0x40006c00
 8005270:	20000924 	.word	0x20000924

08005274 <takvimAyarla>:

void takvimAyarla()
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	  RTC_DateTypeDef DateToUpdate = {0};
 800527a:	2300      	movs	r3, #0
 800527c:	607b      	str	r3, [r7, #4]

	  DateToUpdate.Date = takvimAry[0];
 800527e:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <takvimAyarla+0x78>)
 8005280:	f993 3000 	ldrsb.w	r3, [r3]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	71bb      	strb	r3, [r7, #6]
	  DateToUpdate.Month = takvimAry[1];
 8005288:	4b18      	ldr	r3, [pc, #96]	; (80052ec <takvimAyarla+0x78>)
 800528a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	717b      	strb	r3, [r7, #5]
	  DateToUpdate.Year = takvimAry[2];
 8005292:	4b16      	ldr	r3, [pc, #88]	; (80052ec <takvimAyarla+0x78>)
 8005294:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	71fb      	strb	r3, [r7, #7]
	  DateToUpdate.WeekDay = takvimAry[3];
 800529c:	4b13      	ldr	r3, [pc, #76]	; (80052ec <takvimAyarla+0x78>)
 800529e:	f993 3003 	ldrsb.w	r3, [r3, #3]
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	713b      	strb	r3, [r7, #4]

	  BKP->DR4=(takvimAry[0]<<8)|(takvimAry[1]);
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <takvimAyarla+0x78>)
 80052a8:	f993 3000 	ldrsb.w	r3, [r3]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	4a0f      	ldr	r2, [pc, #60]	; (80052ec <takvimAyarla+0x78>)
 80052b0:	f992 2001 	ldrsb.w	r2, [r2, #1]
 80052b4:	431a      	orrs	r2, r3
 80052b6:	4b0e      	ldr	r3, [pc, #56]	; (80052f0 <takvimAyarla+0x7c>)
 80052b8:	611a      	str	r2, [r3, #16]
	  BKP->DR5=(takvimAry[2]<<8)|(takvimAry[3]);
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <takvimAyarla+0x78>)
 80052bc:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <takvimAyarla+0x78>)
 80052c4:	f992 2003 	ldrsb.w	r2, [r2, #3]
 80052c8:	431a      	orrs	r2, r3
 80052ca:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <takvimAyarla+0x7c>)
 80052cc:	615a      	str	r2, [r3, #20]

	  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	2200      	movs	r2, #0
 80052d2:	4619      	mov	r1, r3
 80052d4:	4807      	ldr	r0, [pc, #28]	; (80052f4 <takvimAyarla+0x80>)
 80052d6:	f7fe f8fd 	bl	80034d4 <HAL_RTC_SetDate>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <takvimAyarla+0x70>
	  {
	    Error_Handler();
 80052e0:	f7fb fa76 	bl	80007d0 <Error_Handler>
	  }

}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	200009bc 	.word	0x200009bc
 80052f0:	40006c00 	.word	0x40006c00
 80052f4:	20000924 	.word	0x20000924

080052f8 <saatiAyarlama>:

void saatiAyarlama(uint8_t y)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
	ayarlaPtr=&saatAyarla;
 8005302:	4b05      	ldr	r3, [pc, #20]	; (8005318 <saatiAyarlama+0x20>)
 8005304:	4a05      	ldr	r2, [pc, #20]	; (800531c <saatiAyarlama+0x24>)
 8005306:	601a      	str	r2, [r3, #0]
	saat_alarm_Ayarlama(y);
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f808 	bl	8005320 <saat_alarm_Ayarlama>
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	200009c0 	.word	0x200009c0
 800531c:	080051b5 	.word	0x080051b5

08005320 <saat_alarm_Ayarlama>:

void saat_alarm_Ayarlama(uint8_t yKonumu) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af02      	add	r7, sp, #8
 8005326:	4603      	mov	r3, r0
 8005328:	71fb      	strb	r3, [r7, #7]

char saatYer[16];
	if (durum) {
 800532a:	4b90      	ldr	r3, [pc, #576]	; (800556c <saat_alarm_Ayarlama+0x24c>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80cf 	beq.w	80054d2 <saat_alarm_Ayarlama+0x1b2>

		switch (Key) {
 8005334:	4b8e      	ldr	r3, [pc, #568]	; (8005570 <saat_alarm_Ayarlama+0x250>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2bb8      	cmp	r3, #184	; 0xb8
 800533a:	d034      	beq.n	80053a6 <saat_alarm_Ayarlama+0x86>
 800533c:	2bb8      	cmp	r3, #184	; 0xb8
 800533e:	dc02      	bgt.n	8005346 <saat_alarm_Ayarlama+0x26>
 8005340:	2b78      	cmp	r3, #120	; 0x78
 8005342:	d006      	beq.n	8005352 <saat_alarm_Ayarlama+0x32>
 8005344:	e0ce      	b.n	80054e4 <saat_alarm_Ayarlama+0x1c4>
 8005346:	2bd8      	cmp	r3, #216	; 0xd8
 8005348:	d053      	beq.n	80053f2 <saat_alarm_Ayarlama+0xd2>
 800534a:	2be8      	cmp	r3, #232	; 0xe8
 800534c:	f000 8089 	beq.w	8005462 <saat_alarm_Ayarlama+0x142>
 8005350:	e0c8      	b.n	80054e4 <saat_alarm_Ayarlama+0x1c4>
		case T3DEGER:
			durum = false;
 8005352:	4b86      	ldr	r3, [pc, #536]	; (800556c <saat_alarm_Ayarlama+0x24c>)
 8005354:	2200      	movs	r2, #0
 8005356:	701a      	strb	r2, [r3, #0]
			if(kayitOnayDurum)
 8005358:	4b86      	ldr	r3, [pc, #536]	; (8005574 <saat_alarm_Ayarlama+0x254>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00f      	beq.n	8005380 <saat_alarm_Ayarlama+0x60>
			{
				(ayarlaPtr)();
 8005360:	4b85      	ldr	r3, [pc, #532]	; (8005578 <saat_alarm_Ayarlama+0x258>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4798      	blx	r3
				displaySelectKey=MENU_SISTEMI;
 8005366:	4b85      	ldr	r3, [pc, #532]	; (800557c <saat_alarm_Ayarlama+0x25c>)
 8005368:	2238      	movs	r2, #56	; 0x38
 800536a:	701a      	strb	r2, [r3, #0]
				SaatAryNo=0;
 800536c:	4b84      	ldr	r3, [pc, #528]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]
				displayClean=true;
 8005372:	4b84      	ldr	r3, [pc, #528]	; (8005584 <saat_alarm_Ayarlama+0x264>)
 8005374:	2201      	movs	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
				kayitOnayDurum=false;
 8005378:	4b7e      	ldr	r3, [pc, #504]	; (8005574 <saat_alarm_Ayarlama+0x254>)
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	e008      	b.n	8005392 <saat_alarm_Ayarlama+0x72>
			}
			else	SaatAryNo ++;
 8005380:	4b7f      	ldr	r3, [pc, #508]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 8005382:	f993 3000 	ldrsb.w	r3, [r3]
 8005386:	b2db      	uxtb	r3, r3
 8005388:	3301      	adds	r3, #1
 800538a:	b2db      	uxtb	r3, r3
 800538c:	b25a      	sxtb	r2, r3
 800538e:	4b7c      	ldr	r3, [pc, #496]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 8005390:	701a      	strb	r2, [r3, #0]

			if(SaatAryNo ==3)
 8005392:	4b7b      	ldr	r3, [pc, #492]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 8005394:	f993 3000 	ldrsb.w	r3, [r3]
 8005398:	2b03      	cmp	r3, #3
 800539a:	f040 809c 	bne.w	80054d6 <saat_alarm_Ayarlama+0x1b6>
			{
				kayitOnayDurum=true;
 800539e:	4b75      	ldr	r3, [pc, #468]	; (8005574 <saat_alarm_Ayarlama+0x254>)
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
			}

			break;
 80053a4:	e097      	b.n	80054d6 <saat_alarm_Ayarlama+0x1b6>

		case T4DEGER:
			durum = false;
 80053a6:	4b71      	ldr	r3, [pc, #452]	; (800556c <saat_alarm_Ayarlama+0x24c>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	701a      	strb	r2, [r3, #0]
			if(kayitOnayDurum)
 80053ac:	4b71      	ldr	r3, [pc, #452]	; (8005574 <saat_alarm_Ayarlama+0x254>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00c      	beq.n	80053ce <saat_alarm_Ayarlama+0xae>
			{
				displaySelectKey=MENU_SISTEMI;
 80053b4:	4b71      	ldr	r3, [pc, #452]	; (800557c <saat_alarm_Ayarlama+0x25c>)
 80053b6:	2238      	movs	r2, #56	; 0x38
 80053b8:	701a      	strb	r2, [r3, #0]
				SaatAryNo=0;
 80053ba:	4b71      	ldr	r3, [pc, #452]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
				displayClean=true;
 80053c0:	4b70      	ldr	r3, [pc, #448]	; (8005584 <saat_alarm_Ayarlama+0x264>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	701a      	strb	r2, [r3, #0]
				kayitOnayDurum=false;
 80053c6:	4b6b      	ldr	r3, [pc, #428]	; (8005574 <saat_alarm_Ayarlama+0x254>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	e008      	b.n	80053e0 <saat_alarm_Ayarlama+0xc0>
			}
			else	SaatAryNo --;
 80053ce:	4b6c      	ldr	r3, [pc, #432]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 80053d0:	f993 3000 	ldrsb.w	r3, [r3]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	b25a      	sxtb	r2, r3
 80053dc:	4b68      	ldr	r3, [pc, #416]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 80053de:	701a      	strb	r2, [r3, #0]

			if(SaatAryNo < 0)
 80053e0:	4b67      	ldr	r3, [pc, #412]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 80053e2:	f993 3000 	ldrsb.w	r3, [r3]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da77      	bge.n	80054da <saat_alarm_Ayarlama+0x1ba>
			{
				SaatAryNo=2;
 80053ea:	4b65      	ldr	r3, [pc, #404]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 80053ec:	2202      	movs	r2, #2
 80053ee:	701a      	strb	r2, [r3, #0]
			}

			break;
 80053f0:	e073      	b.n	80054da <saat_alarm_Ayarlama+0x1ba>

		case T1DEGER:
			durum = false;
 80053f2:	4b5e      	ldr	r3, [pc, #376]	; (800556c <saat_alarm_Ayarlama+0x24c>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]
			SaatAry[SaatAryNo] ++;
 80053f8:	4b61      	ldr	r3, [pc, #388]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 80053fa:	f993 3000 	ldrsb.w	r3, [r3]
 80053fe:	4a62      	ldr	r2, [pc, #392]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 8005400:	56d2      	ldrsb	r2, [r2, r3]
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	3201      	adds	r2, #1
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	b251      	sxtb	r1, r2
 800540a:	4a5f      	ldr	r2, [pc, #380]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 800540c:	54d1      	strb	r1, [r2, r3]
			if(SaatAryNo==0)
 800540e:	4b5c      	ldr	r3, [pc, #368]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 8005410:	f993 3000 	ldrsb.w	r3, [r3]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10f      	bne.n	8005438 <saat_alarm_Ayarlama+0x118>
			{
				if(SaatAry[SaatAryNo]>23)
 8005418:	4b59      	ldr	r3, [pc, #356]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 800541a:	f993 3000 	ldrsb.w	r3, [r3]
 800541e:	461a      	mov	r2, r3
 8005420:	4b59      	ldr	r3, [pc, #356]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 8005422:	569b      	ldrsb	r3, [r3, r2]
 8005424:	2b17      	cmp	r3, #23
 8005426:	dd5a      	ble.n	80054de <saat_alarm_Ayarlama+0x1be>
				{
					SaatAry[SaatAryNo]=0;
 8005428:	4b55      	ldr	r3, [pc, #340]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 800542a:	f993 3000 	ldrsb.w	r3, [r3]
 800542e:	461a      	mov	r2, r3
 8005430:	4b55      	ldr	r3, [pc, #340]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 8005432:	2100      	movs	r1, #0
 8005434:	5499      	strb	r1, [r3, r2]
				if(SaatAry[SaatAryNo]>59)
				{
					SaatAry[SaatAryNo]=0;
				}
			}
			break;
 8005436:	e052      	b.n	80054de <saat_alarm_Ayarlama+0x1be>
			else if(SaatAryNo!=0)
 8005438:	4b51      	ldr	r3, [pc, #324]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 800543a:	f993 3000 	ldrsb.w	r3, [r3]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d04d      	beq.n	80054de <saat_alarm_Ayarlama+0x1be>
				if(SaatAry[SaatAryNo]>59)
 8005442:	4b4f      	ldr	r3, [pc, #316]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 8005444:	f993 3000 	ldrsb.w	r3, [r3]
 8005448:	461a      	mov	r2, r3
 800544a:	4b4f      	ldr	r3, [pc, #316]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 800544c:	569b      	ldrsb	r3, [r3, r2]
 800544e:	2b3b      	cmp	r3, #59	; 0x3b
 8005450:	dd45      	ble.n	80054de <saat_alarm_Ayarlama+0x1be>
					SaatAry[SaatAryNo]=0;
 8005452:	4b4b      	ldr	r3, [pc, #300]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 8005454:	f993 3000 	ldrsb.w	r3, [r3]
 8005458:	461a      	mov	r2, r3
 800545a:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 800545c:	2100      	movs	r1, #0
 800545e:	5499      	strb	r1, [r3, r2]
			break;
 8005460:	e03d      	b.n	80054de <saat_alarm_Ayarlama+0x1be>

		case T2DEGER:
			durum = false;
 8005462:	4b42      	ldr	r3, [pc, #264]	; (800556c <saat_alarm_Ayarlama+0x24c>)
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
			SaatAry[SaatAryNo] --;
 8005468:	4b45      	ldr	r3, [pc, #276]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 800546a:	f993 3000 	ldrsb.w	r3, [r3]
 800546e:	4a46      	ldr	r2, [pc, #280]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 8005470:	56d2      	ldrsb	r2, [r2, r3]
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	3a01      	subs	r2, #1
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	b251      	sxtb	r1, r2
 800547a:	4a43      	ldr	r2, [pc, #268]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 800547c:	54d1      	strb	r1, [r2, r3]
			if(SaatAryNo==0)
 800547e:	4b40      	ldr	r3, [pc, #256]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 8005480:	f993 3000 	ldrsb.w	r3, [r3]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10f      	bne.n	80054a8 <saat_alarm_Ayarlama+0x188>
			{
				if(SaatAry[SaatAryNo]<0)
 8005488:	4b3d      	ldr	r3, [pc, #244]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 800548a:	f993 3000 	ldrsb.w	r3, [r3]
 800548e:	461a      	mov	r2, r3
 8005490:	4b3d      	ldr	r3, [pc, #244]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 8005492:	569b      	ldrsb	r3, [r3, r2]
 8005494:	2b00      	cmp	r3, #0
 8005496:	da24      	bge.n	80054e2 <saat_alarm_Ayarlama+0x1c2>
				{
					SaatAry[SaatAryNo]=23;
 8005498:	4b39      	ldr	r3, [pc, #228]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 800549a:	f993 3000 	ldrsb.w	r3, [r3]
 800549e:	461a      	mov	r2, r3
 80054a0:	4b39      	ldr	r3, [pc, #228]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 80054a2:	2117      	movs	r1, #23
 80054a4:	5499      	strb	r1, [r3, r2]
				if(SaatAry[SaatAryNo]<0)
				{
					SaatAry[SaatAryNo]=59;
				}
			}
			break;
 80054a6:	e01c      	b.n	80054e2 <saat_alarm_Ayarlama+0x1c2>
			else if(SaatAryNo!=0)
 80054a8:	4b35      	ldr	r3, [pc, #212]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 80054aa:	f993 3000 	ldrsb.w	r3, [r3]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d017      	beq.n	80054e2 <saat_alarm_Ayarlama+0x1c2>
				if(SaatAry[SaatAryNo]<0)
 80054b2:	4b33      	ldr	r3, [pc, #204]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 80054b4:	f993 3000 	ldrsb.w	r3, [r3]
 80054b8:	461a      	mov	r2, r3
 80054ba:	4b33      	ldr	r3, [pc, #204]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 80054bc:	569b      	ldrsb	r3, [r3, r2]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	da0f      	bge.n	80054e2 <saat_alarm_Ayarlama+0x1c2>
					SaatAry[SaatAryNo]=59;
 80054c2:	4b2f      	ldr	r3, [pc, #188]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 80054c4:	f993 3000 	ldrsb.w	r3, [r3]
 80054c8:	461a      	mov	r2, r3
 80054ca:	4b2f      	ldr	r3, [pc, #188]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 80054cc:	213b      	movs	r1, #59	; 0x3b
 80054ce:	5499      	strb	r1, [r3, r2]
			break;
 80054d0:	e007      	b.n	80054e2 <saat_alarm_Ayarlama+0x1c2>

		default:
 80054d2:	bf00      	nop
 80054d4:	e006      	b.n	80054e4 <saat_alarm_Ayarlama+0x1c4>
			break;
 80054d6:	bf00      	nop
 80054d8:	e004      	b.n	80054e4 <saat_alarm_Ayarlama+0x1c4>
			break;
 80054da:	bf00      	nop
 80054dc:	e002      	b.n	80054e4 <saat_alarm_Ayarlama+0x1c4>
			break;
 80054de:	bf00      	nop
 80054e0:	e000      	b.n	80054e4 <saat_alarm_Ayarlama+0x1c4>
			break;
 80054e2:	bf00      	nop
			;
		}
	}
	if(kayitOnayDurum)
 80054e4:	4b23      	ldr	r3, [pc, #140]	; (8005574 <saat_alarm_Ayarlama+0x254>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d004      	beq.n	80054f6 <saat_alarm_Ayarlama+0x1d6>
	{
		kayitSorma(10,yKonumu);
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	4619      	mov	r1, r3
 80054f0:	200a      	movs	r0, #10
 80054f2:	f000 fac7 	bl	8005a84 <kayitSorma>
	}
	sprintf(saatYer,"%02d:%02d:%02d",SaatAry[0],SaatAry[1],SaatAry[2]);
 80054f6:	4b24      	ldr	r3, [pc, #144]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 80054f8:	f993 3000 	ldrsb.w	r3, [r3]
 80054fc:	461a      	mov	r2, r3
 80054fe:	4b22      	ldr	r3, [pc, #136]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 8005500:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005504:	4619      	mov	r1, r3
 8005506:	4b20      	ldr	r3, [pc, #128]	; (8005588 <saat_alarm_Ayarlama+0x268>)
 8005508:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800550c:	f107 0008 	add.w	r0, r7, #8
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	460b      	mov	r3, r1
 8005514:	491d      	ldr	r1, [pc, #116]	; (800558c <saat_alarm_Ayarlama+0x26c>)
 8005516:	f001 fc25 	bl	8006d64 <siprintf>
	OLED_SetCursor(10, yKonumu);
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	4619      	mov	r1, r3
 800551e:	200a      	movs	r0, #10
 8005520:	f7ff fe30 	bl	8005184 <OLED_SetCursor>
	OLED_WriteString(saatYer, Font_11x18, White);
 8005524:	4a1a      	ldr	r2, [pc, #104]	; (8005590 <saat_alarm_Ayarlama+0x270>)
 8005526:	f107 0008 	add.w	r0, r7, #8
 800552a:	2301      	movs	r3, #1
 800552c:	ca06      	ldmia	r2, {r1, r2}
 800552e:	f7ff fe03 	bl	8005138 <OLED_WriteString>
	if(durumFlash)
 8005532:	4b18      	ldr	r3, [pc, #96]	; (8005594 <saat_alarm_Ayarlama+0x274>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d014      	beq.n	8005564 <saat_alarm_Ayarlama+0x244>
	{
	OLED_SetCursor(SaatAryNo*33+10, yKonumu);
 800553a:	4b11      	ldr	r3, [pc, #68]	; (8005580 <saat_alarm_Ayarlama+0x260>)
 800553c:	f993 3000 	ldrsb.w	r3, [r3]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	0152      	lsls	r2, r2, #5
 8005546:	4413      	add	r3, r2
 8005548:	b2db      	uxtb	r3, r3
 800554a:	330a      	adds	r3, #10
 800554c:	b2db      	uxtb	r3, r3
 800554e:	79fa      	ldrb	r2, [r7, #7]
 8005550:	4611      	mov	r1, r2
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff fe16 	bl	8005184 <OLED_SetCursor>
	OLED_WriteString("  ", Font_11x18, White);
 8005558:	4a0d      	ldr	r2, [pc, #52]	; (8005590 <saat_alarm_Ayarlama+0x270>)
 800555a:	2301      	movs	r3, #1
 800555c:	ca06      	ldmia	r2, {r1, r2}
 800555e:	480e      	ldr	r0, [pc, #56]	; (8005598 <saat_alarm_Ayarlama+0x278>)
 8005560:	f7ff fdea 	bl	8005138 <OLED_WriteString>
	}
}
 8005564:	bf00      	nop
 8005566:	3718      	adds	r7, #24
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	2000082a 	.word	0x2000082a
 8005570:	20000a21 	.word	0x20000a21
 8005574:	20000a20 	.word	0x20000a20
 8005578:	200009c0 	.word	0x200009c0
 800557c:	20000a22 	.word	0x20000a22
 8005580:	20000a2c 	.word	0x20000a2c
 8005584:	20000a00 	.word	0x20000a00
 8005588:	20000920 	.word	0x20000920
 800558c:	080075d8 	.word	0x080075d8
 8005590:	20000014 	.word	0x20000014
 8005594:	20000829 	.word	0x20000829
 8005598:	080075e8 	.word	0x080075e8

0800559c <alarmAyarlama>:

void alarmAyarlama(uint8_t y) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	71fb      	strb	r3, [r7, #7]

	ayarlaPtr=&alarmAyarla;
 80055a6:	4b05      	ldr	r3, [pc, #20]	; (80055bc <alarmAyarlama+0x20>)
 80055a8:	4a05      	ldr	r2, [pc, #20]	; (80055c0 <alarmAyarlama+0x24>)
 80055aa:	601a      	str	r2, [r3, #0]
	saat_alarm_Ayarlama(y);
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff feb6 	bl	8005320 <saat_alarm_Ayarlama>
}
 80055b4:	bf00      	nop
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	200009c0 	.word	0x200009c0
 80055c0:	08005201 	.word	0x08005201

080055c4 <takvimiAyarlama>:

void takvimiAyarlama(uint8_t y)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af02      	add	r7, sp, #8
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]

	char takvimYer[12];

//	char* weekDay[] = { "Pzt", "Sal", "Car", "Per", "Cum","Cmt", "Paz"};

		if (durum) {
 80055ce:	4b99      	ldr	r3, [pc, #612]	; (8005834 <takvimiAyarlama+0x270>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f000 8126 	beq.w	8005824 <takvimiAyarlama+0x260>

			switch (Key) {
 80055d8:	4b97      	ldr	r3, [pc, #604]	; (8005838 <takvimiAyarlama+0x274>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2bb8      	cmp	r3, #184	; 0xb8
 80055de:	d033      	beq.n	8005648 <takvimiAyarlama+0x84>
 80055e0:	2bb8      	cmp	r3, #184	; 0xb8
 80055e2:	dc02      	bgt.n	80055ea <takvimiAyarlama+0x26>
 80055e4:	2b78      	cmp	r3, #120	; 0x78
 80055e6:	d006      	beq.n	80055f6 <takvimiAyarlama+0x32>
					}
				}
				break;

			default:
				break;
 80055e8:	e133      	b.n	8005852 <takvimiAyarlama+0x28e>
			switch (Key) {
 80055ea:	2bd8      	cmp	r3, #216	; 0xd8
 80055ec:	d053      	beq.n	8005696 <takvimiAyarlama+0xd2>
 80055ee:	2be8      	cmp	r3, #232	; 0xe8
 80055f0:	f000 80b6 	beq.w	8005760 <takvimiAyarlama+0x19c>
				break;
 80055f4:	e12d      	b.n	8005852 <takvimiAyarlama+0x28e>
				durum = false;
 80055f6:	4b8f      	ldr	r3, [pc, #572]	; (8005834 <takvimiAyarlama+0x270>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
				if(kayitOnayDurum)
 80055fc:	4b8f      	ldr	r3, [pc, #572]	; (800583c <takvimiAyarlama+0x278>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00e      	beq.n	8005622 <takvimiAyarlama+0x5e>
					takvimAyarla();
 8005604:	f7ff fe36 	bl	8005274 <takvimAyarla>
					displaySelectKey=MENU_SISTEMI;
 8005608:	4b8d      	ldr	r3, [pc, #564]	; (8005840 <takvimiAyarlama+0x27c>)
 800560a:	2238      	movs	r2, #56	; 0x38
 800560c:	701a      	strb	r2, [r3, #0]
					takvimAryNo=0;
 800560e:	4b8d      	ldr	r3, [pc, #564]	; (8005844 <takvimiAyarlama+0x280>)
 8005610:	2200      	movs	r2, #0
 8005612:	701a      	strb	r2, [r3, #0]
					displayClean=true;
 8005614:	4b8c      	ldr	r3, [pc, #560]	; (8005848 <takvimiAyarlama+0x284>)
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
					kayitOnayDurum=false;
 800561a:	4b88      	ldr	r3, [pc, #544]	; (800583c <takvimiAyarlama+0x278>)
 800561c:	2200      	movs	r2, #0
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	e008      	b.n	8005634 <takvimiAyarlama+0x70>
				else	takvimAryNo ++;
 8005622:	4b88      	ldr	r3, [pc, #544]	; (8005844 <takvimiAyarlama+0x280>)
 8005624:	f993 3000 	ldrsb.w	r3, [r3]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	3301      	adds	r3, #1
 800562c:	b2db      	uxtb	r3, r3
 800562e:	b25a      	sxtb	r2, r3
 8005630:	4b84      	ldr	r3, [pc, #528]	; (8005844 <takvimiAyarlama+0x280>)
 8005632:	701a      	strb	r2, [r3, #0]
				if(takvimAryNo ==3)
 8005634:	4b83      	ldr	r3, [pc, #524]	; (8005844 <takvimiAyarlama+0x280>)
 8005636:	f993 3000 	ldrsb.w	r3, [r3]
 800563a:	2b03      	cmp	r3, #3
 800563c:	f040 80f4 	bne.w	8005828 <takvimiAyarlama+0x264>
					kayitOnayDurum=true;
 8005640:	4b7e      	ldr	r3, [pc, #504]	; (800583c <takvimiAyarlama+0x278>)
 8005642:	2201      	movs	r2, #1
 8005644:	701a      	strb	r2, [r3, #0]
				break;
 8005646:	e0ef      	b.n	8005828 <takvimiAyarlama+0x264>
				durum = false;
 8005648:	4b7a      	ldr	r3, [pc, #488]	; (8005834 <takvimiAyarlama+0x270>)
 800564a:	2200      	movs	r2, #0
 800564c:	701a      	strb	r2, [r3, #0]
				if(kayitOnayDurum)
 800564e:	4b7b      	ldr	r3, [pc, #492]	; (800583c <takvimiAyarlama+0x278>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00c      	beq.n	8005670 <takvimiAyarlama+0xac>
					displaySelectKey=MENU_SISTEMI;
 8005656:	4b7a      	ldr	r3, [pc, #488]	; (8005840 <takvimiAyarlama+0x27c>)
 8005658:	2238      	movs	r2, #56	; 0x38
 800565a:	701a      	strb	r2, [r3, #0]
					takvimAryNo=0;
 800565c:	4b79      	ldr	r3, [pc, #484]	; (8005844 <takvimiAyarlama+0x280>)
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
					displayClean=true;
 8005662:	4b79      	ldr	r3, [pc, #484]	; (8005848 <takvimiAyarlama+0x284>)
 8005664:	2201      	movs	r2, #1
 8005666:	701a      	strb	r2, [r3, #0]
					kayitOnayDurum=false;
 8005668:	4b74      	ldr	r3, [pc, #464]	; (800583c <takvimiAyarlama+0x278>)
 800566a:	2200      	movs	r2, #0
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	e008      	b.n	8005682 <takvimiAyarlama+0xbe>
				else	takvimAryNo --;
 8005670:	4b74      	ldr	r3, [pc, #464]	; (8005844 <takvimiAyarlama+0x280>)
 8005672:	f993 3000 	ldrsb.w	r3, [r3]
 8005676:	b2db      	uxtb	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	b25a      	sxtb	r2, r3
 800567e:	4b71      	ldr	r3, [pc, #452]	; (8005844 <takvimiAyarlama+0x280>)
 8005680:	701a      	strb	r2, [r3, #0]
				if(takvimAryNo < 0)
 8005682:	4b70      	ldr	r3, [pc, #448]	; (8005844 <takvimiAyarlama+0x280>)
 8005684:	f993 3000 	ldrsb.w	r3, [r3]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f280 80cf 	bge.w	800582c <takvimiAyarlama+0x268>
					takvimAryNo=2;
 800568e:	4b6d      	ldr	r3, [pc, #436]	; (8005844 <takvimiAyarlama+0x280>)
 8005690:	2202      	movs	r2, #2
 8005692:	701a      	strb	r2, [r3, #0]
				break;
 8005694:	e0ca      	b.n	800582c <takvimiAyarlama+0x268>
				durum = false;
 8005696:	4b67      	ldr	r3, [pc, #412]	; (8005834 <takvimiAyarlama+0x270>)
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
				takvimAry[takvimAryNo] ++;
 800569c:	4b69      	ldr	r3, [pc, #420]	; (8005844 <takvimiAyarlama+0x280>)
 800569e:	f993 3000 	ldrsb.w	r3, [r3]
 80056a2:	4a6a      	ldr	r2, [pc, #424]	; (800584c <takvimiAyarlama+0x288>)
 80056a4:	56d2      	ldrsb	r2, [r2, r3]
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	3201      	adds	r2, #1
 80056aa:	b2d2      	uxtb	r2, r2
 80056ac:	b251      	sxtb	r1, r2
 80056ae:	4a67      	ldr	r2, [pc, #412]	; (800584c <takvimiAyarlama+0x288>)
 80056b0:	54d1      	strb	r1, [r2, r3]
				if(takvimAryNo==0)
 80056b2:	4b64      	ldr	r3, [pc, #400]	; (8005844 <takvimiAyarlama+0x280>)
 80056b4:	f993 3000 	ldrsb.w	r3, [r3]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d110      	bne.n	80056de <takvimiAyarlama+0x11a>
					if(takvimAry[takvimAryNo]>31)
 80056bc:	4b61      	ldr	r3, [pc, #388]	; (8005844 <takvimiAyarlama+0x280>)
 80056be:	f993 3000 	ldrsb.w	r3, [r3]
 80056c2:	461a      	mov	r2, r3
 80056c4:	4b61      	ldr	r3, [pc, #388]	; (800584c <takvimiAyarlama+0x288>)
 80056c6:	569b      	ldrsb	r3, [r3, r2]
 80056c8:	2b1f      	cmp	r3, #31
 80056ca:	f340 80b1 	ble.w	8005830 <takvimiAyarlama+0x26c>
						takvimAry[takvimAryNo]=1;
 80056ce:	4b5d      	ldr	r3, [pc, #372]	; (8005844 <takvimiAyarlama+0x280>)
 80056d0:	f993 3000 	ldrsb.w	r3, [r3]
 80056d4:	461a      	mov	r2, r3
 80056d6:	4b5d      	ldr	r3, [pc, #372]	; (800584c <takvimiAyarlama+0x288>)
 80056d8:	2101      	movs	r1, #1
 80056da:	5499      	strb	r1, [r3, r2]
				break;
 80056dc:	e0a8      	b.n	8005830 <takvimiAyarlama+0x26c>
				else if(takvimAryNo==1)
 80056de:	4b59      	ldr	r3, [pc, #356]	; (8005844 <takvimiAyarlama+0x280>)
 80056e0:	f993 3000 	ldrsb.w	r3, [r3]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d110      	bne.n	800570a <takvimiAyarlama+0x146>
					if(takvimAry[takvimAryNo]>12)
 80056e8:	4b56      	ldr	r3, [pc, #344]	; (8005844 <takvimiAyarlama+0x280>)
 80056ea:	f993 3000 	ldrsb.w	r3, [r3]
 80056ee:	461a      	mov	r2, r3
 80056f0:	4b56      	ldr	r3, [pc, #344]	; (800584c <takvimiAyarlama+0x288>)
 80056f2:	569b      	ldrsb	r3, [r3, r2]
 80056f4:	2b0c      	cmp	r3, #12
 80056f6:	f340 809b 	ble.w	8005830 <takvimiAyarlama+0x26c>
						takvimAry[takvimAryNo]=1;
 80056fa:	4b52      	ldr	r3, [pc, #328]	; (8005844 <takvimiAyarlama+0x280>)
 80056fc:	f993 3000 	ldrsb.w	r3, [r3]
 8005700:	461a      	mov	r2, r3
 8005702:	4b52      	ldr	r3, [pc, #328]	; (800584c <takvimiAyarlama+0x288>)
 8005704:	2101      	movs	r1, #1
 8005706:	5499      	strb	r1, [r3, r2]
				break;
 8005708:	e092      	b.n	8005830 <takvimiAyarlama+0x26c>
				else if(takvimAryNo==2)
 800570a:	4b4e      	ldr	r3, [pc, #312]	; (8005844 <takvimiAyarlama+0x280>)
 800570c:	f993 3000 	ldrsb.w	r3, [r3]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d110      	bne.n	8005736 <takvimiAyarlama+0x172>
					if(takvimAry[takvimAryNo]>99)
 8005714:	4b4b      	ldr	r3, [pc, #300]	; (8005844 <takvimiAyarlama+0x280>)
 8005716:	f993 3000 	ldrsb.w	r3, [r3]
 800571a:	461a      	mov	r2, r3
 800571c:	4b4b      	ldr	r3, [pc, #300]	; (800584c <takvimiAyarlama+0x288>)
 800571e:	569b      	ldrsb	r3, [r3, r2]
 8005720:	2b63      	cmp	r3, #99	; 0x63
 8005722:	f340 8085 	ble.w	8005830 <takvimiAyarlama+0x26c>
						takvimAry[takvimAryNo]=0;
 8005726:	4b47      	ldr	r3, [pc, #284]	; (8005844 <takvimiAyarlama+0x280>)
 8005728:	f993 3000 	ldrsb.w	r3, [r3]
 800572c:	461a      	mov	r2, r3
 800572e:	4b47      	ldr	r3, [pc, #284]	; (800584c <takvimiAyarlama+0x288>)
 8005730:	2100      	movs	r1, #0
 8005732:	5499      	strb	r1, [r3, r2]
				break;
 8005734:	e07c      	b.n	8005830 <takvimiAyarlama+0x26c>
				else if(takvimAryNo==3)
 8005736:	4b43      	ldr	r3, [pc, #268]	; (8005844 <takvimiAyarlama+0x280>)
 8005738:	f993 3000 	ldrsb.w	r3, [r3]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d177      	bne.n	8005830 <takvimiAyarlama+0x26c>
					if(takvimAry[takvimAryNo]>7)
 8005740:	4b40      	ldr	r3, [pc, #256]	; (8005844 <takvimiAyarlama+0x280>)
 8005742:	f993 3000 	ldrsb.w	r3, [r3]
 8005746:	461a      	mov	r2, r3
 8005748:	4b40      	ldr	r3, [pc, #256]	; (800584c <takvimiAyarlama+0x288>)
 800574a:	569b      	ldrsb	r3, [r3, r2]
 800574c:	2b07      	cmp	r3, #7
 800574e:	dd6f      	ble.n	8005830 <takvimiAyarlama+0x26c>
						takvimAry[takvimAryNo]=1;
 8005750:	4b3c      	ldr	r3, [pc, #240]	; (8005844 <takvimiAyarlama+0x280>)
 8005752:	f993 3000 	ldrsb.w	r3, [r3]
 8005756:	461a      	mov	r2, r3
 8005758:	4b3c      	ldr	r3, [pc, #240]	; (800584c <takvimiAyarlama+0x288>)
 800575a:	2101      	movs	r1, #1
 800575c:	5499      	strb	r1, [r3, r2]
				break;
 800575e:	e067      	b.n	8005830 <takvimiAyarlama+0x26c>
				durum = false;
 8005760:	4b34      	ldr	r3, [pc, #208]	; (8005834 <takvimiAyarlama+0x270>)
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
				takvimAry[takvimAryNo] --;
 8005766:	4b37      	ldr	r3, [pc, #220]	; (8005844 <takvimiAyarlama+0x280>)
 8005768:	f993 3000 	ldrsb.w	r3, [r3]
 800576c:	4a37      	ldr	r2, [pc, #220]	; (800584c <takvimiAyarlama+0x288>)
 800576e:	56d2      	ldrsb	r2, [r2, r3]
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	3a01      	subs	r2, #1
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	b251      	sxtb	r1, r2
 8005778:	4a34      	ldr	r2, [pc, #208]	; (800584c <takvimiAyarlama+0x288>)
 800577a:	54d1      	strb	r1, [r2, r3]
				if(takvimAryNo==0)
 800577c:	4b31      	ldr	r3, [pc, #196]	; (8005844 <takvimiAyarlama+0x280>)
 800577e:	f993 3000 	ldrsb.w	r3, [r3]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10f      	bne.n	80057a6 <takvimiAyarlama+0x1e2>
					if(takvimAry[takvimAryNo]<1)
 8005786:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <takvimiAyarlama+0x280>)
 8005788:	f993 3000 	ldrsb.w	r3, [r3]
 800578c:	461a      	mov	r2, r3
 800578e:	4b2f      	ldr	r3, [pc, #188]	; (800584c <takvimiAyarlama+0x288>)
 8005790:	569b      	ldrsb	r3, [r3, r2]
 8005792:	2b00      	cmp	r3, #0
 8005794:	dc5c      	bgt.n	8005850 <takvimiAyarlama+0x28c>
						takvimAry[takvimAryNo]=31;
 8005796:	4b2b      	ldr	r3, [pc, #172]	; (8005844 <takvimiAyarlama+0x280>)
 8005798:	f993 3000 	ldrsb.w	r3, [r3]
 800579c:	461a      	mov	r2, r3
 800579e:	4b2b      	ldr	r3, [pc, #172]	; (800584c <takvimiAyarlama+0x288>)
 80057a0:	211f      	movs	r1, #31
 80057a2:	5499      	strb	r1, [r3, r2]
				break;
 80057a4:	e054      	b.n	8005850 <takvimiAyarlama+0x28c>
				else if(takvimAryNo==1)
 80057a6:	4b27      	ldr	r3, [pc, #156]	; (8005844 <takvimiAyarlama+0x280>)
 80057a8:	f993 3000 	ldrsb.w	r3, [r3]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d10f      	bne.n	80057d0 <takvimiAyarlama+0x20c>
					if(takvimAry[takvimAryNo]<1)
 80057b0:	4b24      	ldr	r3, [pc, #144]	; (8005844 <takvimiAyarlama+0x280>)
 80057b2:	f993 3000 	ldrsb.w	r3, [r3]
 80057b6:	461a      	mov	r2, r3
 80057b8:	4b24      	ldr	r3, [pc, #144]	; (800584c <takvimiAyarlama+0x288>)
 80057ba:	569b      	ldrsb	r3, [r3, r2]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	dc47      	bgt.n	8005850 <takvimiAyarlama+0x28c>
						takvimAry[takvimAryNo]=12;
 80057c0:	4b20      	ldr	r3, [pc, #128]	; (8005844 <takvimiAyarlama+0x280>)
 80057c2:	f993 3000 	ldrsb.w	r3, [r3]
 80057c6:	461a      	mov	r2, r3
 80057c8:	4b20      	ldr	r3, [pc, #128]	; (800584c <takvimiAyarlama+0x288>)
 80057ca:	210c      	movs	r1, #12
 80057cc:	5499      	strb	r1, [r3, r2]
				break;
 80057ce:	e03f      	b.n	8005850 <takvimiAyarlama+0x28c>
				else if(takvimAryNo==2)
 80057d0:	4b1c      	ldr	r3, [pc, #112]	; (8005844 <takvimiAyarlama+0x280>)
 80057d2:	f993 3000 	ldrsb.w	r3, [r3]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d10f      	bne.n	80057fa <takvimiAyarlama+0x236>
					if(takvimAry[takvimAryNo]<0)
 80057da:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <takvimiAyarlama+0x280>)
 80057dc:	f993 3000 	ldrsb.w	r3, [r3]
 80057e0:	461a      	mov	r2, r3
 80057e2:	4b1a      	ldr	r3, [pc, #104]	; (800584c <takvimiAyarlama+0x288>)
 80057e4:	569b      	ldrsb	r3, [r3, r2]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	da32      	bge.n	8005850 <takvimiAyarlama+0x28c>
						takvimAry[takvimAryNo]=99;
 80057ea:	4b16      	ldr	r3, [pc, #88]	; (8005844 <takvimiAyarlama+0x280>)
 80057ec:	f993 3000 	ldrsb.w	r3, [r3]
 80057f0:	461a      	mov	r2, r3
 80057f2:	4b16      	ldr	r3, [pc, #88]	; (800584c <takvimiAyarlama+0x288>)
 80057f4:	2163      	movs	r1, #99	; 0x63
 80057f6:	5499      	strb	r1, [r3, r2]
				break;
 80057f8:	e02a      	b.n	8005850 <takvimiAyarlama+0x28c>
				else if(takvimAryNo==3)
 80057fa:	4b12      	ldr	r3, [pc, #72]	; (8005844 <takvimiAyarlama+0x280>)
 80057fc:	f993 3000 	ldrsb.w	r3, [r3]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d125      	bne.n	8005850 <takvimiAyarlama+0x28c>
					if(takvimAry[takvimAryNo]<1)
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <takvimiAyarlama+0x280>)
 8005806:	f993 3000 	ldrsb.w	r3, [r3]
 800580a:	461a      	mov	r2, r3
 800580c:	4b0f      	ldr	r3, [pc, #60]	; (800584c <takvimiAyarlama+0x288>)
 800580e:	569b      	ldrsb	r3, [r3, r2]
 8005810:	2b00      	cmp	r3, #0
 8005812:	dc1d      	bgt.n	8005850 <takvimiAyarlama+0x28c>
						takvimAry[takvimAryNo]=7;
 8005814:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <takvimiAyarlama+0x280>)
 8005816:	f993 3000 	ldrsb.w	r3, [r3]
 800581a:	461a      	mov	r2, r3
 800581c:	4b0b      	ldr	r3, [pc, #44]	; (800584c <takvimiAyarlama+0x288>)
 800581e:	2107      	movs	r1, #7
 8005820:	5499      	strb	r1, [r3, r2]
				break;
 8005822:	e015      	b.n	8005850 <takvimiAyarlama+0x28c>
			}
		}
 8005824:	bf00      	nop
 8005826:	e014      	b.n	8005852 <takvimiAyarlama+0x28e>
				break;
 8005828:	bf00      	nop
 800582a:	e012      	b.n	8005852 <takvimiAyarlama+0x28e>
				break;
 800582c:	bf00      	nop
 800582e:	e010      	b.n	8005852 <takvimiAyarlama+0x28e>
				break;
 8005830:	bf00      	nop
 8005832:	e00e      	b.n	8005852 <takvimiAyarlama+0x28e>
 8005834:	2000082a 	.word	0x2000082a
 8005838:	20000a21 	.word	0x20000a21
 800583c:	20000a20 	.word	0x20000a20
 8005840:	20000a22 	.word	0x20000a22
 8005844:	20000828 	.word	0x20000828
 8005848:	20000a00 	.word	0x20000a00
 800584c:	200009bc 	.word	0x200009bc
				break;
 8005850:	bf00      	nop
		if(kayitOnayDurum)
 8005852:	4b3f      	ldr	r3, [pc, #252]	; (8005950 <takvimiAyarlama+0x38c>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d006      	beq.n	8005868 <takvimiAyarlama+0x2a4>
		{
			kayitSorma(10,y+10);
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	330a      	adds	r3, #10
 800585e:	b2db      	uxtb	r3, r3
 8005860:	4619      	mov	r1, r3
 8005862:	200a      	movs	r0, #10
 8005864:	f000 f90e 	bl	8005a84 <kayitSorma>
		}

		sprintf(takvimYer,"%02d-%02d-20%02d",takvimAry[0],takvimAry[1],takvimAry[2]);
 8005868:	4b3a      	ldr	r3, [pc, #232]	; (8005954 <takvimiAyarlama+0x390>)
 800586a:	f993 3000 	ldrsb.w	r3, [r3]
 800586e:	461a      	mov	r2, r3
 8005870:	4b38      	ldr	r3, [pc, #224]	; (8005954 <takvimiAyarlama+0x390>)
 8005872:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005876:	4619      	mov	r1, r3
 8005878:	4b36      	ldr	r3, [pc, #216]	; (8005954 <takvimiAyarlama+0x390>)
 800587a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800587e:	f107 000c 	add.w	r0, r7, #12
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	460b      	mov	r3, r1
 8005886:	4934      	ldr	r1, [pc, #208]	; (8005958 <takvimiAyarlama+0x394>)
 8005888:	f001 fa6c 	bl	8006d64 <siprintf>
		OLED_SetCursor(0, y);
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	4619      	mov	r1, r3
 8005890:	2000      	movs	r0, #0
 8005892:	f7ff fc77 	bl	8005184 <OLED_SetCursor>
		OLED_WriteString(takvimYer, Font_11x18, White);
 8005896:	4a31      	ldr	r2, [pc, #196]	; (800595c <takvimiAyarlama+0x398>)
 8005898:	f107 000c 	add.w	r0, r7, #12
 800589c:	2301      	movs	r3, #1
 800589e:	ca06      	ldmia	r2, {r1, r2}
 80058a0:	f7ff fc4a 	bl	8005138 <OLED_WriteString>
		OLED_SetCursor(30, y+20);
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	3314      	adds	r3, #20
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	4619      	mov	r1, r3
 80058ac:	201e      	movs	r0, #30
 80058ae:	f7ff fc69 	bl	8005184 <OLED_SetCursor>
//		OLED_WriteString(weekDay[takvimAry[3]], Font_7x10, White);  //
		if(durumFlash)
 80058b2:	4b2b      	ldr	r3, [pc, #172]	; (8005960 <takvimiAyarlama+0x39c>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d045      	beq.n	8005946 <takvimiAyarlama+0x382>
		{
			if(takvimAryNo<2)
 80058ba:	4b2a      	ldr	r3, [pc, #168]	; (8005964 <takvimiAyarlama+0x3a0>)
 80058bc:	f993 3000 	ldrsb.w	r3, [r3]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	dc13      	bgt.n	80058ec <takvimiAyarlama+0x328>
			{
				OLED_SetCursor(takvimAryNo*33, y);
 80058c4:	4b27      	ldr	r3, [pc, #156]	; (8005964 <takvimiAyarlama+0x3a0>)
 80058c6:	f993 3000 	ldrsb.w	r3, [r3]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	0152      	lsls	r2, r2, #5
 80058d0:	4413      	add	r3, r2
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	79fa      	ldrb	r2, [r7, #7]
 80058d6:	4611      	mov	r1, r2
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff fc53 	bl	8005184 <OLED_SetCursor>
				OLED_WriteString("  ", Font_11x18, White);
 80058de:	4a1f      	ldr	r2, [pc, #124]	; (800595c <takvimiAyarlama+0x398>)
 80058e0:	2301      	movs	r3, #1
 80058e2:	ca06      	ldmia	r2, {r1, r2}
 80058e4:	4820      	ldr	r0, [pc, #128]	; (8005968 <takvimiAyarlama+0x3a4>)
 80058e6:	f7ff fc27 	bl	8005138 <OLED_WriteString>
				OLED_SetCursor(30, y+20);
				OLED_WriteString("            ", Font_7x10, White);
			}

		}
}
 80058ea:	e02c      	b.n	8005946 <takvimiAyarlama+0x382>
			else if(takvimAryNo==2)
 80058ec:	4b1d      	ldr	r3, [pc, #116]	; (8005964 <takvimiAyarlama+0x3a0>)
 80058ee:	f993 3000 	ldrsb.w	r3, [r3]
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d115      	bne.n	8005922 <takvimiAyarlama+0x35e>
				OLED_SetCursor(takvimAryNo*33+22, y);
 80058f6:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <takvimiAyarlama+0x3a0>)
 80058f8:	f993 3000 	ldrsb.w	r3, [r3]
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	461a      	mov	r2, r3
 8005900:	0152      	lsls	r2, r2, #5
 8005902:	4413      	add	r3, r2
 8005904:	b2db      	uxtb	r3, r3
 8005906:	3316      	adds	r3, #22
 8005908:	b2db      	uxtb	r3, r3
 800590a:	79fa      	ldrb	r2, [r7, #7]
 800590c:	4611      	mov	r1, r2
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fc38 	bl	8005184 <OLED_SetCursor>
				OLED_WriteString("  ", Font_11x18, White);
 8005914:	4a11      	ldr	r2, [pc, #68]	; (800595c <takvimiAyarlama+0x398>)
 8005916:	2301      	movs	r3, #1
 8005918:	ca06      	ldmia	r2, {r1, r2}
 800591a:	4813      	ldr	r0, [pc, #76]	; (8005968 <takvimiAyarlama+0x3a4>)
 800591c:	f7ff fc0c 	bl	8005138 <OLED_WriteString>
}
 8005920:	e011      	b.n	8005946 <takvimiAyarlama+0x382>
			else if(takvimAryNo==3)
 8005922:	4b10      	ldr	r3, [pc, #64]	; (8005964 <takvimiAyarlama+0x3a0>)
 8005924:	f993 3000 	ldrsb.w	r3, [r3]
 8005928:	2b03      	cmp	r3, #3
 800592a:	d10c      	bne.n	8005946 <takvimiAyarlama+0x382>
				OLED_SetCursor(30, y+20);
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	3314      	adds	r3, #20
 8005930:	b2db      	uxtb	r3, r3
 8005932:	4619      	mov	r1, r3
 8005934:	201e      	movs	r0, #30
 8005936:	f7ff fc25 	bl	8005184 <OLED_SetCursor>
				OLED_WriteString("            ", Font_7x10, White);
 800593a:	4a0c      	ldr	r2, [pc, #48]	; (800596c <takvimiAyarlama+0x3a8>)
 800593c:	2301      	movs	r3, #1
 800593e:	ca06      	ldmia	r2, {r1, r2}
 8005940:	480b      	ldr	r0, [pc, #44]	; (8005970 <takvimiAyarlama+0x3ac>)
 8005942:	f7ff fbf9 	bl	8005138 <OLED_WriteString>
}
 8005946:	bf00      	nop
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000a20 	.word	0x20000a20
 8005954:	200009bc 	.word	0x200009bc
 8005958:	080075ec 	.word	0x080075ec
 800595c:	20000014 	.word	0x20000014
 8005960:	20000829 	.word	0x20000829
 8005964:	20000828 	.word	0x20000828
 8005968:	080075e8 	.word	0x080075e8
 800596c:	2000000c 	.word	0x2000000c
 8005970:	08007600 	.word	0x08007600

08005974 <KeySaatiAyarlama>:
/*Geçerli saat bilgisini okuyup saat ayar ekranına yönlendirecek Key1 değerini ayarlar */
void KeySaatiAyarlama()
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_TimeTypeDef sTimeGet;
	HAL_RTC_GetTime(&hrtc, &sTimeGet, RTC_FORMAT_BIN);
 800597a:	1d3b      	adds	r3, r7, #4
 800597c:	2200      	movs	r2, #0
 800597e:	4619      	mov	r1, r3
 8005980:	480d      	ldr	r0, [pc, #52]	; (80059b8 <KeySaatiAyarlama+0x44>)
 8005982:	f7fd fccf 	bl	8003324 <HAL_RTC_GetTime>

	SaatAry[0]=sTimeGet.Hours;
 8005986:	793b      	ldrb	r3, [r7, #4]
 8005988:	b25a      	sxtb	r2, r3
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <KeySaatiAyarlama+0x48>)
 800598c:	701a      	strb	r2, [r3, #0]
	SaatAry[1]=sTimeGet.Minutes;
 800598e:	797b      	ldrb	r3, [r7, #5]
 8005990:	b25a      	sxtb	r2, r3
 8005992:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <KeySaatiAyarlama+0x48>)
 8005994:	705a      	strb	r2, [r3, #1]
	SaatAry[2]=sTimeGet.Seconds;
 8005996:	79bb      	ldrb	r3, [r7, #6]
 8005998:	b25a      	sxtb	r2, r3
 800599a:	4b08      	ldr	r3, [pc, #32]	; (80059bc <KeySaatiAyarlama+0x48>)
 800599c:	709a      	strb	r2, [r3, #2]

	displaySelectKey=SAATI_AYARLAMA;
 800599e:	4b08      	ldr	r3, [pc, #32]	; (80059c0 <KeySaatiAyarlama+0x4c>)
 80059a0:	2241      	movs	r2, #65	; 0x41
 80059a2:	701a      	strb	r2, [r3, #0]
	SaatAryNo=0;
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <KeySaatiAyarlama+0x50>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
	displayClean=true;
 80059aa:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <KeySaatiAyarlama+0x54>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	701a      	strb	r2, [r3, #0]

}
 80059b0:	bf00      	nop
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000924 	.word	0x20000924
 80059bc:	20000920 	.word	0x20000920
 80059c0:	20000a22 	.word	0x20000a22
 80059c4:	20000a2c 	.word	0x20000a2c
 80059c8:	20000a00 	.word	0x20000a00

080059cc <KeyAlarmAyarlama>:
/*Geçerli alarm bilgisini okuyup alarm ayar ekranına yönlendirecek Key1 değerini ayarlar */
void KeyAlarmAyarlama()
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
	extern RTC_HandleTypeDef hrtc;
	RTC_AlarmTypeDef sAlarmGet;
	HAL_RTC_GetAlarm(&hrtc, &sAlarmGet,RTC_ALARM_A, RTC_FORMAT_BIN);
 80059d2:	4639      	mov	r1, r7
 80059d4:	2300      	movs	r3, #0
 80059d6:	2200      	movs	r2, #0
 80059d8:	480d      	ldr	r0, [pc, #52]	; (8005a10 <KeyAlarmAyarlama+0x44>)
 80059da:	f7fd ff39 	bl	8003850 <HAL_RTC_GetAlarm>

	SaatAry[0]=sAlarmGet.AlarmTime.Hours;
 80059de:	783b      	ldrb	r3, [r7, #0]
 80059e0:	b25a      	sxtb	r2, r3
 80059e2:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <KeyAlarmAyarlama+0x48>)
 80059e4:	701a      	strb	r2, [r3, #0]
	SaatAry[1]=sAlarmGet.AlarmTime.Minutes;
 80059e6:	787b      	ldrb	r3, [r7, #1]
 80059e8:	b25a      	sxtb	r2, r3
 80059ea:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <KeyAlarmAyarlama+0x48>)
 80059ec:	705a      	strb	r2, [r3, #1]
	SaatAry[2]=sAlarmGet.AlarmTime.Seconds;
 80059ee:	78bb      	ldrb	r3, [r7, #2]
 80059f0:	b25a      	sxtb	r2, r3
 80059f2:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <KeyAlarmAyarlama+0x48>)
 80059f4:	709a      	strb	r2, [r3, #2]

	displaySelectKey=ALARM_AYARLAMA;
 80059f6:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <KeyAlarmAyarlama+0x4c>)
 80059f8:	2243      	movs	r2, #67	; 0x43
 80059fa:	701a      	strb	r2, [r3, #0]
	SaatAryNo=0;
 80059fc:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <KeyAlarmAyarlama+0x50>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
	displayClean=true;
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <KeyAlarmAyarlama+0x54>)
 8005a04:	2201      	movs	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]

}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	20000924 	.word	0x20000924
 8005a14:	20000920 	.word	0x20000920
 8005a18:	20000a22 	.word	0x20000a22
 8005a1c:	20000a2c 	.word	0x20000a2c
 8005a20:	20000a00 	.word	0x20000a00

08005a24 <KeyTakvimiAyarlama>:
/*Geçerli takvim bilgisini okuyup saat ayar ekranına yönlendirecek Key1 değerini ayarlar */

void KeyTakvimiAyarlama()
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0

	extern RTC_HandleTypeDef hrtc;
	RTC_DateTypeDef sDateGet;
	HAL_RTC_GetDate(&hrtc, &sDateGet, RTC_FORMAT_BIN);
 8005a2a:	1d3b      	adds	r3, r7, #4
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4619      	mov	r1, r3
 8005a30:	480f      	ldr	r0, [pc, #60]	; (8005a70 <KeyTakvimiAyarlama+0x4c>)
 8005a32:	f7fd fe05 	bl	8003640 <HAL_RTC_GetDate>

	takvimAry[0]=sDateGet.Date;
 8005a36:	79bb      	ldrb	r3, [r7, #6]
 8005a38:	b25a      	sxtb	r2, r3
 8005a3a:	4b0e      	ldr	r3, [pc, #56]	; (8005a74 <KeyTakvimiAyarlama+0x50>)
 8005a3c:	701a      	strb	r2, [r3, #0]
	takvimAry[1]=sDateGet.Month;
 8005a3e:	797b      	ldrb	r3, [r7, #5]
 8005a40:	b25a      	sxtb	r2, r3
 8005a42:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <KeyTakvimiAyarlama+0x50>)
 8005a44:	705a      	strb	r2, [r3, #1]
	takvimAry[2]=sDateGet.Year;
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	b25a      	sxtb	r2, r3
 8005a4a:	4b0a      	ldr	r3, [pc, #40]	; (8005a74 <KeyTakvimiAyarlama+0x50>)
 8005a4c:	709a      	strb	r2, [r3, #2]
	takvimAry[3]=sDateGet.WeekDay;
 8005a4e:	793b      	ldrb	r3, [r7, #4]
 8005a50:	b25a      	sxtb	r2, r3
 8005a52:	4b08      	ldr	r3, [pc, #32]	; (8005a74 <KeyTakvimiAyarlama+0x50>)
 8005a54:	70da      	strb	r2, [r3, #3]

	displaySelectKey=TAKVIMI_AYARLAMA;
 8005a56:	4b08      	ldr	r3, [pc, #32]	; (8005a78 <KeyTakvimiAyarlama+0x54>)
 8005a58:	2242      	movs	r2, #66	; 0x42
 8005a5a:	701a      	strb	r2, [r3, #0]
	takvimAryNo=0;
 8005a5c:	4b07      	ldr	r3, [pc, #28]	; (8005a7c <KeyTakvimiAyarlama+0x58>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	701a      	strb	r2, [r3, #0]
	displayClean=true;
 8005a62:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <KeyTakvimiAyarlama+0x5c>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	701a      	strb	r2, [r3, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000924 	.word	0x20000924
 8005a74:	200009bc 	.word	0x200009bc
 8005a78:	20000a22 	.word	0x20000a22
 8005a7c:	20000828 	.word	0x20000828
 8005a80:	20000a00 	.word	0x20000a00

08005a84 <kayitSorma>:



void kayitSorma(uint8_t x1,uint8_t y1)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	460a      	mov	r2, r1
 8005a8e:	71fb      	strb	r3, [r7, #7]
 8005a90:	4613      	mov	r3, r2
 8005a92:	71bb      	strb	r3, [r7, #6]
	if(durumFlash)
 8005a94:	4b12      	ldr	r3, [pc, #72]	; (8005ae0 <kayitSorma+0x5c>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00e      	beq.n	8005aba <kayitSorma+0x36>
	{
		OLED_SetCursor(x1, y1+20);
 8005a9c:	79bb      	ldrb	r3, [r7, #6]
 8005a9e:	3314      	adds	r3, #20
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7ff fb6c 	bl	8005184 <OLED_SetCursor>
		OLED_WriteString("Kaydedilsin mi?", Font_7x10, White);
 8005aac:	4a0d      	ldr	r2, [pc, #52]	; (8005ae4 <kayitSorma+0x60>)
 8005aae:	2301      	movs	r3, #1
 8005ab0:	ca06      	ldmia	r2, {r1, r2}
 8005ab2:	480d      	ldr	r0, [pc, #52]	; (8005ae8 <kayitSorma+0x64>)
 8005ab4:	f7ff fb40 	bl	8005138 <OLED_WriteString>
	else
	{
		OLED_SetCursor(x1, y1+20);
		OLED_WriteString("               ", Font_7x10, White);
	}
}
 8005ab8:	e00d      	b.n	8005ad6 <kayitSorma+0x52>
		OLED_SetCursor(x1, y1+20);
 8005aba:	79bb      	ldrb	r3, [r7, #6]
 8005abc:	3314      	adds	r3, #20
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	79fb      	ldrb	r3, [r7, #7]
 8005ac2:	4611      	mov	r1, r2
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff fb5d 	bl	8005184 <OLED_SetCursor>
		OLED_WriteString("               ", Font_7x10, White);
 8005aca:	4a06      	ldr	r2, [pc, #24]	; (8005ae4 <kayitSorma+0x60>)
 8005acc:	2301      	movs	r3, #1
 8005ace:	ca06      	ldmia	r2, {r1, r2}
 8005ad0:	4806      	ldr	r0, [pc, #24]	; (8005aec <kayitSorma+0x68>)
 8005ad2:	f7ff fb31 	bl	8005138 <OLED_WriteString>
}
 8005ad6:	bf00      	nop
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000829 	.word	0x20000829
 8005ae4:	2000000c 	.word	0x2000000c
 8005ae8:	08007610 	.word	0x08007610
 8005aec:	08007620 	.word	0x08007620

08005af0 <alarmRead>:

bool alarmRead(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
	return ((RTC->CRL & RTC_CRL_ALRF_Msk)>> RTC_CRL_ALRF_Pos);//RTC_CRL_ALRF_Pos
 8005af4:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <alarmRead+0x20>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	085b      	lsrs	r3, r3, #1
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	40002800 	.word	0x40002800

08005b14 <alarmDurdur>:

void alarmDurdur()
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
	RTC->CRL &=~RTC_CRL_ALRF;;
 8005b18:	4b04      	ldr	r3, [pc, #16]	; (8005b2c <alarmDurdur+0x18>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a03      	ldr	r2, [pc, #12]	; (8005b2c <alarmDurdur+0x18>)
 8005b1e:	f023 0302 	bic.w	r3, r3, #2
 8005b22:	6053      	str	r3, [r2, #4]
}
 8005b24:	bf00      	nop
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr
 8005b2c:	40002800 	.word	0x40002800

08005b30 <alarmDeneme>:

void alarmDeneme(uint8_t alarmDurdurmaKeyDegeri)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	4603      	mov	r3, r0
 8005b38:	71fb      	strb	r3, [r7, #7]
	if(Key==alarmDurdurmaKeyDegeri)
 8005b3a:	4b14      	ldr	r3, [pc, #80]	; (8005b8c <alarmDeneme+0x5c>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	79fa      	ldrb	r2, [r7, #7]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d101      	bne.n	8005b48 <alarmDeneme+0x18>
	{
		alarmDurdur();
 8005b44:	f7ff ffe6 	bl	8005b14 <alarmDurdur>
	}

	if(alarmRead())
 8005b48:	f7ff ffd2 	bl	8005af0 <alarmRead>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d012      	beq.n	8005b78 <alarmDeneme+0x48>
	{
		HAL_GPIO_WritePin(LED_ALARM_GPIO_Port, LED_ALARM_Pin,SET);
 8005b52:	2201      	movs	r2, #1
 8005b54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b58:	480d      	ldr	r0, [pc, #52]	; (8005b90 <alarmDeneme+0x60>)
 8005b5a:	f7fc f952 	bl	8001e02 <HAL_GPIO_WritePin>
		if(!displayDurum)
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <alarmDeneme+0x64>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	f083 0301 	eor.w	r3, r3, #1
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <alarmDeneme+0x54>
		{
			displayDurum=true;
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <alarmDeneme+0x64>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]
			OLED_Init();
 8005b72:	f7fe ffdd 	bl	8004b30 <OLED_Init>
	}
	else
	{
		HAL_GPIO_WritePin(LED_ALARM_GPIO_Port, LED_ALARM_Pin,RESET);
	}
}
 8005b76:	e005      	b.n	8005b84 <alarmDeneme+0x54>
		HAL_GPIO_WritePin(LED_ALARM_GPIO_Port, LED_ALARM_Pin,RESET);
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b7e:	4804      	ldr	r0, [pc, #16]	; (8005b90 <alarmDeneme+0x60>)
 8005b80:	f7fc f93f 	bl	8001e02 <HAL_GPIO_WritePin>
}
 8005b84:	bf00      	nop
 8005b86:	3708      	adds	r7, #8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000a21 	.word	0x20000a21
 8005b90:	40010c00 	.word	0x40010c00
 8005b94:	20000748 	.word	0x20000748

08005b98 <alarmGoster>:

void alarmGoster()
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af02      	add	r7, sp, #8
	extern RTC_HandleTypeDef hrtc;

	RTC_AlarmTypeDef sAlarmGet;

	/* Get the RTC current Time */
	HAL_RTC_GetAlarm(&hrtc, &sAlarmGet,RTC_ALARM_A, RTC_FORMAT_BIN);
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	480e      	ldr	r0, [pc, #56]	; (8005be0 <alarmGoster+0x48>)
 8005ba6:	f7fd fe53 	bl	8003850 <HAL_RTC_GetAlarm>

	/* Display time Format : hh:mm:ss */
	sprintf(aShowAlarm, "%2d:%02d:%02d", sAlarmGet.AlarmTime.Hours, sAlarmGet.AlarmTime.Minutes, sAlarmGet.AlarmTime.Seconds);
 8005baa:	783b      	ldrb	r3, [r7, #0]
 8005bac:	461a      	mov	r2, r3
 8005bae:	787b      	ldrb	r3, [r7, #1]
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	78bb      	ldrb	r3, [r7, #2]
 8005bb4:	f107 0008 	add.w	r0, r7, #8
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4909      	ldr	r1, [pc, #36]	; (8005be4 <alarmGoster+0x4c>)
 8005bbe:	f001 f8d1 	bl	8006d64 <siprintf>
	OLED_SetCursor(30, 0);
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	201e      	movs	r0, #30
 8005bc6:	f7ff fadd 	bl	8005184 <OLED_SetCursor>
	OLED_WriteString(aShowAlarm, Font_7x10, White);
 8005bca:	4a07      	ldr	r2, [pc, #28]	; (8005be8 <alarmGoster+0x50>)
 8005bcc:	f107 0008 	add.w	r0, r7, #8
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	ca06      	ldmia	r2, {r1, r2}
 8005bd4:	f7ff fab0 	bl	8005138 <OLED_WriteString>
}
 8005bd8:	bf00      	nop
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20000924 	.word	0x20000924
 8005be4:	08007630 	.word	0x08007630
 8005be8:	2000000c 	.word	0x2000000c

08005bec <takvimGoster>:
	OLED_SetCursor(30, 0);
	OLED_WriteString(aShowTime, Font_7x10, White);
}

void takvimGoster()
{
 8005bec:	b5b0      	push	{r4, r5, r7, lr}
 8005bee:	b094      	sub	sp, #80	; 0x50
 8005bf0:	af02      	add	r7, sp, #8

	RTC_TimeTypeDef sTimeGet;
	RTC_DateTypeDef sDateGet;

//	  const char* weekD[] = {"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "??"};
	char* weekDay[] ={ "Pzt", "Sal", "Car", "Per", "Cum", "Cmt", "Paz"}; //{ "Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday", "Sunday"};
 8005bf2:	4b39      	ldr	r3, [pc, #228]	; (8005cd8 <takvimGoster+0xec>)
 8005bf4:	1d3c      	adds	r4, r7, #4
 8005bf6:	461d      	mov	r5, r3
 8005bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c00:	e884 0007 	stmia.w	r4, {r0, r1, r2}


	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &sTimeGet, RTC_FORMAT_BIN);
 8005c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c08:	2200      	movs	r2, #0
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4833      	ldr	r0, [pc, #204]	; (8005cdc <takvimGoster+0xf0>)
 8005c0e:	f7fd fb89 	bl	8003324 <HAL_RTC_GetTime>
	/* Display time Format : hh:mm:ss */
	sprintf(aShowTime, "%2d:%02d", sTimeGet.Hours, sTimeGet.Minutes);//sTimeGet.Seconds
 8005c12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c16:	461a      	mov	r2, r3
 8005c18:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c1c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005c20:	492f      	ldr	r1, [pc, #188]	; (8005ce0 <takvimGoster+0xf4>)
 8005c22:	f001 f89f 	bl	8006d64 <siprintf>
	OLED_SetCursor(20, 20);
 8005c26:	2114      	movs	r1, #20
 8005c28:	2014      	movs	r0, #20
 8005c2a:	f7ff faab 	bl	8005184 <OLED_SetCursor>
	OLED_WriteString(aShowTime, Font_16x26, White);
 8005c2e:	4a2d      	ldr	r2, [pc, #180]	; (8005ce4 <takvimGoster+0xf8>)
 8005c30:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005c34:	2301      	movs	r3, #1
 8005c36:	ca06      	ldmia	r2, {r1, r2}
 8005c38:	f7ff fa7e 	bl	8005138 <OLED_WriteString>
	sprintf(aShowTime, "%02d",sTimeGet.Seconds);
 8005c3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c40:	461a      	mov	r2, r3
 8005c42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c46:	4928      	ldr	r1, [pc, #160]	; (8005ce8 <takvimGoster+0xfc>)
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f001 f88b 	bl	8006d64 <siprintf>
	OLED_SetCursor(105, 32);
 8005c4e:	2120      	movs	r1, #32
 8005c50:	2069      	movs	r0, #105	; 0x69
 8005c52:	f7ff fa97 	bl	8005184 <OLED_SetCursor>
	OLED_WriteString(aShowTime, Font_7x10, White);
 8005c56:	4a25      	ldr	r2, [pc, #148]	; (8005cec <takvimGoster+0x100>)
 8005c58:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	ca06      	ldmia	r2, {r1, r2}
 8005c60:	f7ff fa6a 	bl	8005138 <OLED_WriteString>

	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &sDateGet, RTC_FORMAT_BIN);
 8005c64:	f107 0320 	add.w	r3, r7, #32
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	481b      	ldr	r0, [pc, #108]	; (8005cdc <takvimGoster+0xf0>)
 8005c6e:	f7fd fce7 	bl	8003640 <HAL_RTC_GetDate>
	/* Display date Format : mm-dd-yy */
	sprintf(aShowDate, "%02d-%02d-%2d", sDateGet.Date, sDateGet.Month,
 8005c72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005c76:	461a      	mov	r2, r3
 8005c78:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8005c7c:	4619      	mov	r1, r3
			2000 + sDateGet.Year);
 8005c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
	sprintf(aShowDate, "%02d-%02d-%2d", sDateGet.Date, sDateGet.Month,
 8005c82:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005c86:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	4918      	ldr	r1, [pc, #96]	; (8005cf0 <takvimGoster+0x104>)
 8005c90:	f001 f868 	bl	8006d64 <siprintf>
	OLED_SetCursor(10, 50);
 8005c94:	2132      	movs	r1, #50	; 0x32
 8005c96:	200a      	movs	r0, #10
 8005c98:	f7ff fa74 	bl	8005184 <OLED_SetCursor>
	OLED_WriteString(aShowDate, Font_7x10, White);
 8005c9c:	4a13      	ldr	r2, [pc, #76]	; (8005cec <takvimGoster+0x100>)
 8005c9e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	ca06      	ldmia	r2, {r1, r2}
 8005ca6:	f7ff fa47 	bl	8005138 <OLED_WriteString>
	OLED_SetCursor(95, 50);
 8005caa:	2132      	movs	r1, #50	; 0x32
 8005cac:	205f      	movs	r0, #95	; 0x5f
 8005cae:	f7ff fa69 	bl	8005184 <OLED_SetCursor>
	OLED_WriteString(weekDay[sDateGet.WeekDay-1], Font_7x10, White);  //
 8005cb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f853 0c44 	ldr.w	r0, [r3, #-68]
 8005cc4:	4a09      	ldr	r2, [pc, #36]	; (8005cec <takvimGoster+0x100>)
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	ca06      	ldmia	r2, {r1, r2}
 8005cca:	f7ff fa35 	bl	8005138 <OLED_WriteString>
}
 8005cce:	bf00      	nop
 8005cd0:	3748      	adds	r7, #72	; 0x48
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	08007680 	.word	0x08007680
 8005cdc:	20000924 	.word	0x20000924
 8005ce0:	08007640 	.word	0x08007640
 8005ce4:	2000001c 	.word	0x2000001c
 8005ce8:	0800764c 	.word	0x0800764c
 8005cec:	2000000c 	.word	0x2000000c
 8005cf0:	08007654 	.word	0x08007654

08005cf4 <takvimGeriYukleme>:
void takvimGeriYukleme()
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	af00      	add	r7, sp, #0
	takvimAry[0]=(BKP->DR4>>8);
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <takvimGeriYukleme+0x38>)
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	0a1b      	lsrs	r3, r3, #8
 8005cfe:	b25a      	sxtb	r2, r3
 8005d00:	4b0b      	ldr	r3, [pc, #44]	; (8005d30 <takvimGeriYukleme+0x3c>)
 8005d02:	701a      	strb	r2, [r3, #0]
	takvimAry[1]=(BKP->DR4)&0xFF;
 8005d04:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <takvimGeriYukleme+0x38>)
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	b25a      	sxtb	r2, r3
 8005d0a:	4b09      	ldr	r3, [pc, #36]	; (8005d30 <takvimGeriYukleme+0x3c>)
 8005d0c:	705a      	strb	r2, [r3, #1]
	takvimAry[2]=(BKP->DR5>>8);
 8005d0e:	4b07      	ldr	r3, [pc, #28]	; (8005d2c <takvimGeriYukleme+0x38>)
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	b25a      	sxtb	r2, r3
 8005d16:	4b06      	ldr	r3, [pc, #24]	; (8005d30 <takvimGeriYukleme+0x3c>)
 8005d18:	709a      	strb	r2, [r3, #2]
	takvimAry[3]=(BKP->DR5)&0xFF;
 8005d1a:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <takvimGeriYukleme+0x38>)
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	b25a      	sxtb	r2, r3
 8005d20:	4b03      	ldr	r3, [pc, #12]	; (8005d30 <takvimGeriYukleme+0x3c>)
 8005d22:	70da      	strb	r2, [r3, #3]
	takvimAyarla();
 8005d24:	f7ff faa6 	bl	8005274 <takvimAyarla>
}
 8005d28:	bf00      	nop
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40006c00 	.word	0x40006c00
 8005d30:	200009bc 	.word	0x200009bc

08005d34 <alarmGeriYukleme>:

void alarmGeriYukleme()
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
	  SaatAry[0]=(BKP->DR6>>8);
 8005d38:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <alarmGeriYukleme+0x30>)
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	0a1b      	lsrs	r3, r3, #8
 8005d3e:	b25a      	sxtb	r2, r3
 8005d40:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <alarmGeriYukleme+0x34>)
 8005d42:	701a      	strb	r2, [r3, #0]
	  SaatAry[1]=(BKP->DR6)&0xFF;
 8005d44:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <alarmGeriYukleme+0x30>)
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	b25a      	sxtb	r2, r3
 8005d4a:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <alarmGeriYukleme+0x34>)
 8005d4c:	705a      	strb	r2, [r3, #1]
	  SaatAry[2]=(BKP->DR7>>8);
 8005d4e:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <alarmGeriYukleme+0x30>)
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	b25a      	sxtb	r2, r3
 8005d56:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <alarmGeriYukleme+0x34>)
 8005d58:	709a      	strb	r2, [r3, #2]
	  alarmAyarla();
 8005d5a:	f7ff fa51 	bl	8005200 <alarmAyarla>
}
 8005d5e:	bf00      	nop
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	40006c00 	.word	0x40006c00
 8005d68:	20000920 	.word	0x20000920

08005d6c <servoKontrol>:
#include "include_Ap.h"

void servoKontrol()
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
	extern uint16_t servoDeger;
	extern TIM_HandleTypeDef htim15;
		switch(Key)
 8005d70:	4b23      	ldr	r3, [pc, #140]	; (8005e00 <servoKontrol+0x94>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2bb8      	cmp	r3, #184	; 0xb8
 8005d76:	d034      	beq.n	8005de2 <servoKontrol+0x76>
 8005d78:	2bb8      	cmp	r3, #184	; 0xb8
 8005d7a:	dc02      	bgt.n	8005d82 <servoKontrol+0x16>
 8005d7c:	2b78      	cmp	r3, #120	; 0x78
 8005d7e:	d021      	beq.n	8005dc4 <servoKontrol+0x58>
 8005d80:	e036      	b.n	8005df0 <servoKontrol+0x84>
 8005d82:	2bd8      	cmp	r3, #216	; 0xd8
 8005d84:	d002      	beq.n	8005d8c <servoKontrol+0x20>
 8005d86:	2be8      	cmp	r3, #232	; 0xe8
 8005d88:	d00e      	beq.n	8005da8 <servoKontrol+0x3c>
 8005d8a:	e031      	b.n	8005df0 <servoKontrol+0x84>
		{
		case T1DEGER:
			servoDeger=94;
 8005d8c:	4b1d      	ldr	r3, [pc, #116]	; (8005e04 <servoKontrol+0x98>)
 8005d8e:	225e      	movs	r2, #94	; 0x5e
 8005d90:	801a      	strh	r2, [r3, #0]
			OLED_SetCursor(0, 20);
 8005d92:	2114      	movs	r1, #20
 8005d94:	2000      	movs	r0, #0
 8005d96:	f7ff f9f5 	bl	8005184 <OLED_SetCursor>
			OLED_WriteString("SERVO ACISI :  0", Font_7x10, White);
 8005d9a:	4a1b      	ldr	r2, [pc, #108]	; (8005e08 <servoKontrol+0x9c>)
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	ca06      	ldmia	r2, {r1, r2}
 8005da0:	481a      	ldr	r0, [pc, #104]	; (8005e0c <servoKontrol+0xa0>)
 8005da2:	f7ff f9c9 	bl	8005138 <OLED_WriteString>

			break;
 8005da6:	e023      	b.n	8005df0 <servoKontrol+0x84>
		case T2DEGER:
			servoDeger=219;
 8005da8:	4b16      	ldr	r3, [pc, #88]	; (8005e04 <servoKontrol+0x98>)
 8005daa:	22db      	movs	r2, #219	; 0xdb
 8005dac:	801a      	strh	r2, [r3, #0]
			OLED_SetCursor(0, 20);
 8005dae:	2114      	movs	r1, #20
 8005db0:	2000      	movs	r0, #0
 8005db2:	f7ff f9e7 	bl	8005184 <OLED_SetCursor>
			OLED_WriteString("SERVO ACISI : 90",  Font_7x10, White);
 8005db6:	4a14      	ldr	r2, [pc, #80]	; (8005e08 <servoKontrol+0x9c>)
 8005db8:	2301      	movs	r3, #1
 8005dba:	ca06      	ldmia	r2, {r1, r2}
 8005dbc:	4814      	ldr	r0, [pc, #80]	; (8005e10 <servoKontrol+0xa4>)
 8005dbe:	f7ff f9bb 	bl	8005138 <OLED_WriteString>

			break;
 8005dc2:	e015      	b.n	8005df0 <servoKontrol+0x84>
		case T3DEGER:
			servoDeger=344;
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <servoKontrol+0x98>)
 8005dc6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8005dca:	801a      	strh	r2, [r3, #0]
			OLED_SetCursor(0, 20);
 8005dcc:	2114      	movs	r1, #20
 8005dce:	2000      	movs	r0, #0
 8005dd0:	f7ff f9d8 	bl	8005184 <OLED_SetCursor>
			OLED_WriteString("SERVO ACISI :180",  Font_7x10, White);
 8005dd4:	4a0c      	ldr	r2, [pc, #48]	; (8005e08 <servoKontrol+0x9c>)
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	ca06      	ldmia	r2, {r1, r2}
 8005dda:	480e      	ldr	r0, [pc, #56]	; (8005e14 <servoKontrol+0xa8>)
 8005ddc:	f7ff f9ac 	bl	8005138 <OLED_WriteString>

			break;
 8005de0:	e006      	b.n	8005df0 <servoKontrol+0x84>
			/*
			servoDeger=469;
			OLED_SetCursor(0, 20);
			OLED_WriteString("SERVO ACISI :270",  Font_7x10, White);
*/
			currentM = &ledlerM;
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <servoKontrol+0xac>)
 8005de4:	4a0d      	ldr	r2, [pc, #52]	; (8005e1c <servoKontrol+0xb0>)
 8005de6:	601a      	str	r2, [r3, #0]
			displaySelectKey=MENU_SISTEMI;
 8005de8:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <servoKontrol+0xb4>)
 8005dea:	2238      	movs	r2, #56	; 0x38
 8005dec:	701a      	strb	r2, [r3, #0]
			break;
 8005dee:	bf00      	nop

		}

		__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,servoDeger);
 8005df0:	4b04      	ldr	r3, [pc, #16]	; (8005e04 <servoKontrol+0x98>)
 8005df2:	881a      	ldrh	r2, [r3, #0]
 8005df4:	4b0b      	ldr	r3, [pc, #44]	; (8005e24 <servoKontrol+0xb8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	635a      	str	r2, [r3, #52]	; 0x34

}
 8005dfa:	bf00      	nop
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20000a21 	.word	0x20000a21
 8005e04:	20000a2e 	.word	0x20000a2e
 8005e08:	2000000c 	.word	0x2000000c
 8005e0c:	0800769c 	.word	0x0800769c
 8005e10:	080076b0 	.word	0x080076b0
 8005e14:	080076c4 	.word	0x080076c4
 8005e18:	200007d0 	.word	0x200007d0
 8005e1c:	200009e4 	.word	0x200009e4
 8005e20:	20000a22 	.word	0x20000a22
 8005e24:	200006ec 	.word	0x200006ec

08005e28 <KeyServoKontrol>:

void KeyServoKontrol()
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
	displaySelectKey=SERVO_KONTROL;
 8005e2c:	4b04      	ldr	r3, [pc, #16]	; (8005e40 <KeyServoKontrol+0x18>)
 8005e2e:	2244      	movs	r2, #68	; 0x44
 8005e30:	701a      	strb	r2, [r3, #0]
	displayClean=true;
 8005e32:	4b04      	ldr	r3, [pc, #16]	; (8005e44 <KeyServoKontrol+0x1c>)
 8005e34:	2201      	movs	r2, #1
 8005e36:	701a      	strb	r2, [r3, #0]
}
 8005e38:	bf00      	nop
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bc80      	pop	{r7}
 8005e3e:	4770      	bx	lr
 8005e40:	20000a22 	.word	0x20000a22
 8005e44:	20000a00 	.word	0x20000a00

08005e48 <button_Read>:
//  HAL_GPIO_Init(GPIOD, &ButtonPed_InitStruct);

}

void button_Read(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin1, uint16_t GPIO_Pin2, uint16_t GPIO_Pin3, uint16_t GPIO_Pin4,uint16_t GPIO_Pin5)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	4608      	mov	r0, r1
 8005e52:	4611      	mov	r1, r2
 8005e54:	461a      	mov	r2, r3
 8005e56:	4603      	mov	r3, r0
 8005e58:	817b      	strh	r3, [r7, #10]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	813b      	strh	r3, [r7, #8]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	80fb      	strh	r3, [r7, #6]
  Key=(GPIOx->IDR & (GPIO_Pin1|GPIO_Pin2|GPIO_Pin3|GPIO_Pin4|GPIO_Pin5));
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	897b      	ldrh	r3, [r7, #10]
 8005e6a:	b2d9      	uxtb	r1, r3
 8005e6c:	893b      	ldrh	r3, [r7, #8]
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	430b      	orrs	r3, r1
 8005e72:	b2d9      	uxtb	r1, r3
 8005e74:	88fb      	ldrh	r3, [r7, #6]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	430b      	orrs	r3, r1
 8005e7a:	b2d9      	uxtb	r1, r3
 8005e7c:	8b3b      	ldrh	r3, [r7, #24]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	430b      	orrs	r3, r1
 8005e82:	b2d9      	uxtb	r1, r3
 8005e84:	8bbb      	ldrh	r3, [r7, #28]
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	430b      	orrs	r3, r1
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	4b06      	ldr	r3, [pc, #24]	; (8005eac <button_Read+0x64>)
 8005e92:	701a      	strb	r2, [r3, #0]

  if(Key==T0DEGER)
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <button_Read+0x64>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2bf8      	cmp	r3, #248	; 0xf8
 8005e9a:	d102      	bne.n	8005ea2 <button_Read+0x5a>
  {
	  durum=true;
 8005e9c:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <button_Read+0x68>)
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	701a      	strb	r2, [r3, #0]
  }
}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr
 8005eac:	20000a21 	.word	0x20000a21
 8005eb0:	2000082a 	.word	0x2000082a

08005eb4 <displaySelect>:
 */
#include "include_Ap.h"

/*Ekranda gösterilecek unsurları Key1 değerine göre seçer */
void displaySelect()
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af02      	add	r7, sp, #8

	button_Read(GPIOB,KEY_1_Pin,KEY_2_Pin,KEY_3_Pin,KEY_4_Pin,KEY_5_Pin); /*Menu ekranına geçirecek kısayol tuş kombinasyonunu algılayıp Key1 değerine aktarır*/
 8005eba:	2380      	movs	r3, #128	; 0x80
 8005ebc:	9301      	str	r3, [sp, #4]
 8005ebe:	2340      	movs	r3, #64	; 0x40
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	2320      	movs	r3, #32
 8005ec4:	2210      	movs	r2, #16
 8005ec6:	2108      	movs	r1, #8
 8005ec8:	4864      	ldr	r0, [pc, #400]	; (800605c <displaySelect+0x1a8>)
 8005eca:	f7ff ffbd 	bl	8005e48 <button_Read>
	if(Key==MENU_SISTEMI)
 8005ece:	4b64      	ldr	r3, [pc, #400]	; (8006060 <displaySelect+0x1ac>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b38      	cmp	r3, #56	; 0x38
 8005ed4:	d106      	bne.n	8005ee4 <displaySelect+0x30>
	{
		displaySelectKey=Key;
 8005ed6:	4b62      	ldr	r3, [pc, #392]	; (8006060 <displaySelect+0x1ac>)
 8005ed8:	781a      	ldrb	r2, [r3, #0]
 8005eda:	4b62      	ldr	r3, [pc, #392]	; (8006064 <displaySelect+0x1b0>)
 8005edc:	701a      	strb	r2, [r3, #0]
		displayClean=true;
 8005ede:	4b62      	ldr	r3, [pc, #392]	; (8006068 <displaySelect+0x1b4>)
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	701a      	strb	r2, [r3, #0]
	}
	switch(displaySelectKey)
 8005ee4:	4b5f      	ldr	r3, [pc, #380]	; (8006064 <displaySelect+0x1b0>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b45      	cmp	r3, #69	; 0x45
 8005eea:	d073      	beq.n	8005fd4 <displaySelect+0x120>
 8005eec:	2b45      	cmp	r3, #69	; 0x45
 8005eee:	dc0d      	bgt.n	8005f0c <displaySelect+0x58>
 8005ef0:	2b42      	cmp	r3, #66	; 0x42
 8005ef2:	d037      	beq.n	8005f64 <displaySelect+0xb0>
 8005ef4:	2b42      	cmp	r3, #66	; 0x42
 8005ef6:	dc04      	bgt.n	8005f02 <displaySelect+0x4e>
 8005ef8:	2b38      	cmp	r3, #56	; 0x38
 8005efa:	d017      	beq.n	8005f2c <displaySelect+0x78>
 8005efc:	2b41      	cmp	r3, #65	; 0x41
 8005efe:	d023      	beq.n	8005f48 <displaySelect+0x94>
		motor2Kontrol();

		break;

	}
}
 8005f00:	e0a9      	b.n	8006056 <displaySelect+0x1a2>
	switch(displaySelectKey)
 8005f02:	2b43      	cmp	r3, #67	; 0x43
 8005f04:	d03c      	beq.n	8005f80 <displaySelect+0xcc>
 8005f06:	2b44      	cmp	r3, #68	; 0x44
 8005f08:	d057      	beq.n	8005fba <displaySelect+0x106>
}
 8005f0a:	e0a4      	b.n	8006056 <displaySelect+0x1a2>
	switch(displaySelectKey)
 8005f0c:	2b48      	cmp	r3, #72	; 0x48
 8005f0e:	f000 8088 	beq.w	8006022 <displaySelect+0x16e>
 8005f12:	2b48      	cmp	r3, #72	; 0x48
 8005f14:	dc04      	bgt.n	8005f20 <displaySelect+0x6c>
 8005f16:	2b46      	cmp	r3, #70	; 0x46
 8005f18:	d069      	beq.n	8005fee <displaySelect+0x13a>
 8005f1a:	2b47      	cmp	r3, #71	; 0x47
 8005f1c:	d074      	beq.n	8006008 <displaySelect+0x154>
}
 8005f1e:	e09a      	b.n	8006056 <displaySelect+0x1a2>
	switch(displaySelectKey)
 8005f20:	2b49      	cmp	r3, #73	; 0x49
 8005f22:	f000 808b 	beq.w	800603c <displaySelect+0x188>
 8005f26:	2ba8      	cmp	r3, #168	; 0xa8
 8005f28:	d038      	beq.n	8005f9c <displaySelect+0xe8>
}
 8005f2a:	e094      	b.n	8006056 <displaySelect+0x1a2>
		if(displayClean)
 8005f2c:	4b4e      	ldr	r3, [pc, #312]	; (8006068 <displaySelect+0x1b4>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <displaySelect+0x8c>
		displayClean=false;
 8005f34:	4b4c      	ldr	r3, [pc, #304]	; (8006068 <displaySelect+0x1b4>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	f7fe fe6a 	bl	8004c14 <OLED_Fill>
		menuSistemi(6);
 8005f40:	2006      	movs	r0, #6
 8005f42:	f000 fc49 	bl	80067d8 <menuSistemi>
		break;
 8005f46:	e086      	b.n	8006056 <displaySelect+0x1a2>
		if(displayClean)
 8005f48:	4b47      	ldr	r3, [pc, #284]	; (8006068 <displaySelect+0x1b4>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <displaySelect+0xa8>
		displayClean=false;
 8005f50:	4b45      	ldr	r3, [pc, #276]	; (8006068 <displaySelect+0x1b4>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8005f56:	2000      	movs	r0, #0
 8005f58:	f7fe fe5c 	bl	8004c14 <OLED_Fill>
		saatiAyarlama(30);
 8005f5c:	201e      	movs	r0, #30
 8005f5e:	f7ff f9cb 	bl	80052f8 <saatiAyarlama>
		break;
 8005f62:	e078      	b.n	8006056 <displaySelect+0x1a2>
		if(displayClean)
 8005f64:	4b40      	ldr	r3, [pc, #256]	; (8006068 <displaySelect+0x1b4>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <displaySelect+0xc4>
		displayClean=false;
 8005f6c:	4b3e      	ldr	r3, [pc, #248]	; (8006068 <displaySelect+0x1b4>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8005f72:	2000      	movs	r0, #0
 8005f74:	f7fe fe4e 	bl	8004c14 <OLED_Fill>
		takvimiAyarlama(20);
 8005f78:	2014      	movs	r0, #20
 8005f7a:	f7ff fb23 	bl	80055c4 <takvimiAyarlama>
		break;
 8005f7e:	e06a      	b.n	8006056 <displaySelect+0x1a2>
		if(displayClean)
 8005f80:	4b39      	ldr	r3, [pc, #228]	; (8006068 <displaySelect+0x1b4>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <displaySelect+0xe0>
		displayClean=false;
 8005f88:	4b37      	ldr	r3, [pc, #220]	; (8006068 <displaySelect+0x1b4>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8005f8e:	2000      	movs	r0, #0
 8005f90:	f7fe fe40 	bl	8004c14 <OLED_Fill>
		alarmAyarlama(20);
 8005f94:	2014      	movs	r0, #20
 8005f96:	f7ff fb01 	bl	800559c <alarmAyarlama>
		break;
 8005f9a:	e05c      	b.n	8006056 <displaySelect+0x1a2>
		if(displayClean)
 8005f9c:	4b32      	ldr	r3, [pc, #200]	; (8006068 <displaySelect+0x1b4>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <displaySelect+0xfc>
		displayClean=false;
 8005fa4:	4b30      	ldr	r3, [pc, #192]	; (8006068 <displaySelect+0x1b4>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8005faa:	2000      	movs	r0, #0
 8005fac:	f7fe fe32 	bl	8004c14 <OLED_Fill>
		alarmGoster();
 8005fb0:	f7ff fdf2 	bl	8005b98 <alarmGoster>
		takvimGoster();
 8005fb4:	f7ff fe1a 	bl	8005bec <takvimGoster>
		break;
 8005fb8:	e04d      	b.n	8006056 <displaySelect+0x1a2>
		if(displayClean)
 8005fba:	4b2b      	ldr	r3, [pc, #172]	; (8006068 <displaySelect+0x1b4>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <displaySelect+0x11a>
		displayClean=false;
 8005fc2:	4b29      	ldr	r3, [pc, #164]	; (8006068 <displaySelect+0x1b4>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8005fc8:	2000      	movs	r0, #0
 8005fca:	f7fe fe23 	bl	8004c14 <OLED_Fill>
		servoKontrol();
 8005fce:	f7ff fecd 	bl	8005d6c <servoKontrol>
		break;
 8005fd2:	e040      	b.n	8006056 <displaySelect+0x1a2>
		if(displayClean)
 8005fd4:	4b24      	ldr	r3, [pc, #144]	; (8006068 <displaySelect+0x1b4>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <displaySelect+0x134>
		displayClean=false;
 8005fdc:	4b22      	ldr	r3, [pc, #136]	; (8006068 <displaySelect+0x1b4>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	f7fe fe16 	bl	8004c14 <OLED_Fill>
		petFeedSetting();
 8005fe8:	f000 fccc 	bl	8006984 <petFeedSetting>
		break;
 8005fec:	e033      	b.n	8006056 <displaySelect+0x1a2>
		if(displayClean)
 8005fee:	4b1e      	ldr	r3, [pc, #120]	; (8006068 <displaySelect+0x1b4>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d005      	beq.n	8006002 <displaySelect+0x14e>
		displayClean=false;
 8005ff6:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <displaySelect+0x1b4>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	f7fe fe09 	bl	8004c14 <OLED_Fill>
		petWaterSetting();
 8006002:	f000 fd83 	bl	8006b0c <petWaterSetting>
		break;
 8006006:	e026      	b.n	8006056 <displaySelect+0x1a2>
		if(displayClean)
 8006008:	4b17      	ldr	r3, [pc, #92]	; (8006068 <displaySelect+0x1b4>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <displaySelect+0x168>
		displayClean=false;
 8006010:	4b15      	ldr	r3, [pc, #84]	; (8006068 <displaySelect+0x1b4>)
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8006016:	2000      	movs	r0, #0
 8006018:	f7fe fdfc 	bl	8004c14 <OLED_Fill>
		petRewardFeedSetting();
 800601c:	f000 fd14 	bl	8006a48 <petRewardFeedSetting>
		break;
 8006020:	e019      	b.n	8006056 <displaySelect+0x1a2>
		if(displayClean)
 8006022:	4b11      	ldr	r3, [pc, #68]	; (8006068 <displaySelect+0x1b4>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <displaySelect+0x182>
		displayClean=false;
 800602a:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <displaySelect+0x1b4>)
 800602c:	2200      	movs	r2, #0
 800602e:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 8006030:	2000      	movs	r0, #0
 8006032:	f7fe fdef 	bl	8004c14 <OLED_Fill>
		motor1Kontrol();
 8006036:	f000 f8b9 	bl	80061ac <motor1Kontrol>
		break;
 800603a:	e00c      	b.n	8006056 <displaySelect+0x1a2>
		if(displayClean)
 800603c:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <displaySelect+0x1b4>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d005      	beq.n	8006050 <displaySelect+0x19c>
		displayClean=false;
 8006044:	4b08      	ldr	r3, [pc, #32]	; (8006068 <displaySelect+0x1b4>)
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
		OLED_Fill(Black);
 800604a:	2000      	movs	r0, #0
 800604c:	f7fe fde2 	bl	8004c14 <OLED_Fill>
		motor2Kontrol();
 8006050:	f000 f906 	bl	8006260 <motor2Kontrol>
		break;
 8006054:	bf00      	nop
}
 8006056:	bf00      	nop
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40010c00 	.word	0x40010c00
 8006060:	20000a21 	.word	0x20000a21
 8006064:	20000a22 	.word	0x20000a22
 8006068:	20000a00 	.word	0x20000a00

0800606c <menuExit>:

void menuExit()
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
	displaySelectKey=MENUEXIT;
 8006070:	4b06      	ldr	r3, [pc, #24]	; (800608c <menuExit+0x20>)
 8006072:	22a8      	movs	r2, #168	; 0xa8
 8006074:	701a      	strb	r2, [r3, #0]
	currentM = &menu1M;
 8006076:	4b06      	ldr	r3, [pc, #24]	; (8006090 <menuExit+0x24>)
 8006078:	4a06      	ldr	r2, [pc, #24]	; (8006094 <menuExit+0x28>)
 800607a:	601a      	str	r2, [r3, #0]
	displayClean=true;
 800607c:	4b06      	ldr	r3, [pc, #24]	; (8006098 <menuExit+0x2c>)
 800607e:	2201      	movs	r2, #1
 8006080:	701a      	strb	r2, [r3, #0]
}
 8006082:	bf00      	nop
 8006084:	46bd      	mov	sp, r7
 8006086:	bc80      	pop	{r7}
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	20000a22 	.word	0x20000a22
 8006090:	200007d0 	.word	0x200007d0
 8006094:	200009c8 	.word	0x200009c8
 8006098:	20000a00 	.word	0x20000a00

0800609c <motor1_forth>:
 */

#include "include_Ap.h"

void motor1_forth()
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR1_1_GPIO_Port, MOTOR1_1_Pin, SET);
 80060a0:	2201      	movs	r2, #1
 80060a2:	2140      	movs	r1, #64	; 0x40
 80060a4:	4804      	ldr	r0, [pc, #16]	; (80060b8 <motor1_forth+0x1c>)
 80060a6:	f7fb feac 	bl	8001e02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR1_2_GPIO_Port, MOTOR1_2_Pin, RESET);
 80060aa:	2200      	movs	r2, #0
 80060ac:	2180      	movs	r1, #128	; 0x80
 80060ae:	4802      	ldr	r0, [pc, #8]	; (80060b8 <motor1_forth+0x1c>)
 80060b0:	f7fb fea7 	bl	8001e02 <HAL_GPIO_WritePin>
}
 80060b4:	bf00      	nop
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40010800 	.word	0x40010800

080060bc <motor1_back>:

void motor1_back()
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR1_1_GPIO_Port, MOTOR1_1_Pin, RESET);
 80060c0:	2200      	movs	r2, #0
 80060c2:	2140      	movs	r1, #64	; 0x40
 80060c4:	4804      	ldr	r0, [pc, #16]	; (80060d8 <motor1_back+0x1c>)
 80060c6:	f7fb fe9c 	bl	8001e02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR1_2_GPIO_Port, MOTOR1_2_Pin, SET);
 80060ca:	2201      	movs	r2, #1
 80060cc:	2180      	movs	r1, #128	; 0x80
 80060ce:	4802      	ldr	r0, [pc, #8]	; (80060d8 <motor1_back+0x1c>)
 80060d0:	f7fb fe97 	bl	8001e02 <HAL_GPIO_WritePin>
}
 80060d4:	bf00      	nop
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	40010800 	.word	0x40010800

080060dc <motor2_forth>:

void motor2_forth()
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR2_1_GPIO_Port, MOTOR2_1_Pin, SET);
 80060e0:	2201      	movs	r2, #1
 80060e2:	2102      	movs	r1, #2
 80060e4:	4804      	ldr	r0, [pc, #16]	; (80060f8 <motor2_forth+0x1c>)
 80060e6:	f7fb fe8c 	bl	8001e02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR2_2_GPIO_Port, MOTOR2_2_Pin, RESET);
 80060ea:	2200      	movs	r2, #0
 80060ec:	2101      	movs	r1, #1
 80060ee:	4802      	ldr	r0, [pc, #8]	; (80060f8 <motor2_forth+0x1c>)
 80060f0:	f7fb fe87 	bl	8001e02 <HAL_GPIO_WritePin>
}
 80060f4:	bf00      	nop
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40010c00 	.word	0x40010c00

080060fc <motor2_back>:

void motor2_back()
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR2_1_GPIO_Port, MOTOR2_1_Pin, RESET);
 8006100:	2200      	movs	r2, #0
 8006102:	2102      	movs	r1, #2
 8006104:	4804      	ldr	r0, [pc, #16]	; (8006118 <motor2_back+0x1c>)
 8006106:	f7fb fe7c 	bl	8001e02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR2_2_GPIO_Port, MOTOR2_2_Pin, SET);
 800610a:	2201      	movs	r2, #1
 800610c:	2101      	movs	r1, #1
 800610e:	4802      	ldr	r0, [pc, #8]	; (8006118 <motor2_back+0x1c>)
 8006110:	f7fb fe77 	bl	8001e02 <HAL_GPIO_WritePin>
}
 8006114:	bf00      	nop
 8006116:	bd80      	pop	{r7, pc}
 8006118:	40010c00 	.word	0x40010c00

0800611c <motor1_stop>:

void motor1_stop()
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR1_1_GPIO_Port, MOTOR1_1_Pin, SET);
 8006120:	2201      	movs	r2, #1
 8006122:	2140      	movs	r1, #64	; 0x40
 8006124:	4804      	ldr	r0, [pc, #16]	; (8006138 <motor1_stop+0x1c>)
 8006126:	f7fb fe6c 	bl	8001e02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR1_2_GPIO_Port, MOTOR1_2_Pin, SET);
 800612a:	2201      	movs	r2, #1
 800612c:	2180      	movs	r1, #128	; 0x80
 800612e:	4802      	ldr	r0, [pc, #8]	; (8006138 <motor1_stop+0x1c>)
 8006130:	f7fb fe67 	bl	8001e02 <HAL_GPIO_WritePin>
}
 8006134:	bf00      	nop
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40010800 	.word	0x40010800

0800613c <motor2_stop>:

void motor2_stop()
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR2_1_GPIO_Port, MOTOR2_1_Pin, SET);
 8006140:	2201      	movs	r2, #1
 8006142:	2102      	movs	r1, #2
 8006144:	4804      	ldr	r0, [pc, #16]	; (8006158 <motor2_stop+0x1c>)
 8006146:	f7fb fe5c 	bl	8001e02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR2_2_GPIO_Port, MOTOR2_2_Pin, SET);
 800614a:	2201      	movs	r2, #1
 800614c:	2101      	movs	r1, #1
 800614e:	4802      	ldr	r0, [pc, #8]	; (8006158 <motor2_stop+0x1c>)
 8006150:	f7fb fe57 	bl	8001e02 <HAL_GPIO_WritePin>
}
 8006154:	bf00      	nop
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40010c00 	.word	0x40010c00

0800615c <motorDriverWakeUp>:

void motorDriverWakeUp()
{
 800615c:	b580      	push	{r7, lr}
 800615e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSLEEP_GPIO_Port, NSLEEP_Pin, SET);
 8006160:	2201      	movs	r2, #1
 8006162:	2120      	movs	r1, #32
 8006164:	4802      	ldr	r0, [pc, #8]	; (8006170 <motorDriverWakeUp+0x14>)
 8006166:	f7fb fe4c 	bl	8001e02 <HAL_GPIO_WritePin>
}
 800616a:	bf00      	nop
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40010800 	.word	0x40010800

08006174 <motorDriverSleep>:

void motorDriverSleep()
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSLEEP_GPIO_Port, NSLEEP_Pin, RESET);
 8006178:	2200      	movs	r2, #0
 800617a:	2120      	movs	r1, #32
 800617c:	4802      	ldr	r0, [pc, #8]	; (8006188 <motorDriverSleep+0x14>)
 800617e:	f7fb fe40 	bl	8001e02 <HAL_GPIO_WritePin>
}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40010800 	.word	0x40010800

0800618c <faultRead>:

bool faultRead(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(NFAULT_GPIO_Port, NFAULT_Pin);
 8006190:	2104      	movs	r1, #4
 8006192:	4805      	ldr	r0, [pc, #20]	; (80061a8 <faultRead+0x1c>)
 8006194:	f7fb fe1e 	bl	8001dd4 <HAL_GPIO_ReadPin>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	bf14      	ite	ne
 800619e:	2301      	movne	r3, #1
 80061a0:	2300      	moveq	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40010c00 	.word	0x40010c00

080061ac <motor1Kontrol>:

void motor1Kontrol()
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
		switch(Key)
 80061b0:	4b1d      	ldr	r3, [pc, #116]	; (8006228 <motor1Kontrol+0x7c>)
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2bb8      	cmp	r3, #184	; 0xb8
 80061b6:	d030      	beq.n	800621a <motor1Kontrol+0x6e>
 80061b8:	2bb8      	cmp	r3, #184	; 0xb8
 80061ba:	dc02      	bgt.n	80061c2 <motor1Kontrol+0x16>
 80061bc:	2b78      	cmp	r3, #120	; 0x78
 80061be:	d01f      	beq.n	8006200 <motor1Kontrol+0x54>
			break;

		}


}
 80061c0:	e02f      	b.n	8006222 <motor1Kontrol+0x76>
		switch(Key)
 80061c2:	2bd8      	cmp	r3, #216	; 0xd8
 80061c4:	d002      	beq.n	80061cc <motor1Kontrol+0x20>
 80061c6:	2be8      	cmp	r3, #232	; 0xe8
 80061c8:	d00d      	beq.n	80061e6 <motor1Kontrol+0x3a>
}
 80061ca:	e02a      	b.n	8006222 <motor1Kontrol+0x76>
			motor1_forth();
 80061cc:	f7ff ff66 	bl	800609c <motor1_forth>
			OLED_SetCursor(0, 20);
 80061d0:	2114      	movs	r1, #20
 80061d2:	2000      	movs	r0, #0
 80061d4:	f7fe ffd6 	bl	8005184 <OLED_SetCursor>
			OLED_WriteString("Motor_1 ileri", Font_7x10, White);
 80061d8:	4a14      	ldr	r2, [pc, #80]	; (800622c <motor1Kontrol+0x80>)
 80061da:	2301      	movs	r3, #1
 80061dc:	ca06      	ldmia	r2, {r1, r2}
 80061de:	4814      	ldr	r0, [pc, #80]	; (8006230 <motor1Kontrol+0x84>)
 80061e0:	f7fe ffaa 	bl	8005138 <OLED_WriteString>
			break;
 80061e4:	e01d      	b.n	8006222 <motor1Kontrol+0x76>
			motor1_back();
 80061e6:	f7ff ff69 	bl	80060bc <motor1_back>
			OLED_SetCursor(0, 20);
 80061ea:	2114      	movs	r1, #20
 80061ec:	2000      	movs	r0, #0
 80061ee:	f7fe ffc9 	bl	8005184 <OLED_SetCursor>
			OLED_WriteString("Motor_1 geri ",  Font_7x10, White);
 80061f2:	4a0e      	ldr	r2, [pc, #56]	; (800622c <motor1Kontrol+0x80>)
 80061f4:	2301      	movs	r3, #1
 80061f6:	ca06      	ldmia	r2, {r1, r2}
 80061f8:	480e      	ldr	r0, [pc, #56]	; (8006234 <motor1Kontrol+0x88>)
 80061fa:	f7fe ff9d 	bl	8005138 <OLED_WriteString>
			break;
 80061fe:	e010      	b.n	8006222 <motor1Kontrol+0x76>
			motor1_stop();
 8006200:	f7ff ff8c 	bl	800611c <motor1_stop>
			OLED_SetCursor(0, 20);
 8006204:	2114      	movs	r1, #20
 8006206:	2000      	movs	r0, #0
 8006208:	f7fe ffbc 	bl	8005184 <OLED_SetCursor>
			OLED_WriteString("Motor_1 dur  ",  Font_7x10, White);
 800620c:	4a07      	ldr	r2, [pc, #28]	; (800622c <motor1Kontrol+0x80>)
 800620e:	2301      	movs	r3, #1
 8006210:	ca06      	ldmia	r2, {r1, r2}
 8006212:	4809      	ldr	r0, [pc, #36]	; (8006238 <motor1Kontrol+0x8c>)
 8006214:	f7fe ff90 	bl	8005138 <OLED_WriteString>
			break;
 8006218:	e003      	b.n	8006222 <motor1Kontrol+0x76>
			displaySelectKey=MENU_SISTEMI;
 800621a:	4b08      	ldr	r3, [pc, #32]	; (800623c <motor1Kontrol+0x90>)
 800621c:	2238      	movs	r2, #56	; 0x38
 800621e:	701a      	strb	r2, [r3, #0]
			break;
 8006220:	bf00      	nop
}
 8006222:	bf00      	nop
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20000a21 	.word	0x20000a21
 800622c:	2000000c 	.word	0x2000000c
 8006230:	080076d8 	.word	0x080076d8
 8006234:	080076e8 	.word	0x080076e8
 8006238:	080076f8 	.word	0x080076f8
 800623c:	20000a22 	.word	0x20000a22

08006240 <KeyMotor1Kontrol>:

void KeyMotor1Kontrol()
{
 8006240:	b480      	push	{r7}
 8006242:	af00      	add	r7, sp, #0
	displaySelectKey=MOTOR1_KONTROL;
 8006244:	4b04      	ldr	r3, [pc, #16]	; (8006258 <KeyMotor1Kontrol+0x18>)
 8006246:	2248      	movs	r2, #72	; 0x48
 8006248:	701a      	strb	r2, [r3, #0]
	displayClean=true;
 800624a:	4b04      	ldr	r3, [pc, #16]	; (800625c <KeyMotor1Kontrol+0x1c>)
 800624c:	2201      	movs	r2, #1
 800624e:	701a      	strb	r2, [r3, #0]
}
 8006250:	bf00      	nop
 8006252:	46bd      	mov	sp, r7
 8006254:	bc80      	pop	{r7}
 8006256:	4770      	bx	lr
 8006258:	20000a22 	.word	0x20000a22
 800625c:	20000a00 	.word	0x20000a00

08006260 <motor2Kontrol>:

void motor2Kontrol()
{
 8006260:	b580      	push	{r7, lr}
 8006262:	af00      	add	r7, sp, #0
		switch(Key)
 8006264:	4b1d      	ldr	r3, [pc, #116]	; (80062dc <motor2Kontrol+0x7c>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2bb8      	cmp	r3, #184	; 0xb8
 800626a:	d030      	beq.n	80062ce <motor2Kontrol+0x6e>
 800626c:	2bb8      	cmp	r3, #184	; 0xb8
 800626e:	dc02      	bgt.n	8006276 <motor2Kontrol+0x16>
 8006270:	2b78      	cmp	r3, #120	; 0x78
 8006272:	d01f      	beq.n	80062b4 <motor2Kontrol+0x54>
			break;

		}


}
 8006274:	e02f      	b.n	80062d6 <motor2Kontrol+0x76>
		switch(Key)
 8006276:	2bd8      	cmp	r3, #216	; 0xd8
 8006278:	d002      	beq.n	8006280 <motor2Kontrol+0x20>
 800627a:	2be8      	cmp	r3, #232	; 0xe8
 800627c:	d00d      	beq.n	800629a <motor2Kontrol+0x3a>
}
 800627e:	e02a      	b.n	80062d6 <motor2Kontrol+0x76>
			motor2_forth();
 8006280:	f7ff ff2c 	bl	80060dc <motor2_forth>
			OLED_SetCursor(0, 20);
 8006284:	2114      	movs	r1, #20
 8006286:	2000      	movs	r0, #0
 8006288:	f7fe ff7c 	bl	8005184 <OLED_SetCursor>
			OLED_WriteString("Motor_2 ileri", Font_7x10, White);
 800628c:	4a14      	ldr	r2, [pc, #80]	; (80062e0 <motor2Kontrol+0x80>)
 800628e:	2301      	movs	r3, #1
 8006290:	ca06      	ldmia	r2, {r1, r2}
 8006292:	4814      	ldr	r0, [pc, #80]	; (80062e4 <motor2Kontrol+0x84>)
 8006294:	f7fe ff50 	bl	8005138 <OLED_WriteString>
			break;
 8006298:	e01d      	b.n	80062d6 <motor2Kontrol+0x76>
			motor2_back();
 800629a:	f7ff ff2f 	bl	80060fc <motor2_back>
			OLED_SetCursor(0, 20);
 800629e:	2114      	movs	r1, #20
 80062a0:	2000      	movs	r0, #0
 80062a2:	f7fe ff6f 	bl	8005184 <OLED_SetCursor>
			OLED_WriteString("Motor_2 geri ",  Font_7x10, White);
 80062a6:	4a0e      	ldr	r2, [pc, #56]	; (80062e0 <motor2Kontrol+0x80>)
 80062a8:	2301      	movs	r3, #1
 80062aa:	ca06      	ldmia	r2, {r1, r2}
 80062ac:	480e      	ldr	r0, [pc, #56]	; (80062e8 <motor2Kontrol+0x88>)
 80062ae:	f7fe ff43 	bl	8005138 <OLED_WriteString>
			break;
 80062b2:	e010      	b.n	80062d6 <motor2Kontrol+0x76>
			motor2_stop();
 80062b4:	f7ff ff42 	bl	800613c <motor2_stop>
			OLED_SetCursor(0, 20);
 80062b8:	2114      	movs	r1, #20
 80062ba:	2000      	movs	r0, #0
 80062bc:	f7fe ff62 	bl	8005184 <OLED_SetCursor>
			OLED_WriteString("Motor_2 dur  ",  Font_7x10, White);
 80062c0:	4a07      	ldr	r2, [pc, #28]	; (80062e0 <motor2Kontrol+0x80>)
 80062c2:	2301      	movs	r3, #1
 80062c4:	ca06      	ldmia	r2, {r1, r2}
 80062c6:	4809      	ldr	r0, [pc, #36]	; (80062ec <motor2Kontrol+0x8c>)
 80062c8:	f7fe ff36 	bl	8005138 <OLED_WriteString>
			break;
 80062cc:	e003      	b.n	80062d6 <motor2Kontrol+0x76>
			displaySelectKey=MENU_SISTEMI;
 80062ce:	4b08      	ldr	r3, [pc, #32]	; (80062f0 <motor2Kontrol+0x90>)
 80062d0:	2238      	movs	r2, #56	; 0x38
 80062d2:	701a      	strb	r2, [r3, #0]
			break;
 80062d4:	bf00      	nop
}
 80062d6:	bf00      	nop
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000a21 	.word	0x20000a21
 80062e0:	2000000c 	.word	0x2000000c
 80062e4:	08007708 	.word	0x08007708
 80062e8:	08007718 	.word	0x08007718
 80062ec:	08007728 	.word	0x08007728
 80062f0:	20000a22 	.word	0x20000a22

080062f4 <KeyMotor2Kontrol>:

void KeyMotor2Kontrol()
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
	displaySelectKey=MOTOR2_KONTROL;
 80062f8:	4b04      	ldr	r3, [pc, #16]	; (800630c <KeyMotor2Kontrol+0x18>)
 80062fa:	2249      	movs	r2, #73	; 0x49
 80062fc:	701a      	strb	r2, [r3, #0]
	displayClean=true;
 80062fe:	4b04      	ldr	r3, [pc, #16]	; (8006310 <KeyMotor2Kontrol+0x1c>)
 8006300:	2201      	movs	r2, #1
 8006302:	701a      	strb	r2, [r3, #0]
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr
 800630c:	20000a22 	.word	0x20000a22
 8006310:	20000a00 	.word	0x20000a00

08006314 <BuildMenu>:
//	menulistTypeDef acKapaMenu		={"   AC/KAPAT"		,"Ac"           ,"Kapat"};


void BuildMenu(menuLevelsTypeDef *currentNode, menulistTypeDef *menuNode,OLED_COLOR color1,OLED_COLOR color2,OLED_COLOR color3,OLED_COLOR color4,
				void (*DoWork)(void) , menuLevelsTypeDef *prevNode, menuLevelsTypeDef *nextNode,menuLevelsTypeDef *upNode,menuLevelsTypeDef *downNode)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	4611      	mov	r1, r2
 8006320:	461a      	mov	r2, r3
 8006322:	460b      	mov	r3, r1
 8006324:	71fb      	strb	r3, [r7, #7]
 8006326:	4613      	mov	r3, r2
 8006328:	71bb      	strb	r3, [r7, #6]
	currentNode->menuPtr 	= menuNode;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	601a      	str	r2, [r3, #0]
    currentNode->color1		= color1;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	79fa      	ldrb	r2, [r7, #7]
 8006334:	711a      	strb	r2, [r3, #4]
    currentNode->color2		= color2;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	79ba      	ldrb	r2, [r7, #6]
 800633a:	715a      	strb	r2, [r3, #5]
    currentNode->color3		= color3;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	7e3a      	ldrb	r2, [r7, #24]
 8006340:	719a      	strb	r2, [r3, #6]
    currentNode->color4		= color4;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	7f3a      	ldrb	r2, [r7, #28]
 8006346:	71da      	strb	r2, [r3, #7]
    currentNode->prev   	= prevNode;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634c:	60da      	str	r2, [r3, #12]
    currentNode->next   	= nextNode;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006352:	609a      	str	r2, [r3, #8]
    currentNode->up     	= upNode;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006358:	615a      	str	r2, [r3, #20]
    currentNode->down   	= downNode;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635e:	611a      	str	r2, [r3, #16]
    currentNode->DoWork 	= DoWork;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a3a      	ldr	r2, [r7, #32]
 8006364:	619a      	str	r2, [r3, #24]
}
 8006366:	bf00      	nop
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr

08006370 <Next>:


void Next(menuLevelsTypeDef **currentNode)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  if( (*currentNode) ->next != 0)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d004      	beq.n	800638c <Next+0x1c>
  (*currentNode) = (*currentNode)->next;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	601a      	str	r2, [r3, #0]
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr

08006396 <Prev>:

void Prev(menuLevelsTypeDef **currentNode)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  if((*currentNode)->prev != 0)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <Prev+0x1c>
  (*currentNode) = (*currentNode)->prev;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	601a      	str	r2, [r3, #0]
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <Up>:

void Up(menuLevelsTypeDef **currentNode)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  if((*currentNode)->up != 0)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d004      	beq.n	80063d8 <Up+0x1c>
  (*currentNode) = (*currentNode)->up;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695a      	ldr	r2, [r3, #20]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	601a      	str	r2, [r3, #0]
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr

080063e2 <Down>:

void Down(menuLevelsTypeDef **currentNode)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  if((*currentNode)->DoWork != 0)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <Down+0x1c>
    (*currentNode)->DoWork();
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	4798      	blx	r3
  else if((*currentNode)->down != 0)
    (*currentNode) = (*currentNode)->down;
}
 80063fc:	e009      	b.n	8006412 <Down+0x30>
  else if((*currentNode)->down != 0)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d004      	beq.n	8006412 <Down+0x30>
    (*currentNode) = (*currentNode)->down;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	601a      	str	r2, [r3, #0]
}
 8006412:	bf00      	nop
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
	...

0800641c <Build_Menu>:


void Build_Menu()
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b088      	sub	sp, #32
 8006420:	af08      	add	r7, sp, #32
	//			secenek		menu					renk					fonksiyon							önceki		sonraki			üst			alt
	//-----------------------------------------------------------------------------------------------------------------------------------
	  BuildMenu(&menu1M,	&anaMenu			,Black,	White,	White,	White,		0, 							&exitM,		&ledlerM, 		0, 			&menu11M);
 8006422:	4b85      	ldr	r3, [pc, #532]	; (8006638 <Build_Menu+0x21c>)
 8006424:	9306      	str	r3, [sp, #24]
 8006426:	2300      	movs	r3, #0
 8006428:	9305      	str	r3, [sp, #20]
 800642a:	4b84      	ldr	r3, [pc, #528]	; (800663c <Build_Menu+0x220>)
 800642c:	9304      	str	r3, [sp, #16]
 800642e:	4b84      	ldr	r3, [pc, #528]	; (8006640 <Build_Menu+0x224>)
 8006430:	9303      	str	r3, [sp, #12]
 8006432:	2300      	movs	r3, #0
 8006434:	9302      	str	r3, [sp, #8]
 8006436:	2301      	movs	r3, #1
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	2301      	movs	r3, #1
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	2301      	movs	r3, #1
 8006440:	2200      	movs	r2, #0
 8006442:	4980      	ldr	r1, [pc, #512]	; (8006644 <Build_Menu+0x228>)
 8006444:	4880      	ldr	r0, [pc, #512]	; (8006648 <Build_Menu+0x22c>)
 8006446:	f7ff ff65 	bl	8006314 <BuildMenu>

	  BuildMenu(&menu11M,	&beslemeMenu		,Black,	White,	White,	White,		KeyPetFeedSetting,			&menu13M,	&menu12M, 		&menu1M, 	0);
 800644a:	2300      	movs	r3, #0
 800644c:	9306      	str	r3, [sp, #24]
 800644e:	4b7e      	ldr	r3, [pc, #504]	; (8006648 <Build_Menu+0x22c>)
 8006450:	9305      	str	r3, [sp, #20]
 8006452:	4b7e      	ldr	r3, [pc, #504]	; (800664c <Build_Menu+0x230>)
 8006454:	9304      	str	r3, [sp, #16]
 8006456:	4b7e      	ldr	r3, [pc, #504]	; (8006650 <Build_Menu+0x234>)
 8006458:	9303      	str	r3, [sp, #12]
 800645a:	4b7e      	ldr	r3, [pc, #504]	; (8006654 <Build_Menu+0x238>)
 800645c:	9302      	str	r3, [sp, #8]
 800645e:	2301      	movs	r3, #1
 8006460:	9301      	str	r3, [sp, #4]
 8006462:	2301      	movs	r3, #1
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	2301      	movs	r3, #1
 8006468:	2200      	movs	r2, #0
 800646a:	497b      	ldr	r1, [pc, #492]	; (8006658 <Build_Menu+0x23c>)
 800646c:	4872      	ldr	r0, [pc, #456]	; (8006638 <Build_Menu+0x21c>)
 800646e:	f7ff ff51 	bl	8006314 <BuildMenu>
	  BuildMenu(&menu12M,	&beslemeMenu		,White,	Black,	White,	White,		KeyPetWaterSetting,			&menu11M,	&menu13M, 		&menu1M, 	0);
 8006472:	2300      	movs	r3, #0
 8006474:	9306      	str	r3, [sp, #24]
 8006476:	4b74      	ldr	r3, [pc, #464]	; (8006648 <Build_Menu+0x22c>)
 8006478:	9305      	str	r3, [sp, #20]
 800647a:	4b75      	ldr	r3, [pc, #468]	; (8006650 <Build_Menu+0x234>)
 800647c:	9304      	str	r3, [sp, #16]
 800647e:	4b6e      	ldr	r3, [pc, #440]	; (8006638 <Build_Menu+0x21c>)
 8006480:	9303      	str	r3, [sp, #12]
 8006482:	4b76      	ldr	r3, [pc, #472]	; (800665c <Build_Menu+0x240>)
 8006484:	9302      	str	r3, [sp, #8]
 8006486:	2301      	movs	r3, #1
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	2301      	movs	r3, #1
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	2300      	movs	r3, #0
 8006490:	2201      	movs	r2, #1
 8006492:	4971      	ldr	r1, [pc, #452]	; (8006658 <Build_Menu+0x23c>)
 8006494:	486d      	ldr	r0, [pc, #436]	; (800664c <Build_Menu+0x230>)
 8006496:	f7ff ff3d 	bl	8006314 <BuildMenu>
	  BuildMenu(&menu13M,	&beslemeMenu		,White,	White,	Black,	White,		KeyRewardPetFeedSetting,	&menu12M,	&menu11M,		&menu1M, 	0);
 800649a:	2300      	movs	r3, #0
 800649c:	9306      	str	r3, [sp, #24]
 800649e:	4b6a      	ldr	r3, [pc, #424]	; (8006648 <Build_Menu+0x22c>)
 80064a0:	9305      	str	r3, [sp, #20]
 80064a2:	4b65      	ldr	r3, [pc, #404]	; (8006638 <Build_Menu+0x21c>)
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	4b69      	ldr	r3, [pc, #420]	; (800664c <Build_Menu+0x230>)
 80064a8:	9303      	str	r3, [sp, #12]
 80064aa:	4b6d      	ldr	r3, [pc, #436]	; (8006660 <Build_Menu+0x244>)
 80064ac:	9302      	str	r3, [sp, #8]
 80064ae:	2301      	movs	r3, #1
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	2300      	movs	r3, #0
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	2301      	movs	r3, #1
 80064b8:	2201      	movs	r2, #1
 80064ba:	4967      	ldr	r1, [pc, #412]	; (8006658 <Build_Menu+0x23c>)
 80064bc:	4864      	ldr	r0, [pc, #400]	; (8006650 <Build_Menu+0x234>)
 80064be:	f7ff ff29 	bl	8006314 <BuildMenu>

	  BuildMenu(&ledlerM,	&anaMenu			,White,	Black,	White,	White, 		0, 							&menu1M,	&ayarlarM, 		0, 			&led1M);
 80064c2:	4b68      	ldr	r3, [pc, #416]	; (8006664 <Build_Menu+0x248>)
 80064c4:	9306      	str	r3, [sp, #24]
 80064c6:	2300      	movs	r3, #0
 80064c8:	9305      	str	r3, [sp, #20]
 80064ca:	4b67      	ldr	r3, [pc, #412]	; (8006668 <Build_Menu+0x24c>)
 80064cc:	9304      	str	r3, [sp, #16]
 80064ce:	4b5e      	ldr	r3, [pc, #376]	; (8006648 <Build_Menu+0x22c>)
 80064d0:	9303      	str	r3, [sp, #12]
 80064d2:	2300      	movs	r3, #0
 80064d4:	9302      	str	r3, [sp, #8]
 80064d6:	2301      	movs	r3, #1
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	2301      	movs	r3, #1
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	2300      	movs	r3, #0
 80064e0:	2201      	movs	r2, #1
 80064e2:	4958      	ldr	r1, [pc, #352]	; (8006644 <Build_Menu+0x228>)
 80064e4:	4855      	ldr	r0, [pc, #340]	; (800663c <Build_Menu+0x220>)
 80064e6:	f7ff ff15 	bl	8006314 <BuildMenu>

	  BuildMenu(&led1M,		&kontrollerMenu		,Black,	White,	White,	White,		KeyMotor1Kontrol,			&led3M,		&led2M, 		&ledlerM, 	0);
 80064ea:	2300      	movs	r3, #0
 80064ec:	9306      	str	r3, [sp, #24]
 80064ee:	4b53      	ldr	r3, [pc, #332]	; (800663c <Build_Menu+0x220>)
 80064f0:	9305      	str	r3, [sp, #20]
 80064f2:	4b5e      	ldr	r3, [pc, #376]	; (800666c <Build_Menu+0x250>)
 80064f4:	9304      	str	r3, [sp, #16]
 80064f6:	4b5e      	ldr	r3, [pc, #376]	; (8006670 <Build_Menu+0x254>)
 80064f8:	9303      	str	r3, [sp, #12]
 80064fa:	4b5e      	ldr	r3, [pc, #376]	; (8006674 <Build_Menu+0x258>)
 80064fc:	9302      	str	r3, [sp, #8]
 80064fe:	2301      	movs	r3, #1
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	2301      	movs	r3, #1
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	2301      	movs	r3, #1
 8006508:	2200      	movs	r2, #0
 800650a:	495b      	ldr	r1, [pc, #364]	; (8006678 <Build_Menu+0x25c>)
 800650c:	4855      	ldr	r0, [pc, #340]	; (8006664 <Build_Menu+0x248>)
 800650e:	f7ff ff01 	bl	8006314 <BuildMenu>
//	  BuildMenu(&on1M,		&acKapaMenu			,Black,	White,	Black,	White, 		Led3_On,					&off1M,		&off1M, 		&led1M, 	0);
//	  BuildMenu(&off1M,		&acKapaMenu			,White,	Black,	Black,	White,		Led3_Off, 					&on1M, 		&on1M,			&led1M, 	0);

	  BuildMenu(&led2M,		&kontrollerMenu		,White,	Black,	White,	White, 		KeyMotor2Kontrol,			&led1M, 	&led3M, 		&ledlerM , 	0);
 8006512:	2300      	movs	r3, #0
 8006514:	9306      	str	r3, [sp, #24]
 8006516:	4b49      	ldr	r3, [pc, #292]	; (800663c <Build_Menu+0x220>)
 8006518:	9305      	str	r3, [sp, #20]
 800651a:	4b55      	ldr	r3, [pc, #340]	; (8006670 <Build_Menu+0x254>)
 800651c:	9304      	str	r3, [sp, #16]
 800651e:	4b51      	ldr	r3, [pc, #324]	; (8006664 <Build_Menu+0x248>)
 8006520:	9303      	str	r3, [sp, #12]
 8006522:	4b56      	ldr	r3, [pc, #344]	; (800667c <Build_Menu+0x260>)
 8006524:	9302      	str	r3, [sp, #8]
 8006526:	2301      	movs	r3, #1
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	2301      	movs	r3, #1
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	2300      	movs	r3, #0
 8006530:	2201      	movs	r2, #1
 8006532:	4951      	ldr	r1, [pc, #324]	; (8006678 <Build_Menu+0x25c>)
 8006534:	484d      	ldr	r0, [pc, #308]	; (800666c <Build_Menu+0x250>)
 8006536:	f7ff feed 	bl	8006314 <BuildMenu>
//	  BuildMenu(&on2M,		&acKapaMenu			,Black,	White,	Black,	White, 		Led4_On,					&off2M,		&off2M, 		&led2M, 	0);
//	  BuildMenu(&off2M,		&acKapaMenu			,White,	Black,	Black,	White, 		Led4_Off, 					&on2M, 		&on2M,			&led2M, 	0);

	  BuildMenu(&led3M,		&kontrollerMenu		,White,	White,	Black,	White, 		KeyServoKontrol,			&led2M, 	&led1M,			&ledlerM, 	0);
 800653a:	2300      	movs	r3, #0
 800653c:	9306      	str	r3, [sp, #24]
 800653e:	4b3f      	ldr	r3, [pc, #252]	; (800663c <Build_Menu+0x220>)
 8006540:	9305      	str	r3, [sp, #20]
 8006542:	4b48      	ldr	r3, [pc, #288]	; (8006664 <Build_Menu+0x248>)
 8006544:	9304      	str	r3, [sp, #16]
 8006546:	4b49      	ldr	r3, [pc, #292]	; (800666c <Build_Menu+0x250>)
 8006548:	9303      	str	r3, [sp, #12]
 800654a:	4b4d      	ldr	r3, [pc, #308]	; (8006680 <Build_Menu+0x264>)
 800654c:	9302      	str	r3, [sp, #8]
 800654e:	2301      	movs	r3, #1
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	2300      	movs	r3, #0
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	2301      	movs	r3, #1
 8006558:	2201      	movs	r2, #1
 800655a:	4947      	ldr	r1, [pc, #284]	; (8006678 <Build_Menu+0x25c>)
 800655c:	4844      	ldr	r0, [pc, #272]	; (8006670 <Build_Menu+0x254>)
 800655e:	f7ff fed9 	bl	8006314 <BuildMenu>
//	  BuildMenu(&on3M,		&acKapaMenu		,Black,	White,	Black,	White, 		Led5_On,		&off3M,		&off3M, 		&led3M, 	0);
//	  BuildMenu(&off3M,		&acKapaMenu		,White,	Black,	Black,	White, 		Led5_Off, 		&on3M, 		&on3M,			&led3M, 	0);


	  BuildMenu(&ayarlarM,	&anaMenu			,White,	White,	Black,	White,		0,							&ledlerM,	&exitM,			0, 			&saatM);
 8006562:	4b48      	ldr	r3, [pc, #288]	; (8006684 <Build_Menu+0x268>)
 8006564:	9306      	str	r3, [sp, #24]
 8006566:	2300      	movs	r3, #0
 8006568:	9305      	str	r3, [sp, #20]
 800656a:	4b35      	ldr	r3, [pc, #212]	; (8006640 <Build_Menu+0x224>)
 800656c:	9304      	str	r3, [sp, #16]
 800656e:	4b33      	ldr	r3, [pc, #204]	; (800663c <Build_Menu+0x220>)
 8006570:	9303      	str	r3, [sp, #12]
 8006572:	2300      	movs	r3, #0
 8006574:	9302      	str	r3, [sp, #8]
 8006576:	2301      	movs	r3, #1
 8006578:	9301      	str	r3, [sp, #4]
 800657a:	2300      	movs	r3, #0
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	2301      	movs	r3, #1
 8006580:	2201      	movs	r2, #1
 8006582:	4930      	ldr	r1, [pc, #192]	; (8006644 <Build_Menu+0x228>)
 8006584:	4838      	ldr	r0, [pc, #224]	; (8006668 <Build_Menu+0x24c>)
 8006586:	f7ff fec5 	bl	8006314 <BuildMenu>

	  BuildMenu(&saatM,		&ayarlarMenu		,Black,	White,	White,	White,		KeySaatiAyarlama, 			&alarmM,	&takvimM, 		&ayarlarM, 	0);
 800658a:	2300      	movs	r3, #0
 800658c:	9306      	str	r3, [sp, #24]
 800658e:	4b36      	ldr	r3, [pc, #216]	; (8006668 <Build_Menu+0x24c>)
 8006590:	9305      	str	r3, [sp, #20]
 8006592:	4b3d      	ldr	r3, [pc, #244]	; (8006688 <Build_Menu+0x26c>)
 8006594:	9304      	str	r3, [sp, #16]
 8006596:	4b3d      	ldr	r3, [pc, #244]	; (800668c <Build_Menu+0x270>)
 8006598:	9303      	str	r3, [sp, #12]
 800659a:	4b3d      	ldr	r3, [pc, #244]	; (8006690 <Build_Menu+0x274>)
 800659c:	9302      	str	r3, [sp, #8]
 800659e:	2301      	movs	r3, #1
 80065a0:	9301      	str	r3, [sp, #4]
 80065a2:	2301      	movs	r3, #1
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	2301      	movs	r3, #1
 80065a8:	2200      	movs	r2, #0
 80065aa:	493a      	ldr	r1, [pc, #232]	; (8006694 <Build_Menu+0x278>)
 80065ac:	4835      	ldr	r0, [pc, #212]	; (8006684 <Build_Menu+0x268>)
 80065ae:	f7ff feb1 	bl	8006314 <BuildMenu>

	  BuildMenu(&takvimM,	&ayarlarMenu		,White,	Black,	White,	White,		KeyTakvimiAyarlama,			&saatM, 	&alarmM, 		&ayarlarM, 	0);
 80065b2:	2300      	movs	r3, #0
 80065b4:	9306      	str	r3, [sp, #24]
 80065b6:	4b2c      	ldr	r3, [pc, #176]	; (8006668 <Build_Menu+0x24c>)
 80065b8:	9305      	str	r3, [sp, #20]
 80065ba:	4b34      	ldr	r3, [pc, #208]	; (800668c <Build_Menu+0x270>)
 80065bc:	9304      	str	r3, [sp, #16]
 80065be:	4b31      	ldr	r3, [pc, #196]	; (8006684 <Build_Menu+0x268>)
 80065c0:	9303      	str	r3, [sp, #12]
 80065c2:	4b35      	ldr	r3, [pc, #212]	; (8006698 <Build_Menu+0x27c>)
 80065c4:	9302      	str	r3, [sp, #8]
 80065c6:	2301      	movs	r3, #1
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	2301      	movs	r3, #1
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	2300      	movs	r3, #0
 80065d0:	2201      	movs	r2, #1
 80065d2:	4930      	ldr	r1, [pc, #192]	; (8006694 <Build_Menu+0x278>)
 80065d4:	482c      	ldr	r0, [pc, #176]	; (8006688 <Build_Menu+0x26c>)
 80065d6:	f7ff fe9d 	bl	8006314 <BuildMenu>

	  BuildMenu(&alarmM,	&ayarlarMenu		,White,	White,	Black,	White,		KeyAlarmAyarlama, 			&takvimM, 	&saatM,			&ayarlarM , 0);
 80065da:	2300      	movs	r3, #0
 80065dc:	9306      	str	r3, [sp, #24]
 80065de:	4b22      	ldr	r3, [pc, #136]	; (8006668 <Build_Menu+0x24c>)
 80065e0:	9305      	str	r3, [sp, #20]
 80065e2:	4b28      	ldr	r3, [pc, #160]	; (8006684 <Build_Menu+0x268>)
 80065e4:	9304      	str	r3, [sp, #16]
 80065e6:	4b28      	ldr	r3, [pc, #160]	; (8006688 <Build_Menu+0x26c>)
 80065e8:	9303      	str	r3, [sp, #12]
 80065ea:	4b2c      	ldr	r3, [pc, #176]	; (800669c <Build_Menu+0x280>)
 80065ec:	9302      	str	r3, [sp, #8]
 80065ee:	2301      	movs	r3, #1
 80065f0:	9301      	str	r3, [sp, #4]
 80065f2:	2300      	movs	r3, #0
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	2301      	movs	r3, #1
 80065f8:	2201      	movs	r2, #1
 80065fa:	4926      	ldr	r1, [pc, #152]	; (8006694 <Build_Menu+0x278>)
 80065fc:	4823      	ldr	r0, [pc, #140]	; (800668c <Build_Menu+0x270>)
 80065fe:	f7ff fe89 	bl	8006314 <BuildMenu>

	  BuildMenu(&exitM,		&anaMenu			,White,	White,	White,	Black,		menuExit, 					&ayarlarM,	&menu1M, 		0, 			0);
 8006602:	2300      	movs	r3, #0
 8006604:	9306      	str	r3, [sp, #24]
 8006606:	2300      	movs	r3, #0
 8006608:	9305      	str	r3, [sp, #20]
 800660a:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <Build_Menu+0x22c>)
 800660c:	9304      	str	r3, [sp, #16]
 800660e:	4b16      	ldr	r3, [pc, #88]	; (8006668 <Build_Menu+0x24c>)
 8006610:	9303      	str	r3, [sp, #12]
 8006612:	4b23      	ldr	r3, [pc, #140]	; (80066a0 <Build_Menu+0x284>)
 8006614:	9302      	str	r3, [sp, #8]
 8006616:	2300      	movs	r3, #0
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	2301      	movs	r3, #1
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	2301      	movs	r3, #1
 8006620:	2201      	movs	r2, #1
 8006622:	4908      	ldr	r1, [pc, #32]	; (8006644 <Build_Menu+0x228>)
 8006624:	4806      	ldr	r0, [pc, #24]	; (8006640 <Build_Menu+0x224>)
 8006626:	f7ff fe75 	bl	8006314 <BuildMenu>



	  //Assign the current menu item the first item in the menu
	  currentM = &menu1M;
 800662a:	4b1e      	ldr	r3, [pc, #120]	; (80066a4 <Build_Menu+0x288>)
 800662c:	4a06      	ldr	r2, [pc, #24]	; (8006648 <Build_Menu+0x22c>)
 800662e:	601a      	str	r2, [r3, #0]

}
 8006630:	bf00      	nop
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	200007d4 	.word	0x200007d4
 800663c:	200009e4 	.word	0x200009e4
 8006640:	2000074c 	.word	0x2000074c
 8006644:	2000002c 	.word	0x2000002c
 8006648:	200009c8 	.word	0x200009c8
 800664c:	200005f0 	.word	0x200005f0
 8006650:	2000067c 	.word	0x2000067c
 8006654:	08006a0d 	.word	0x08006a0d
 8006658:	200000c4 	.word	0x200000c4
 800665c:	08006b95 	.word	0x08006b95
 8006660:	08006ad1 	.word	0x08006ad1
 8006664:	200008a0 	.word	0x200008a0
 8006668:	200007f0 	.word	0x200007f0
 800666c:	20000a04 	.word	0x20000a04
 8006670:	200008bc 	.word	0x200008bc
 8006674:	08006241 	.word	0x08006241
 8006678:	20000110 	.word	0x20000110
 800667c:	080062f5 	.word	0x080062f5
 8006680:	08005e29 	.word	0x08005e29
 8006684:	20000768 	.word	0x20000768
 8006688:	20000884 	.word	0x20000884
 800668c:	200009a0 	.word	0x200009a0
 8006690:	08005975 	.word	0x08005975
 8006694:	20000078 	.word	0x20000078
 8006698:	08005a25 	.word	0x08005a25
 800669c:	080059cd 	.word	0x080059cd
 80066a0:	0800606d 	.word	0x0800606d
 80066a4:	200007d0 	.word	0x200007d0

080066a8 <ekranMenu>:
//HAL_GPIO_WritePin(LD5_GPIO_Port,LD5_Pin,RESET);
}


void ekranMenu(uint8_t y1)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4603      	mov	r3, r0
 80066b0:	71fb      	strb	r3, [r7, #7]

	char ekranYer[16];
	OLED1_Fill(Black);
 80066b2:	2000      	movs	r0, #0
 80066b4:	f7fe fac6 	bl	8004c44 <OLED1_Fill>

	strcpy(ekranYer, currentM->menuPtr->menuAdi);
 80066b8:	4b45      	ldr	r3, [pc, #276]	; (80067d0 <ekranMenu+0x128>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	f107 0308 	add.w	r3, r7, #8
 80066c4:	4611      	mov	r1, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fb6c 	bl	8006da4 <strcpy>
	OLED_GotoXY(0, y1);
 80066cc:	79fb      	ldrb	r3, [r7, #7]
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	4619      	mov	r1, r3
 80066d2:	2000      	movs	r0, #0
 80066d4:	f7fe fad8 	bl	8004c88 <OLED_GotoXY>
	OLED_WriteString(ekranYer, Font_7x10, White);
 80066d8:	4a3e      	ldr	r2, [pc, #248]	; (80067d4 <ekranMenu+0x12c>)
 80066da:	f107 0008 	add.w	r0, r7, #8
 80066de:	2301      	movs	r3, #1
 80066e0:	ca06      	ldmia	r2, {r1, r2}
 80066e2:	f7fe fd29 	bl	8005138 <OLED_WriteString>
	strcpy(ekranYer, currentM->menuPtr->satir1);
 80066e6:	4b3a      	ldr	r3, [pc, #232]	; (80067d0 <ekranMenu+0x128>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f103 020f 	add.w	r2, r3, #15
 80066f0:	f107 0308 	add.w	r3, r7, #8
 80066f4:	4611      	mov	r1, r2
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fb54 	bl	8006da4 <strcpy>
	OLED_GotoXY(0, y1+15);
 80066fc:	79fb      	ldrb	r3, [r7, #7]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	330f      	adds	r3, #15
 8006702:	b29b      	uxth	r3, r3
 8006704:	4619      	mov	r1, r3
 8006706:	2000      	movs	r0, #0
 8006708:	f7fe fabe 	bl	8004c88 <OLED_GotoXY>
	OLED_WriteString(ekranYer, Font_7x10, currentM->color1);
 800670c:	4b30      	ldr	r3, [pc, #192]	; (80067d0 <ekranMenu+0x128>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	791b      	ldrb	r3, [r3, #4]
 8006712:	4a30      	ldr	r2, [pc, #192]	; (80067d4 <ekranMenu+0x12c>)
 8006714:	f107 0008 	add.w	r0, r7, #8
 8006718:	ca06      	ldmia	r2, {r1, r2}
 800671a:	f7fe fd0d 	bl	8005138 <OLED_WriteString>
	strcpy(ekranYer, currentM->menuPtr->satir2);
 800671e:	4b2c      	ldr	r3, [pc, #176]	; (80067d0 <ekranMenu+0x128>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f103 021e 	add.w	r2, r3, #30
 8006728:	f107 0308 	add.w	r3, r7, #8
 800672c:	4611      	mov	r1, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fb38 	bl	8006da4 <strcpy>
	OLED_GotoXY(0, y1+25);
 8006734:	79fb      	ldrb	r3, [r7, #7]
 8006736:	b29b      	uxth	r3, r3
 8006738:	3319      	adds	r3, #25
 800673a:	b29b      	uxth	r3, r3
 800673c:	4619      	mov	r1, r3
 800673e:	2000      	movs	r0, #0
 8006740:	f7fe faa2 	bl	8004c88 <OLED_GotoXY>
	OLED_WriteString(ekranYer, Font_7x10, currentM->color2);
 8006744:	4b22      	ldr	r3, [pc, #136]	; (80067d0 <ekranMenu+0x128>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	795b      	ldrb	r3, [r3, #5]
 800674a:	4a22      	ldr	r2, [pc, #136]	; (80067d4 <ekranMenu+0x12c>)
 800674c:	f107 0008 	add.w	r0, r7, #8
 8006750:	ca06      	ldmia	r2, {r1, r2}
 8006752:	f7fe fcf1 	bl	8005138 <OLED_WriteString>
	strcpy(ekranYer, currentM->menuPtr->satir3);
 8006756:	4b1e      	ldr	r3, [pc, #120]	; (80067d0 <ekranMenu+0x128>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 8006760:	f107 0308 	add.w	r3, r7, #8
 8006764:	4611      	mov	r1, r2
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fb1c 	bl	8006da4 <strcpy>
	OLED_GotoXY(0, y1+35);
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	b29b      	uxth	r3, r3
 8006770:	3323      	adds	r3, #35	; 0x23
 8006772:	b29b      	uxth	r3, r3
 8006774:	4619      	mov	r1, r3
 8006776:	2000      	movs	r0, #0
 8006778:	f7fe fa86 	bl	8004c88 <OLED_GotoXY>
	OLED_WriteString(ekranYer, Font_7x10, currentM->color3);
 800677c:	4b14      	ldr	r3, [pc, #80]	; (80067d0 <ekranMenu+0x128>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	799b      	ldrb	r3, [r3, #6]
 8006782:	4a14      	ldr	r2, [pc, #80]	; (80067d4 <ekranMenu+0x12c>)
 8006784:	f107 0008 	add.w	r0, r7, #8
 8006788:	ca06      	ldmia	r2, {r1, r2}
 800678a:	f7fe fcd5 	bl	8005138 <OLED_WriteString>
	strcpy(ekranYer, currentM->menuPtr->satir4);
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <ekranMenu+0x128>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006798:	f107 0308 	add.w	r3, r7, #8
 800679c:	4611      	mov	r1, r2
 800679e:	4618      	mov	r0, r3
 80067a0:	f000 fb00 	bl	8006da4 <strcpy>
	OLED_GotoXY(0, y1+45);
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	332d      	adds	r3, #45	; 0x2d
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	4619      	mov	r1, r3
 80067ae:	2000      	movs	r0, #0
 80067b0:	f7fe fa6a 	bl	8004c88 <OLED_GotoXY>
	OLED_WriteString(ekranYer, Font_7x10, currentM->color4);
 80067b4:	4b06      	ldr	r3, [pc, #24]	; (80067d0 <ekranMenu+0x128>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	79db      	ldrb	r3, [r3, #7]
 80067ba:	4a06      	ldr	r2, [pc, #24]	; (80067d4 <ekranMenu+0x12c>)
 80067bc:	f107 0008 	add.w	r0, r7, #8
 80067c0:	ca06      	ldmia	r2, {r1, r2}
 80067c2:	f7fe fcb9 	bl	8005138 <OLED_WriteString>
}
 80067c6:	bf00      	nop
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	200007d0 	.word	0x200007d0
 80067d4:	2000000c 	.word	0x2000000c

080067d8 <menuSistemi>:

void menuSistemi(uint8_t y) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af02      	add	r7, sp, #8
 80067de:	4603      	mov	r3, r0
 80067e0:	71fb      	strb	r3, [r7, #7]

	if (durum) {
 80067e2:	4b2b      	ldr	r3, [pc, #172]	; (8006890 <menuSistemi+0xb8>)
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d04e      	beq.n	8006888 <menuSistemi+0xb0>

		switch (Key) {
 80067ea:	4b2a      	ldr	r3, [pc, #168]	; (8006894 <menuSistemi+0xbc>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2bd8      	cmp	r3, #216	; 0xd8
 80067f0:	d00f      	beq.n	8006812 <menuSistemi+0x3a>
 80067f2:	2bd8      	cmp	r3, #216	; 0xd8
 80067f4:	dc04      	bgt.n	8006800 <menuSistemi+0x28>
 80067f6:	2b78      	cmp	r3, #120	; 0x78
 80067f8:	d021      	beq.n	800683e <menuSistemi+0x66>
 80067fa:	2bb8      	cmp	r3, #184	; 0xb8
 80067fc:	d02a      	beq.n	8006854 <menuSistemi+0x7c>
 80067fe:	e034      	b.n	800686a <menuSistemi+0x92>
 8006800:	2be8      	cmp	r3, #232	; 0xe8
 8006802:	d011      	beq.n	8006828 <menuSistemi+0x50>
 8006804:	2bf8      	cmp	r3, #248	; 0xf8
 8006806:	d130      	bne.n	800686a <menuSistemi+0x92>
		case T0DEGER:
			ekranMenu(y);
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff ff4c 	bl	80066a8 <ekranMenu>
			break;
 8006810:	e02b      	b.n	800686a <menuSistemi+0x92>

		case T1DEGER:
			Next(&currentM); //Check if there is a next node and then go there
 8006812:	4821      	ldr	r0, [pc, #132]	; (8006898 <menuSistemi+0xc0>)
 8006814:	f7ff fdac 	bl	8006370 <Next>
			ekranMenu(y);
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff ff44 	bl	80066a8 <ekranMenu>
			durum = false;
 8006820:	4b1b      	ldr	r3, [pc, #108]	; (8006890 <menuSistemi+0xb8>)
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
			break;
 8006826:	e020      	b.n	800686a <menuSistemi+0x92>

		case T2DEGER:
			Prev(&currentM);
 8006828:	481b      	ldr	r0, [pc, #108]	; (8006898 <menuSistemi+0xc0>)
 800682a:	f7ff fdb4 	bl	8006396 <Prev>
			ekranMenu(y);
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	4618      	mov	r0, r3
 8006832:	f7ff ff39 	bl	80066a8 <ekranMenu>
			durum = false;
 8006836:	4b16      	ldr	r3, [pc, #88]	; (8006890 <menuSistemi+0xb8>)
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
			break;
 800683c:	e015      	b.n	800686a <menuSistemi+0x92>

		case T3DEGER:
			Down(&currentM);
 800683e:	4816      	ldr	r0, [pc, #88]	; (8006898 <menuSistemi+0xc0>)
 8006840:	f7ff fdcf 	bl	80063e2 <Down>
			ekranMenu(y);
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff ff2e 	bl	80066a8 <ekranMenu>
			durum = false;
 800684c:	4b10      	ldr	r3, [pc, #64]	; (8006890 <menuSistemi+0xb8>)
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
			break;
 8006852:	e00a      	b.n	800686a <menuSistemi+0x92>

		case T4DEGER:
			Up(&currentM);
 8006854:	4810      	ldr	r0, [pc, #64]	; (8006898 <menuSistemi+0xc0>)
 8006856:	f7ff fdb1 	bl	80063bc <Up>
			ekranMenu(y);
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff ff23 	bl	80066a8 <ekranMenu>
			durum = false;
 8006862:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <menuSistemi+0xb8>)
 8006864:	2200      	movs	r2, #0
 8006866:	701a      	strb	r2, [r3, #0]
			break;
 8006868:	bf00      	nop
		default:
			;
		}
		OLED_DrawLine(0, y + 11, 110, y + 11, White);
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	b29b      	uxth	r3, r3
 800686e:	330b      	adds	r3, #11
 8006870:	b299      	uxth	r1, r3
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	b29b      	uxth	r3, r3
 8006876:	330b      	adds	r3, #11
 8006878:	b29a      	uxth	r2, r3
 800687a:	2301      	movs	r3, #1
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	4613      	mov	r3, r2
 8006880:	226e      	movs	r2, #110	; 0x6e
 8006882:	2000      	movs	r0, #0
 8006884:	f7fe fa16 	bl	8004cb4 <OLED_DrawLine>
	}

}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	2000082a 	.word	0x2000082a
 8006894:	20000a21 	.word	0x20000a21
 8006898:	200007d0 	.word	0x200007d0

0800689c <amountSetting>:
 */
#include "include_Ap.h"


void amountSetting()
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
	if (durum)
 80068a0:	4b32      	ldr	r3, [pc, #200]	; (800696c <amountSetting+0xd0>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d05c      	beq.n	8006962 <amountSetting+0xc6>
	{
		switch(Key)
 80068a8:	4b31      	ldr	r3, [pc, #196]	; (8006970 <amountSetting+0xd4>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	2bb8      	cmp	r3, #184	; 0xb8
 80068ae:	d04b      	beq.n	8006948 <amountSetting+0xac>
 80068b0:	2bb8      	cmp	r3, #184	; 0xb8
 80068b2:	dc02      	bgt.n	80068ba <amountSetting+0x1e>
 80068b4:	2b78      	cmp	r3, #120	; 0x78
 80068b6:	d03a      	beq.n	800692e <amountSetting+0x92>
			displaySelectKey=MENU_SISTEMI;
			displayClean=true;
			break;
		}
	}
}
 80068b8:	e053      	b.n	8006962 <amountSetting+0xc6>
		switch(Key)
 80068ba:	2bd8      	cmp	r3, #216	; 0xd8
 80068bc:	d002      	beq.n	80068c4 <amountSetting+0x28>
 80068be:	2be8      	cmp	r3, #232	; 0xe8
 80068c0:	d01b      	beq.n	80068fa <amountSetting+0x5e>
}
 80068c2:	e04e      	b.n	8006962 <amountSetting+0xc6>
			durum = false;
 80068c4:	4b29      	ldr	r3, [pc, #164]	; (800696c <amountSetting+0xd0>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
			*amountPtr +=50;
 80068ca:	4b2a      	ldr	r3, [pc, #168]	; (8006974 <amountSetting+0xd8>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	3332      	adds	r3, #50	; 0x32
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	4b26      	ldr	r3, [pc, #152]	; (8006974 <amountSetting+0xd8>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	b212      	sxth	r2, r2
 80068de:	801a      	strh	r2, [r3, #0]
			if(*amountPtr>950)
 80068e0:	4b24      	ldr	r3, [pc, #144]	; (8006974 <amountSetting+0xd8>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068e8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80068ec:	4293      	cmp	r3, r2
 80068ee:	dd35      	ble.n	800695c <amountSetting+0xc0>
				*amountPtr=0;
 80068f0:	4b20      	ldr	r3, [pc, #128]	; (8006974 <amountSetting+0xd8>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2200      	movs	r2, #0
 80068f6:	801a      	strh	r2, [r3, #0]
			break;
 80068f8:	e030      	b.n	800695c <amountSetting+0xc0>
			durum = false;
 80068fa:	4b1c      	ldr	r3, [pc, #112]	; (800696c <amountSetting+0xd0>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	701a      	strb	r2, [r3, #0]
			*amountPtr -=50;
 8006900:	4b1c      	ldr	r3, [pc, #112]	; (8006974 <amountSetting+0xd8>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006908:	b29b      	uxth	r3, r3
 800690a:	3b32      	subs	r3, #50	; 0x32
 800690c:	b29a      	uxth	r2, r3
 800690e:	4b19      	ldr	r3, [pc, #100]	; (8006974 <amountSetting+0xd8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	b212      	sxth	r2, r2
 8006914:	801a      	strh	r2, [r3, #0]
			if(*amountPtr<0)
 8006916:	4b17      	ldr	r3, [pc, #92]	; (8006974 <amountSetting+0xd8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800691e:	2b00      	cmp	r3, #0
 8006920:	da1e      	bge.n	8006960 <amountSetting+0xc4>
				*amountPtr=950;
 8006922:	4b14      	ldr	r3, [pc, #80]	; (8006974 <amountSetting+0xd8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f240 32b6 	movw	r2, #950	; 0x3b6
 800692a:	801a      	strh	r2, [r3, #0]
			break;
 800692c:	e018      	b.n	8006960 <amountSetting+0xc4>
			durum = false;
 800692e:	4b0f      	ldr	r3, [pc, #60]	; (800696c <amountSetting+0xd0>)
 8006930:	2200      	movs	r2, #0
 8006932:	701a      	strb	r2, [r3, #0]
			kayitOnayDurum=true;
 8006934:	4b10      	ldr	r3, [pc, #64]	; (8006978 <amountSetting+0xdc>)
 8006936:	2201      	movs	r2, #1
 8006938:	701a      	strb	r2, [r3, #0]
			displaySelectKey=MENU_SISTEMI;
 800693a:	4b10      	ldr	r3, [pc, #64]	; (800697c <amountSetting+0xe0>)
 800693c:	2238      	movs	r2, #56	; 0x38
 800693e:	701a      	strb	r2, [r3, #0]
			displayClean=true;
 8006940:	4b0f      	ldr	r3, [pc, #60]	; (8006980 <amountSetting+0xe4>)
 8006942:	2201      	movs	r2, #1
 8006944:	701a      	strb	r2, [r3, #0]
			break;
 8006946:	e00c      	b.n	8006962 <amountSetting+0xc6>
			durum = false;
 8006948:	4b08      	ldr	r3, [pc, #32]	; (800696c <amountSetting+0xd0>)
 800694a:	2200      	movs	r2, #0
 800694c:	701a      	strb	r2, [r3, #0]
			displaySelectKey=MENU_SISTEMI;
 800694e:	4b0b      	ldr	r3, [pc, #44]	; (800697c <amountSetting+0xe0>)
 8006950:	2238      	movs	r2, #56	; 0x38
 8006952:	701a      	strb	r2, [r3, #0]
			displayClean=true;
 8006954:	4b0a      	ldr	r3, [pc, #40]	; (8006980 <amountSetting+0xe4>)
 8006956:	2201      	movs	r2, #1
 8006958:	701a      	strb	r2, [r3, #0]
			break;
 800695a:	e002      	b.n	8006962 <amountSetting+0xc6>
			break;
 800695c:	bf00      	nop
 800695e:	e000      	b.n	8006962 <amountSetting+0xc6>
			break;
 8006960:	bf00      	nop
}
 8006962:	bf00      	nop
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	2000082a 	.word	0x2000082a
 8006970:	20000a21 	.word	0x20000a21
 8006974:	20000a24 	.word	0x20000a24
 8006978:	20000a20 	.word	0x20000a20
 800697c:	20000a22 	.word	0x20000a22
 8006980:	20000a00 	.word	0x20000a00

08006984 <petFeedSetting>:

void petFeedSetting()
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
	amountSetting();
 800698a:	f7ff ff87 	bl	800689c <amountSetting>
	char feedYer[20];
	if(kayitOnayDurum)
 800698e:	4b17      	ldr	r3, [pc, #92]	; (80069ec <petFeedSetting+0x68>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d007      	beq.n	80069a6 <petFeedSetting+0x22>
	{
		BKP->DR1=feed_amount;
 8006996:	4b16      	ldr	r3, [pc, #88]	; (80069f0 <petFeedSetting+0x6c>)
 8006998:	f9b3 2000 	ldrsh.w	r2, [r3]
 800699c:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <petFeedSetting+0x70>)
 800699e:	605a      	str	r2, [r3, #4]
		kayitOnayDurum=false;
 80069a0:	4b12      	ldr	r3, [pc, #72]	; (80069ec <petFeedSetting+0x68>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]
	}
	OLED_SetCursor(20, 20);
 80069a6:	2114      	movs	r1, #20
 80069a8:	2014      	movs	r0, #20
 80069aa:	f7fe fbeb 	bl	8005184 <OLED_SetCursor>
	OLED_WriteString("MAMA MIKTARI", Font_7x10, White);
 80069ae:	4a12      	ldr	r2, [pc, #72]	; (80069f8 <petFeedSetting+0x74>)
 80069b0:	2301      	movs	r3, #1
 80069b2:	ca06      	ldmia	r2, {r1, r2}
 80069b4:	4811      	ldr	r0, [pc, #68]	; (80069fc <petFeedSetting+0x78>)
 80069b6:	f7fe fbbf 	bl	8005138 <OLED_WriteString>
	OLED_SetCursor(20, 35);
 80069ba:	2123      	movs	r1, #35	; 0x23
 80069bc:	2014      	movs	r0, #20
 80069be:	f7fe fbe1 	bl	8005184 <OLED_SetCursor>
	sprintf(feedYer," %3d gr",*amountPtr);
 80069c2:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <petFeedSetting+0x7c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069ca:	461a      	mov	r2, r3
 80069cc:	1d3b      	adds	r3, r7, #4
 80069ce:	490d      	ldr	r1, [pc, #52]	; (8006a04 <petFeedSetting+0x80>)
 80069d0:	4618      	mov	r0, r3
 80069d2:	f000 f9c7 	bl	8006d64 <siprintf>
	OLED_WriteString(feedYer, Font_11x18, White);
 80069d6:	4a0c      	ldr	r2, [pc, #48]	; (8006a08 <petFeedSetting+0x84>)
 80069d8:	1d38      	adds	r0, r7, #4
 80069da:	2301      	movs	r3, #1
 80069dc:	ca06      	ldmia	r2, {r1, r2}
 80069de:	f7fe fbab 	bl	8005138 <OLED_WriteString>
}
 80069e2:	bf00      	nop
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20000a20 	.word	0x20000a20
 80069f0:	2000091c 	.word	0x2000091c
 80069f4:	40006c00 	.word	0x40006c00
 80069f8:	2000000c 	.word	0x2000000c
 80069fc:	08007738 	.word	0x08007738
 8006a00:	20000a24 	.word	0x20000a24
 8006a04:	08007748 	.word	0x08007748
 8006a08:	20000014 	.word	0x20000014

08006a0c <KeyPetFeedSetting>:

void KeyPetFeedSetting()
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	af00      	add	r7, sp, #0
	displaySelectKey=PET_FEED_SET;
 8006a10:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <KeyPetFeedSetting+0x28>)
 8006a12:	2245      	movs	r2, #69	; 0x45
 8006a14:	701a      	strb	r2, [r3, #0]
	amountPtr=&feed_amount;
 8006a16:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <KeyPetFeedSetting+0x2c>)
 8006a18:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <KeyPetFeedSetting+0x30>)
 8006a1a:	601a      	str	r2, [r3, #0]
	feed_amount=BKP->DR1;
 8006a1c:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <KeyPetFeedSetting+0x34>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	b21a      	sxth	r2, r3
 8006a22:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <KeyPetFeedSetting+0x30>)
 8006a24:	801a      	strh	r2, [r3, #0]
	displayClean=true;
 8006a26:	4b07      	ldr	r3, [pc, #28]	; (8006a44 <KeyPetFeedSetting+0x38>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	701a      	strb	r2, [r3, #0]
}
 8006a2c:	bf00      	nop
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bc80      	pop	{r7}
 8006a32:	4770      	bx	lr
 8006a34:	20000a22 	.word	0x20000a22
 8006a38:	20000a24 	.word	0x20000a24
 8006a3c:	2000091c 	.word	0x2000091c
 8006a40:	40006c00 	.word	0x40006c00
 8006a44:	20000a00 	.word	0x20000a00

08006a48 <petRewardFeedSetting>:

void petRewardFeedSetting()
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
	amountSetting();
 8006a4e:	f7ff ff25 	bl	800689c <amountSetting>
	char feedYer[20];
	if(kayitOnayDurum)
 8006a52:	4b17      	ldr	r3, [pc, #92]	; (8006ab0 <petRewardFeedSetting+0x68>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <petRewardFeedSetting+0x22>
	{
		BKP->DR2=rewardFeed_amount;
 8006a5a:	4b16      	ldr	r3, [pc, #88]	; (8006ab4 <petRewardFeedSetting+0x6c>)
 8006a5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006a60:	4b15      	ldr	r3, [pc, #84]	; (8006ab8 <petRewardFeedSetting+0x70>)
 8006a62:	609a      	str	r2, [r3, #8]
		kayitOnayDurum=false;
 8006a64:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <petRewardFeedSetting+0x68>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]
	}
	OLED_SetCursor(20, 20);
 8006a6a:	2114      	movs	r1, #20
 8006a6c:	2014      	movs	r0, #20
 8006a6e:	f7fe fb89 	bl	8005184 <OLED_SetCursor>
	OLED_WriteString("ODUL MIKTARI", Font_7x10, White);
 8006a72:	4a12      	ldr	r2, [pc, #72]	; (8006abc <petRewardFeedSetting+0x74>)
 8006a74:	2301      	movs	r3, #1
 8006a76:	ca06      	ldmia	r2, {r1, r2}
 8006a78:	4811      	ldr	r0, [pc, #68]	; (8006ac0 <petRewardFeedSetting+0x78>)
 8006a7a:	f7fe fb5d 	bl	8005138 <OLED_WriteString>
	OLED_SetCursor(20, 35);
 8006a7e:	2123      	movs	r1, #35	; 0x23
 8006a80:	2014      	movs	r0, #20
 8006a82:	f7fe fb7f 	bl	8005184 <OLED_SetCursor>
	sprintf(feedYer," %3d gr",*amountPtr);
 8006a86:	4b0f      	ldr	r3, [pc, #60]	; (8006ac4 <petRewardFeedSetting+0x7c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	1d3b      	adds	r3, r7, #4
 8006a92:	490d      	ldr	r1, [pc, #52]	; (8006ac8 <petRewardFeedSetting+0x80>)
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 f965 	bl	8006d64 <siprintf>
	OLED_WriteString(feedYer, Font_11x18, White);
 8006a9a:	4a0c      	ldr	r2, [pc, #48]	; (8006acc <petRewardFeedSetting+0x84>)
 8006a9c:	1d38      	adds	r0, r7, #4
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	ca06      	ldmia	r2, {r1, r2}
 8006aa2:	f7fe fb49 	bl	8005138 <OLED_WriteString>
}
 8006aa6:	bf00      	nop
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000a20 	.word	0x20000a20
 8006ab4:	2000060c 	.word	0x2000060c
 8006ab8:	40006c00 	.word	0x40006c00
 8006abc:	2000000c 	.word	0x2000000c
 8006ac0:	08007750 	.word	0x08007750
 8006ac4:	20000a24 	.word	0x20000a24
 8006ac8:	08007748 	.word	0x08007748
 8006acc:	20000014 	.word	0x20000014

08006ad0 <KeyRewardPetFeedSetting>:

void KeyRewardPetFeedSetting()
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
	displaySelectKey=PET_REWARD_FEED_SET;
 8006ad4:	4b08      	ldr	r3, [pc, #32]	; (8006af8 <KeyRewardPetFeedSetting+0x28>)
 8006ad6:	2247      	movs	r2, #71	; 0x47
 8006ad8:	701a      	strb	r2, [r3, #0]
	amountPtr=&rewardFeed_amount;
 8006ada:	4b08      	ldr	r3, [pc, #32]	; (8006afc <KeyRewardPetFeedSetting+0x2c>)
 8006adc:	4a08      	ldr	r2, [pc, #32]	; (8006b00 <KeyRewardPetFeedSetting+0x30>)
 8006ade:	601a      	str	r2, [r3, #0]
	rewardFeed_amount=BKP->DR2;
 8006ae0:	4b08      	ldr	r3, [pc, #32]	; (8006b04 <KeyRewardPetFeedSetting+0x34>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	b21a      	sxth	r2, r3
 8006ae6:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <KeyRewardPetFeedSetting+0x30>)
 8006ae8:	801a      	strh	r2, [r3, #0]
	displayClean=true;
 8006aea:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <KeyRewardPetFeedSetting+0x38>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	701a      	strb	r2, [r3, #0]
}
 8006af0:	bf00      	nop
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bc80      	pop	{r7}
 8006af6:	4770      	bx	lr
 8006af8:	20000a22 	.word	0x20000a22
 8006afc:	20000a24 	.word	0x20000a24
 8006b00:	2000060c 	.word	0x2000060c
 8006b04:	40006c00 	.word	0x40006c00
 8006b08:	20000a00 	.word	0x20000a00

08006b0c <petWaterSetting>:

void petWaterSetting()
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
	amountSetting();
 8006b12:	f7ff fec3 	bl	800689c <amountSetting>
	char suYer[20];
	if(kayitOnayDurum)
 8006b16:	4b17      	ldr	r3, [pc, #92]	; (8006b74 <petWaterSetting+0x68>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d007      	beq.n	8006b2e <petWaterSetting+0x22>
	{
		BKP->DR3=water_amount;
 8006b1e:	4b16      	ldr	r3, [pc, #88]	; (8006b78 <petWaterSetting+0x6c>)
 8006b20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006b24:	4b15      	ldr	r3, [pc, #84]	; (8006b7c <petWaterSetting+0x70>)
 8006b26:	60da      	str	r2, [r3, #12]
		kayitOnayDurum=false;
 8006b28:	4b12      	ldr	r3, [pc, #72]	; (8006b74 <petWaterSetting+0x68>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
	}
	OLED_SetCursor(20, 20);
 8006b2e:	2114      	movs	r1, #20
 8006b30:	2014      	movs	r0, #20
 8006b32:	f7fe fb27 	bl	8005184 <OLED_SetCursor>
	OLED_WriteString("SU MIKTARI", Font_7x10, White);
 8006b36:	4a12      	ldr	r2, [pc, #72]	; (8006b80 <petWaterSetting+0x74>)
 8006b38:	2301      	movs	r3, #1
 8006b3a:	ca06      	ldmia	r2, {r1, r2}
 8006b3c:	4811      	ldr	r0, [pc, #68]	; (8006b84 <petWaterSetting+0x78>)
 8006b3e:	f7fe fafb 	bl	8005138 <OLED_WriteString>
	OLED_SetCursor(20, 35);
 8006b42:	2123      	movs	r1, #35	; 0x23
 8006b44:	2014      	movs	r0, #20
 8006b46:	f7fe fb1d 	bl	8005184 <OLED_SetCursor>
	sprintf(suYer," %3d ml",*amountPtr);
 8006b4a:	4b0f      	ldr	r3, [pc, #60]	; (8006b88 <petWaterSetting+0x7c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b52:	461a      	mov	r2, r3
 8006b54:	1d3b      	adds	r3, r7, #4
 8006b56:	490d      	ldr	r1, [pc, #52]	; (8006b8c <petWaterSetting+0x80>)
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 f903 	bl	8006d64 <siprintf>
	OLED_WriteString(suYer, Font_11x18, White);
 8006b5e:	4a0c      	ldr	r2, [pc, #48]	; (8006b90 <petWaterSetting+0x84>)
 8006b60:	1d38      	adds	r0, r7, #4
 8006b62:	2301      	movs	r3, #1
 8006b64:	ca06      	ldmia	r2, {r1, r2}
 8006b66:	f7fe fae7 	bl	8005138 <OLED_WriteString>
}
 8006b6a:	bf00      	nop
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000a20 	.word	0x20000a20
 8006b78:	20000610 	.word	0x20000610
 8006b7c:	40006c00 	.word	0x40006c00
 8006b80:	2000000c 	.word	0x2000000c
 8006b84:	08007760 	.word	0x08007760
 8006b88:	20000a24 	.word	0x20000a24
 8006b8c:	0800776c 	.word	0x0800776c
 8006b90:	20000014 	.word	0x20000014

08006b94 <KeyPetWaterSetting>:

void KeyPetWaterSetting()
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
	displaySelectKey=PET_WATER_SET;
 8006b98:	4b08      	ldr	r3, [pc, #32]	; (8006bbc <KeyPetWaterSetting+0x28>)
 8006b9a:	2246      	movs	r2, #70	; 0x46
 8006b9c:	701a      	strb	r2, [r3, #0]
	amountPtr=&water_amount;
 8006b9e:	4b08      	ldr	r3, [pc, #32]	; (8006bc0 <KeyPetWaterSetting+0x2c>)
 8006ba0:	4a08      	ldr	r2, [pc, #32]	; (8006bc4 <KeyPetWaterSetting+0x30>)
 8006ba2:	601a      	str	r2, [r3, #0]
	water_amount=BKP->DR3;
 8006ba4:	4b08      	ldr	r3, [pc, #32]	; (8006bc8 <KeyPetWaterSetting+0x34>)
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	b21a      	sxth	r2, r3
 8006baa:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <KeyPetWaterSetting+0x30>)
 8006bac:	801a      	strh	r2, [r3, #0]
	displayClean=true;
 8006bae:	4b07      	ldr	r3, [pc, #28]	; (8006bcc <KeyPetWaterSetting+0x38>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	701a      	strb	r2, [r3, #0]
}
 8006bb4:	bf00      	nop
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr
 8006bbc:	20000a22 	.word	0x20000a22
 8006bc0:	20000a24 	.word	0x20000a24
 8006bc4:	20000610 	.word	0x20000610
 8006bc8:	40006c00 	.word	0x40006c00
 8006bcc:	20000a00 	.word	0x20000a00

08006bd0 <fault_Durum>:
		motor2_back();
	}
}

void fault_Durum()
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
	faultDurum=faultRead();
 8006bd4:	f7ff fada 	bl	800618c <faultRead>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	461a      	mov	r2, r3
 8006bdc:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <fault_Durum+0x38>)
 8006bde:	701a      	strb	r2, [r3, #0]

	if(faultDurum)
 8006be0:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <fault_Durum+0x38>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d006      	beq.n	8006bf6 <fault_Durum+0x26>
	{
		HAL_GPIO_WritePin(LED_ALARM_GPIO_Port,LED_ALARM_Pin,RESET);
 8006be8:	2200      	movs	r2, #0
 8006bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bee:	4807      	ldr	r0, [pc, #28]	; (8006c0c <fault_Durum+0x3c>)
 8006bf0:	f7fb f907 	bl	8001e02 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(LED_ALARM_GPIO_Port,LED_ALARM_Pin,SET);

	}
}
 8006bf4:	e005      	b.n	8006c02 <fault_Durum+0x32>
		HAL_GPIO_WritePin(LED_ALARM_GPIO_Port,LED_ALARM_Pin,SET);
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bfc:	4803      	ldr	r0, [pc, #12]	; (8006c0c <fault_Durum+0x3c>)
 8006bfe:	f7fb f900 	bl	8001e02 <HAL_GPIO_WritePin>
}
 8006c02:	bf00      	nop
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	2000060e 	.word	0x2000060e
 8006c0c:	40010c00 	.word	0x40010c00

08006c10 <sleepMode>:

void sleepMode()
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
	  switch(sleepDurum)
 8006c14:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <sleepMode+0x24>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <sleepMode+0x16>
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d105      	bne.n	8006c2c <sleepMode+0x1c>
	  {
	  case true:
		  motorDriverWakeUp();
 8006c20:	f7ff fa9c 	bl	800615c <motorDriverWakeUp>
	  break;
 8006c24:	e004      	b.n	8006c30 <sleepMode+0x20>

	  case false:
		  motorDriverSleep();
 8006c26:	f7ff faa5 	bl	8006174 <motorDriverSleep>
	  break;
 8006c2a:	e001      	b.n	8006c30 <sleepMode+0x20>

	  default:
		  motorDriverWakeUp();
 8006c2c:	f7ff fa96 	bl	800615c <motorDriverWakeUp>

	  }
}
 8006c30:	bf00      	nop
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	200009c4 	.word	0x200009c4

08006c38 <__NVIC_EnableIRQ>:
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	db0b      	blt.n	8006c62 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	f003 021f 	and.w	r2, r3, #31
 8006c50:	4906      	ldr	r1, [pc, #24]	; (8006c6c <__NVIC_EnableIRQ+0x34>)
 8006c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	2001      	movs	r0, #1
 8006c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr
 8006c6c:	e000e100 	.word	0xe000e100

08006c70 <InitTimer7>:
}
}
*/


void InitTimer7(void){
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
RCC->APB1ENR |= RCC_APB1ENR_TIM7EN; // Enable clock for TIM7
 8006c74:	4b12      	ldr	r3, [pc, #72]	; (8006cc0 <InitTimer7+0x50>)
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	4a11      	ldr	r2, [pc, #68]	; (8006cc0 <InitTimer7+0x50>)
 8006c7a:	f043 0320 	orr.w	r3, r3, #32
 8006c7e:	61d3      	str	r3, [r2, #28]
TIM7->CR1 &= ~CEN; // Disable TIM7 interrupt
 8006c80:	4b10      	ldr	r3, [pc, #64]	; (8006cc4 <InitTimer7+0x54>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a0f      	ldr	r2, [pc, #60]	; (8006cc4 <InitTimer7+0x54>)
 8006c86:	f023 0301 	bic.w	r3, r3, #1
 8006c8a:	6013      	str	r3, [r2, #0]
TIM7->PSC = 550;
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <InitTimer7+0x54>)
 8006c8e:	f240 2226 	movw	r2, #550	; 0x226
 8006c92:	629a      	str	r2, [r3, #40]	; 0x28
TIM7->ARR = 3750*2;//RCC_PLL_MUL4
 8006c94:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <InitTimer7+0x54>)
 8006c96:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8006c9a:	62da      	str	r2, [r3, #44]	; 0x2c
NVIC_EnableIRQ(TIM7_IRQn);
 8006c9c:	2037      	movs	r0, #55	; 0x37
 8006c9e:	f7ff ffcb 	bl	8006c38 <__NVIC_EnableIRQ>
TIM7->DIER |= UIE; // Enable TIM7 interrupt
 8006ca2:	4b08      	ldr	r3, [pc, #32]	; (8006cc4 <InitTimer7+0x54>)
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	4a07      	ldr	r2, [pc, #28]	; (8006cc4 <InitTimer7+0x54>)
 8006ca8:	f043 0301 	orr.w	r3, r3, #1
 8006cac:	60d3      	str	r3, [r2, #12]
TIM7->CR1 |= CEN; // TIM7 enable
 8006cae:	4b05      	ldr	r3, [pc, #20]	; (8006cc4 <InitTimer7+0x54>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a04      	ldr	r2, [pc, #16]	; (8006cc4 <InitTimer7+0x54>)
 8006cb4:	f043 0301 	orr.w	r3, r3, #1
 8006cb8:	6013      	str	r3, [r2, #0]
}
 8006cba:	bf00      	nop
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	40001400 	.word	0x40001400

08006cc8 <TIM7_IRQHandler>:


void TIM7_IRQHandler (void) {
 8006cc8:	b480      	push	{r7}
 8006cca:	af00      	add	r7, sp, #0
TIM7->SR &= ~UIF; // Clear UIF
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <TIM7_IRQHandler+0x30>)
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	4a09      	ldr	r2, [pc, #36]	; (8006cf8 <TIM7_IRQHandler+0x30>)
 8006cd2:	f023 0301 	bic.w	r3, r3, #1
 8006cd6:	6113      	str	r3, [r2, #16]
//HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
if(durumFlash)
 8006cd8:	4b08      	ldr	r3, [pc, #32]	; (8006cfc <TIM7_IRQHandler+0x34>)
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <TIM7_IRQHandler+0x20>
{
	durumFlash=false;
 8006ce0:	4b06      	ldr	r3, [pc, #24]	; (8006cfc <TIM7_IRQHandler+0x34>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	701a      	strb	r2, [r3, #0]
}
else
{
	durumFlash=true;
}
}
 8006ce6:	e002      	b.n	8006cee <TIM7_IRQHandler+0x26>
	durumFlash=true;
 8006ce8:	4b04      	ldr	r3, [pc, #16]	; (8006cfc <TIM7_IRQHandler+0x34>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	701a      	strb	r2, [r3, #0]
}
 8006cee:	bf00      	nop
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bc80      	pop	{r7}
 8006cf4:	4770      	bx	lr
 8006cf6:	bf00      	nop
 8006cf8:	40001400 	.word	0x40001400
 8006cfc:	20000829 	.word	0x20000829

08006d00 <__errno>:
 8006d00:	4b01      	ldr	r3, [pc, #4]	; (8006d08 <__errno+0x8>)
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	2000015c 	.word	0x2000015c

08006d0c <__libc_init_array>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	2500      	movs	r5, #0
 8006d10:	4e0c      	ldr	r6, [pc, #48]	; (8006d44 <__libc_init_array+0x38>)
 8006d12:	4c0d      	ldr	r4, [pc, #52]	; (8006d48 <__libc_init_array+0x3c>)
 8006d14:	1ba4      	subs	r4, r4, r6
 8006d16:	10a4      	asrs	r4, r4, #2
 8006d18:	42a5      	cmp	r5, r4
 8006d1a:	d109      	bne.n	8006d30 <__libc_init_array+0x24>
 8006d1c:	f000 fc3c 	bl	8007598 <_init>
 8006d20:	2500      	movs	r5, #0
 8006d22:	4e0a      	ldr	r6, [pc, #40]	; (8006d4c <__libc_init_array+0x40>)
 8006d24:	4c0a      	ldr	r4, [pc, #40]	; (8006d50 <__libc_init_array+0x44>)
 8006d26:	1ba4      	subs	r4, r4, r6
 8006d28:	10a4      	asrs	r4, r4, #2
 8006d2a:	42a5      	cmp	r5, r4
 8006d2c:	d105      	bne.n	8006d3a <__libc_init_array+0x2e>
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d34:	4798      	blx	r3
 8006d36:	3501      	adds	r5, #1
 8006d38:	e7ee      	b.n	8006d18 <__libc_init_array+0xc>
 8006d3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d3e:	4798      	blx	r3
 8006d40:	3501      	adds	r5, #1
 8006d42:	e7f2      	b.n	8006d2a <__libc_init_array+0x1e>
 8006d44:	08009340 	.word	0x08009340
 8006d48:	08009340 	.word	0x08009340
 8006d4c:	08009340 	.word	0x08009340
 8006d50:	08009344 	.word	0x08009344

08006d54 <memset>:
 8006d54:	4603      	mov	r3, r0
 8006d56:	4402      	add	r2, r0
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d100      	bne.n	8006d5e <memset+0xa>
 8006d5c:	4770      	bx	lr
 8006d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d62:	e7f9      	b.n	8006d58 <memset+0x4>

08006d64 <siprintf>:
 8006d64:	b40e      	push	{r1, r2, r3}
 8006d66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d6a:	b500      	push	{lr}
 8006d6c:	b09c      	sub	sp, #112	; 0x70
 8006d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8006d70:	9002      	str	r0, [sp, #8]
 8006d72:	9006      	str	r0, [sp, #24]
 8006d74:	9107      	str	r1, [sp, #28]
 8006d76:	9104      	str	r1, [sp, #16]
 8006d78:	4808      	ldr	r0, [pc, #32]	; (8006d9c <siprintf+0x38>)
 8006d7a:	4909      	ldr	r1, [pc, #36]	; (8006da0 <siprintf+0x3c>)
 8006d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d80:	9105      	str	r1, [sp, #20]
 8006d82:	6800      	ldr	r0, [r0, #0]
 8006d84:	a902      	add	r1, sp, #8
 8006d86:	9301      	str	r3, [sp, #4]
 8006d88:	f000 f86e 	bl	8006e68 <_svfiprintf_r>
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	9b02      	ldr	r3, [sp, #8]
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	b01c      	add	sp, #112	; 0x70
 8006d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d98:	b003      	add	sp, #12
 8006d9a:	4770      	bx	lr
 8006d9c:	2000015c 	.word	0x2000015c
 8006da0:	ffff0208 	.word	0xffff0208

08006da4 <strcpy>:
 8006da4:	4603      	mov	r3, r0
 8006da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006daa:	f803 2b01 	strb.w	r2, [r3], #1
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	d1f9      	bne.n	8006da6 <strcpy+0x2>
 8006db2:	4770      	bx	lr

08006db4 <__ssputs_r>:
 8006db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db8:	688e      	ldr	r6, [r1, #8]
 8006dba:	4682      	mov	sl, r0
 8006dbc:	429e      	cmp	r6, r3
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	4690      	mov	r8, r2
 8006dc2:	4699      	mov	r9, r3
 8006dc4:	d837      	bhi.n	8006e36 <__ssputs_r+0x82>
 8006dc6:	898a      	ldrh	r2, [r1, #12]
 8006dc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dcc:	d031      	beq.n	8006e32 <__ssputs_r+0x7e>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	6825      	ldr	r5, [r4, #0]
 8006dd2:	6909      	ldr	r1, [r1, #16]
 8006dd4:	1a6f      	subs	r7, r5, r1
 8006dd6:	6965      	ldr	r5, [r4, #20]
 8006dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ddc:	fb95 f5f3 	sdiv	r5, r5, r3
 8006de0:	f109 0301 	add.w	r3, r9, #1
 8006de4:	443b      	add	r3, r7
 8006de6:	429d      	cmp	r5, r3
 8006de8:	bf38      	it	cc
 8006dea:	461d      	movcc	r5, r3
 8006dec:	0553      	lsls	r3, r2, #21
 8006dee:	d530      	bpl.n	8006e52 <__ssputs_r+0x9e>
 8006df0:	4629      	mov	r1, r5
 8006df2:	f000 fb37 	bl	8007464 <_malloc_r>
 8006df6:	4606      	mov	r6, r0
 8006df8:	b950      	cbnz	r0, 8006e10 <__ssputs_r+0x5c>
 8006dfa:	230c      	movs	r3, #12
 8006dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006e00:	f8ca 3000 	str.w	r3, [sl]
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e0a:	81a3      	strh	r3, [r4, #12]
 8006e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e10:	463a      	mov	r2, r7
 8006e12:	6921      	ldr	r1, [r4, #16]
 8006e14:	f000 fab6 	bl	8007384 <memcpy>
 8006e18:	89a3      	ldrh	r3, [r4, #12]
 8006e1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e22:	81a3      	strh	r3, [r4, #12]
 8006e24:	6126      	str	r6, [r4, #16]
 8006e26:	443e      	add	r6, r7
 8006e28:	6026      	str	r6, [r4, #0]
 8006e2a:	464e      	mov	r6, r9
 8006e2c:	6165      	str	r5, [r4, #20]
 8006e2e:	1bed      	subs	r5, r5, r7
 8006e30:	60a5      	str	r5, [r4, #8]
 8006e32:	454e      	cmp	r6, r9
 8006e34:	d900      	bls.n	8006e38 <__ssputs_r+0x84>
 8006e36:	464e      	mov	r6, r9
 8006e38:	4632      	mov	r2, r6
 8006e3a:	4641      	mov	r1, r8
 8006e3c:	6820      	ldr	r0, [r4, #0]
 8006e3e:	f000 faac 	bl	800739a <memmove>
 8006e42:	68a3      	ldr	r3, [r4, #8]
 8006e44:	2000      	movs	r0, #0
 8006e46:	1b9b      	subs	r3, r3, r6
 8006e48:	60a3      	str	r3, [r4, #8]
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	441e      	add	r6, r3
 8006e4e:	6026      	str	r6, [r4, #0]
 8006e50:	e7dc      	b.n	8006e0c <__ssputs_r+0x58>
 8006e52:	462a      	mov	r2, r5
 8006e54:	f000 fb60 	bl	8007518 <_realloc_r>
 8006e58:	4606      	mov	r6, r0
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d1e2      	bne.n	8006e24 <__ssputs_r+0x70>
 8006e5e:	6921      	ldr	r1, [r4, #16]
 8006e60:	4650      	mov	r0, sl
 8006e62:	f000 fab3 	bl	80073cc <_free_r>
 8006e66:	e7c8      	b.n	8006dfa <__ssputs_r+0x46>

08006e68 <_svfiprintf_r>:
 8006e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6c:	461d      	mov	r5, r3
 8006e6e:	898b      	ldrh	r3, [r1, #12]
 8006e70:	b09d      	sub	sp, #116	; 0x74
 8006e72:	061f      	lsls	r7, r3, #24
 8006e74:	4680      	mov	r8, r0
 8006e76:	460c      	mov	r4, r1
 8006e78:	4616      	mov	r6, r2
 8006e7a:	d50f      	bpl.n	8006e9c <_svfiprintf_r+0x34>
 8006e7c:	690b      	ldr	r3, [r1, #16]
 8006e7e:	b96b      	cbnz	r3, 8006e9c <_svfiprintf_r+0x34>
 8006e80:	2140      	movs	r1, #64	; 0x40
 8006e82:	f000 faef 	bl	8007464 <_malloc_r>
 8006e86:	6020      	str	r0, [r4, #0]
 8006e88:	6120      	str	r0, [r4, #16]
 8006e8a:	b928      	cbnz	r0, 8006e98 <_svfiprintf_r+0x30>
 8006e8c:	230c      	movs	r3, #12
 8006e8e:	f8c8 3000 	str.w	r3, [r8]
 8006e92:	f04f 30ff 	mov.w	r0, #4294967295
 8006e96:	e0c8      	b.n	800702a <_svfiprintf_r+0x1c2>
 8006e98:	2340      	movs	r3, #64	; 0x40
 8006e9a:	6163      	str	r3, [r4, #20]
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea0:	2320      	movs	r3, #32
 8006ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ea6:	2330      	movs	r3, #48	; 0x30
 8006ea8:	f04f 0b01 	mov.w	fp, #1
 8006eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006eb0:	9503      	str	r5, [sp, #12]
 8006eb2:	4637      	mov	r7, r6
 8006eb4:	463d      	mov	r5, r7
 8006eb6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006eba:	b10b      	cbz	r3, 8006ec0 <_svfiprintf_r+0x58>
 8006ebc:	2b25      	cmp	r3, #37	; 0x25
 8006ebe:	d13e      	bne.n	8006f3e <_svfiprintf_r+0xd6>
 8006ec0:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ec4:	d00b      	beq.n	8006ede <_svfiprintf_r+0x76>
 8006ec6:	4653      	mov	r3, sl
 8006ec8:	4632      	mov	r2, r6
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4640      	mov	r0, r8
 8006ece:	f7ff ff71 	bl	8006db4 <__ssputs_r>
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	f000 80a4 	beq.w	8007020 <_svfiprintf_r+0x1b8>
 8006ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eda:	4453      	add	r3, sl
 8006edc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ede:	783b      	ldrb	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 809d 	beq.w	8007020 <_svfiprintf_r+0x1b8>
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8006eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ef0:	9304      	str	r3, [sp, #16]
 8006ef2:	9307      	str	r3, [sp, #28]
 8006ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8006efa:	462f      	mov	r7, r5
 8006efc:	2205      	movs	r2, #5
 8006efe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006f02:	4850      	ldr	r0, [pc, #320]	; (8007044 <_svfiprintf_r+0x1dc>)
 8006f04:	f000 fa30 	bl	8007368 <memchr>
 8006f08:	9b04      	ldr	r3, [sp, #16]
 8006f0a:	b9d0      	cbnz	r0, 8006f42 <_svfiprintf_r+0xda>
 8006f0c:	06d9      	lsls	r1, r3, #27
 8006f0e:	bf44      	itt	mi
 8006f10:	2220      	movmi	r2, #32
 8006f12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f16:	071a      	lsls	r2, r3, #28
 8006f18:	bf44      	itt	mi
 8006f1a:	222b      	movmi	r2, #43	; 0x2b
 8006f1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f20:	782a      	ldrb	r2, [r5, #0]
 8006f22:	2a2a      	cmp	r2, #42	; 0x2a
 8006f24:	d015      	beq.n	8006f52 <_svfiprintf_r+0xea>
 8006f26:	462f      	mov	r7, r5
 8006f28:	2000      	movs	r0, #0
 8006f2a:	250a      	movs	r5, #10
 8006f2c:	9a07      	ldr	r2, [sp, #28]
 8006f2e:	4639      	mov	r1, r7
 8006f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f34:	3b30      	subs	r3, #48	; 0x30
 8006f36:	2b09      	cmp	r3, #9
 8006f38:	d94d      	bls.n	8006fd6 <_svfiprintf_r+0x16e>
 8006f3a:	b1b8      	cbz	r0, 8006f6c <_svfiprintf_r+0x104>
 8006f3c:	e00f      	b.n	8006f5e <_svfiprintf_r+0xf6>
 8006f3e:	462f      	mov	r7, r5
 8006f40:	e7b8      	b.n	8006eb4 <_svfiprintf_r+0x4c>
 8006f42:	4a40      	ldr	r2, [pc, #256]	; (8007044 <_svfiprintf_r+0x1dc>)
 8006f44:	463d      	mov	r5, r7
 8006f46:	1a80      	subs	r0, r0, r2
 8006f48:	fa0b f000 	lsl.w	r0, fp, r0
 8006f4c:	4318      	orrs	r0, r3
 8006f4e:	9004      	str	r0, [sp, #16]
 8006f50:	e7d3      	b.n	8006efa <_svfiprintf_r+0x92>
 8006f52:	9a03      	ldr	r2, [sp, #12]
 8006f54:	1d11      	adds	r1, r2, #4
 8006f56:	6812      	ldr	r2, [r2, #0]
 8006f58:	9103      	str	r1, [sp, #12]
 8006f5a:	2a00      	cmp	r2, #0
 8006f5c:	db01      	blt.n	8006f62 <_svfiprintf_r+0xfa>
 8006f5e:	9207      	str	r2, [sp, #28]
 8006f60:	e004      	b.n	8006f6c <_svfiprintf_r+0x104>
 8006f62:	4252      	negs	r2, r2
 8006f64:	f043 0302 	orr.w	r3, r3, #2
 8006f68:	9207      	str	r2, [sp, #28]
 8006f6a:	9304      	str	r3, [sp, #16]
 8006f6c:	783b      	ldrb	r3, [r7, #0]
 8006f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f70:	d10c      	bne.n	8006f8c <_svfiprintf_r+0x124>
 8006f72:	787b      	ldrb	r3, [r7, #1]
 8006f74:	2b2a      	cmp	r3, #42	; 0x2a
 8006f76:	d133      	bne.n	8006fe0 <_svfiprintf_r+0x178>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	3702      	adds	r7, #2
 8006f7c:	1d1a      	adds	r2, r3, #4
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	9203      	str	r2, [sp, #12]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bfb8      	it	lt
 8006f86:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f8a:	9305      	str	r3, [sp, #20]
 8006f8c:	4d2e      	ldr	r5, [pc, #184]	; (8007048 <_svfiprintf_r+0x1e0>)
 8006f8e:	2203      	movs	r2, #3
 8006f90:	7839      	ldrb	r1, [r7, #0]
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f9e8 	bl	8007368 <memchr>
 8006f98:	b138      	cbz	r0, 8006faa <_svfiprintf_r+0x142>
 8006f9a:	2340      	movs	r3, #64	; 0x40
 8006f9c:	1b40      	subs	r0, r0, r5
 8006f9e:	fa03 f000 	lsl.w	r0, r3, r0
 8006fa2:	9b04      	ldr	r3, [sp, #16]
 8006fa4:	3701      	adds	r7, #1
 8006fa6:	4303      	orrs	r3, r0
 8006fa8:	9304      	str	r3, [sp, #16]
 8006faa:	7839      	ldrb	r1, [r7, #0]
 8006fac:	2206      	movs	r2, #6
 8006fae:	4827      	ldr	r0, [pc, #156]	; (800704c <_svfiprintf_r+0x1e4>)
 8006fb0:	1c7e      	adds	r6, r7, #1
 8006fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fb6:	f000 f9d7 	bl	8007368 <memchr>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d038      	beq.n	8007030 <_svfiprintf_r+0x1c8>
 8006fbe:	4b24      	ldr	r3, [pc, #144]	; (8007050 <_svfiprintf_r+0x1e8>)
 8006fc0:	bb13      	cbnz	r3, 8007008 <_svfiprintf_r+0x1a0>
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	3307      	adds	r3, #7
 8006fc6:	f023 0307 	bic.w	r3, r3, #7
 8006fca:	3308      	adds	r3, #8
 8006fcc:	9303      	str	r3, [sp, #12]
 8006fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd0:	444b      	add	r3, r9
 8006fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd4:	e76d      	b.n	8006eb2 <_svfiprintf_r+0x4a>
 8006fd6:	fb05 3202 	mla	r2, r5, r2, r3
 8006fda:	2001      	movs	r0, #1
 8006fdc:	460f      	mov	r7, r1
 8006fde:	e7a6      	b.n	8006f2e <_svfiprintf_r+0xc6>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	250a      	movs	r5, #10
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	3701      	adds	r7, #1
 8006fe8:	9305      	str	r3, [sp, #20]
 8006fea:	4638      	mov	r0, r7
 8006fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ff0:	3a30      	subs	r2, #48	; 0x30
 8006ff2:	2a09      	cmp	r2, #9
 8006ff4:	d903      	bls.n	8006ffe <_svfiprintf_r+0x196>
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d0c8      	beq.n	8006f8c <_svfiprintf_r+0x124>
 8006ffa:	9105      	str	r1, [sp, #20]
 8006ffc:	e7c6      	b.n	8006f8c <_svfiprintf_r+0x124>
 8006ffe:	fb05 2101 	mla	r1, r5, r1, r2
 8007002:	2301      	movs	r3, #1
 8007004:	4607      	mov	r7, r0
 8007006:	e7f0      	b.n	8006fea <_svfiprintf_r+0x182>
 8007008:	ab03      	add	r3, sp, #12
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	4622      	mov	r2, r4
 800700e:	4b11      	ldr	r3, [pc, #68]	; (8007054 <_svfiprintf_r+0x1ec>)
 8007010:	a904      	add	r1, sp, #16
 8007012:	4640      	mov	r0, r8
 8007014:	f3af 8000 	nop.w
 8007018:	f1b0 3fff 	cmp.w	r0, #4294967295
 800701c:	4681      	mov	r9, r0
 800701e:	d1d6      	bne.n	8006fce <_svfiprintf_r+0x166>
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	065b      	lsls	r3, r3, #25
 8007024:	f53f af35 	bmi.w	8006e92 <_svfiprintf_r+0x2a>
 8007028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800702a:	b01d      	add	sp, #116	; 0x74
 800702c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007030:	ab03      	add	r3, sp, #12
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	4622      	mov	r2, r4
 8007036:	4b07      	ldr	r3, [pc, #28]	; (8007054 <_svfiprintf_r+0x1ec>)
 8007038:	a904      	add	r1, sp, #16
 800703a:	4640      	mov	r0, r8
 800703c:	f000 f882 	bl	8007144 <_printf_i>
 8007040:	e7ea      	b.n	8007018 <_svfiprintf_r+0x1b0>
 8007042:	bf00      	nop
 8007044:	0800930c 	.word	0x0800930c
 8007048:	08009312 	.word	0x08009312
 800704c:	08009316 	.word	0x08009316
 8007050:	00000000 	.word	0x00000000
 8007054:	08006db5 	.word	0x08006db5

08007058 <_printf_common>:
 8007058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800705c:	4691      	mov	r9, r2
 800705e:	461f      	mov	r7, r3
 8007060:	688a      	ldr	r2, [r1, #8]
 8007062:	690b      	ldr	r3, [r1, #16]
 8007064:	4606      	mov	r6, r0
 8007066:	4293      	cmp	r3, r2
 8007068:	bfb8      	it	lt
 800706a:	4613      	movlt	r3, r2
 800706c:	f8c9 3000 	str.w	r3, [r9]
 8007070:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007074:	460c      	mov	r4, r1
 8007076:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800707a:	b112      	cbz	r2, 8007082 <_printf_common+0x2a>
 800707c:	3301      	adds	r3, #1
 800707e:	f8c9 3000 	str.w	r3, [r9]
 8007082:	6823      	ldr	r3, [r4, #0]
 8007084:	0699      	lsls	r1, r3, #26
 8007086:	bf42      	ittt	mi
 8007088:	f8d9 3000 	ldrmi.w	r3, [r9]
 800708c:	3302      	addmi	r3, #2
 800708e:	f8c9 3000 	strmi.w	r3, [r9]
 8007092:	6825      	ldr	r5, [r4, #0]
 8007094:	f015 0506 	ands.w	r5, r5, #6
 8007098:	d107      	bne.n	80070aa <_printf_common+0x52>
 800709a:	f104 0a19 	add.w	sl, r4, #25
 800709e:	68e3      	ldr	r3, [r4, #12]
 80070a0:	f8d9 2000 	ldr.w	r2, [r9]
 80070a4:	1a9b      	subs	r3, r3, r2
 80070a6:	42ab      	cmp	r3, r5
 80070a8:	dc29      	bgt.n	80070fe <_printf_common+0xa6>
 80070aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	3300      	adds	r3, #0
 80070b2:	bf18      	it	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	0692      	lsls	r2, r2, #26
 80070b8:	d42e      	bmi.n	8007118 <_printf_common+0xc0>
 80070ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070be:	4639      	mov	r1, r7
 80070c0:	4630      	mov	r0, r6
 80070c2:	47c0      	blx	r8
 80070c4:	3001      	adds	r0, #1
 80070c6:	d021      	beq.n	800710c <_printf_common+0xb4>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	68e5      	ldr	r5, [r4, #12]
 80070cc:	f003 0306 	and.w	r3, r3, #6
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	bf18      	it	ne
 80070d4:	2500      	movne	r5, #0
 80070d6:	f8d9 2000 	ldr.w	r2, [r9]
 80070da:	f04f 0900 	mov.w	r9, #0
 80070de:	bf08      	it	eq
 80070e0:	1aad      	subeq	r5, r5, r2
 80070e2:	68a3      	ldr	r3, [r4, #8]
 80070e4:	6922      	ldr	r2, [r4, #16]
 80070e6:	bf08      	it	eq
 80070e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070ec:	4293      	cmp	r3, r2
 80070ee:	bfc4      	itt	gt
 80070f0:	1a9b      	subgt	r3, r3, r2
 80070f2:	18ed      	addgt	r5, r5, r3
 80070f4:	341a      	adds	r4, #26
 80070f6:	454d      	cmp	r5, r9
 80070f8:	d11a      	bne.n	8007130 <_printf_common+0xd8>
 80070fa:	2000      	movs	r0, #0
 80070fc:	e008      	b.n	8007110 <_printf_common+0xb8>
 80070fe:	2301      	movs	r3, #1
 8007100:	4652      	mov	r2, sl
 8007102:	4639      	mov	r1, r7
 8007104:	4630      	mov	r0, r6
 8007106:	47c0      	blx	r8
 8007108:	3001      	adds	r0, #1
 800710a:	d103      	bne.n	8007114 <_printf_common+0xbc>
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007114:	3501      	adds	r5, #1
 8007116:	e7c2      	b.n	800709e <_printf_common+0x46>
 8007118:	2030      	movs	r0, #48	; 0x30
 800711a:	18e1      	adds	r1, r4, r3
 800711c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007126:	4422      	add	r2, r4
 8007128:	3302      	adds	r3, #2
 800712a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800712e:	e7c4      	b.n	80070ba <_printf_common+0x62>
 8007130:	2301      	movs	r3, #1
 8007132:	4622      	mov	r2, r4
 8007134:	4639      	mov	r1, r7
 8007136:	4630      	mov	r0, r6
 8007138:	47c0      	blx	r8
 800713a:	3001      	adds	r0, #1
 800713c:	d0e6      	beq.n	800710c <_printf_common+0xb4>
 800713e:	f109 0901 	add.w	r9, r9, #1
 8007142:	e7d8      	b.n	80070f6 <_printf_common+0x9e>

08007144 <_printf_i>:
 8007144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007148:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800714c:	460c      	mov	r4, r1
 800714e:	7e09      	ldrb	r1, [r1, #24]
 8007150:	b085      	sub	sp, #20
 8007152:	296e      	cmp	r1, #110	; 0x6e
 8007154:	4617      	mov	r7, r2
 8007156:	4606      	mov	r6, r0
 8007158:	4698      	mov	r8, r3
 800715a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800715c:	f000 80b3 	beq.w	80072c6 <_printf_i+0x182>
 8007160:	d822      	bhi.n	80071a8 <_printf_i+0x64>
 8007162:	2963      	cmp	r1, #99	; 0x63
 8007164:	d036      	beq.n	80071d4 <_printf_i+0x90>
 8007166:	d80a      	bhi.n	800717e <_printf_i+0x3a>
 8007168:	2900      	cmp	r1, #0
 800716a:	f000 80b9 	beq.w	80072e0 <_printf_i+0x19c>
 800716e:	2958      	cmp	r1, #88	; 0x58
 8007170:	f000 8083 	beq.w	800727a <_printf_i+0x136>
 8007174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007178:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800717c:	e032      	b.n	80071e4 <_printf_i+0xa0>
 800717e:	2964      	cmp	r1, #100	; 0x64
 8007180:	d001      	beq.n	8007186 <_printf_i+0x42>
 8007182:	2969      	cmp	r1, #105	; 0x69
 8007184:	d1f6      	bne.n	8007174 <_printf_i+0x30>
 8007186:	6820      	ldr	r0, [r4, #0]
 8007188:	6813      	ldr	r3, [r2, #0]
 800718a:	0605      	lsls	r5, r0, #24
 800718c:	f103 0104 	add.w	r1, r3, #4
 8007190:	d52a      	bpl.n	80071e8 <_printf_i+0xa4>
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6011      	str	r1, [r2, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	da03      	bge.n	80071a2 <_printf_i+0x5e>
 800719a:	222d      	movs	r2, #45	; 0x2d
 800719c:	425b      	negs	r3, r3
 800719e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80071a2:	486f      	ldr	r0, [pc, #444]	; (8007360 <_printf_i+0x21c>)
 80071a4:	220a      	movs	r2, #10
 80071a6:	e039      	b.n	800721c <_printf_i+0xd8>
 80071a8:	2973      	cmp	r1, #115	; 0x73
 80071aa:	f000 809d 	beq.w	80072e8 <_printf_i+0x1a4>
 80071ae:	d808      	bhi.n	80071c2 <_printf_i+0x7e>
 80071b0:	296f      	cmp	r1, #111	; 0x6f
 80071b2:	d020      	beq.n	80071f6 <_printf_i+0xb2>
 80071b4:	2970      	cmp	r1, #112	; 0x70
 80071b6:	d1dd      	bne.n	8007174 <_printf_i+0x30>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	f043 0320 	orr.w	r3, r3, #32
 80071be:	6023      	str	r3, [r4, #0]
 80071c0:	e003      	b.n	80071ca <_printf_i+0x86>
 80071c2:	2975      	cmp	r1, #117	; 0x75
 80071c4:	d017      	beq.n	80071f6 <_printf_i+0xb2>
 80071c6:	2978      	cmp	r1, #120	; 0x78
 80071c8:	d1d4      	bne.n	8007174 <_printf_i+0x30>
 80071ca:	2378      	movs	r3, #120	; 0x78
 80071cc:	4865      	ldr	r0, [pc, #404]	; (8007364 <_printf_i+0x220>)
 80071ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071d2:	e055      	b.n	8007280 <_printf_i+0x13c>
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071da:	1d19      	adds	r1, r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6011      	str	r1, [r2, #0]
 80071e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071e4:	2301      	movs	r3, #1
 80071e6:	e08c      	b.n	8007302 <_printf_i+0x1be>
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80071ee:	6011      	str	r1, [r2, #0]
 80071f0:	bf18      	it	ne
 80071f2:	b21b      	sxthne	r3, r3
 80071f4:	e7cf      	b.n	8007196 <_printf_i+0x52>
 80071f6:	6813      	ldr	r3, [r2, #0]
 80071f8:	6825      	ldr	r5, [r4, #0]
 80071fa:	1d18      	adds	r0, r3, #4
 80071fc:	6010      	str	r0, [r2, #0]
 80071fe:	0628      	lsls	r0, r5, #24
 8007200:	d501      	bpl.n	8007206 <_printf_i+0xc2>
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	e002      	b.n	800720c <_printf_i+0xc8>
 8007206:	0668      	lsls	r0, r5, #25
 8007208:	d5fb      	bpl.n	8007202 <_printf_i+0xbe>
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	296f      	cmp	r1, #111	; 0x6f
 800720e:	bf14      	ite	ne
 8007210:	220a      	movne	r2, #10
 8007212:	2208      	moveq	r2, #8
 8007214:	4852      	ldr	r0, [pc, #328]	; (8007360 <_printf_i+0x21c>)
 8007216:	2100      	movs	r1, #0
 8007218:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800721c:	6865      	ldr	r5, [r4, #4]
 800721e:	2d00      	cmp	r5, #0
 8007220:	60a5      	str	r5, [r4, #8]
 8007222:	f2c0 8095 	blt.w	8007350 <_printf_i+0x20c>
 8007226:	6821      	ldr	r1, [r4, #0]
 8007228:	f021 0104 	bic.w	r1, r1, #4
 800722c:	6021      	str	r1, [r4, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d13d      	bne.n	80072ae <_printf_i+0x16a>
 8007232:	2d00      	cmp	r5, #0
 8007234:	f040 808e 	bne.w	8007354 <_printf_i+0x210>
 8007238:	4665      	mov	r5, ip
 800723a:	2a08      	cmp	r2, #8
 800723c:	d10b      	bne.n	8007256 <_printf_i+0x112>
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	07db      	lsls	r3, r3, #31
 8007242:	d508      	bpl.n	8007256 <_printf_i+0x112>
 8007244:	6923      	ldr	r3, [r4, #16]
 8007246:	6862      	ldr	r2, [r4, #4]
 8007248:	429a      	cmp	r2, r3
 800724a:	bfde      	ittt	le
 800724c:	2330      	movle	r3, #48	; 0x30
 800724e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007252:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007256:	ebac 0305 	sub.w	r3, ip, r5
 800725a:	6123      	str	r3, [r4, #16]
 800725c:	f8cd 8000 	str.w	r8, [sp]
 8007260:	463b      	mov	r3, r7
 8007262:	aa03      	add	r2, sp, #12
 8007264:	4621      	mov	r1, r4
 8007266:	4630      	mov	r0, r6
 8007268:	f7ff fef6 	bl	8007058 <_printf_common>
 800726c:	3001      	adds	r0, #1
 800726e:	d14d      	bne.n	800730c <_printf_i+0x1c8>
 8007270:	f04f 30ff 	mov.w	r0, #4294967295
 8007274:	b005      	add	sp, #20
 8007276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800727a:	4839      	ldr	r0, [pc, #228]	; (8007360 <_printf_i+0x21c>)
 800727c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007280:	6813      	ldr	r3, [r2, #0]
 8007282:	6821      	ldr	r1, [r4, #0]
 8007284:	1d1d      	adds	r5, r3, #4
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6015      	str	r5, [r2, #0]
 800728a:	060a      	lsls	r2, r1, #24
 800728c:	d50b      	bpl.n	80072a6 <_printf_i+0x162>
 800728e:	07ca      	lsls	r2, r1, #31
 8007290:	bf44      	itt	mi
 8007292:	f041 0120 	orrmi.w	r1, r1, #32
 8007296:	6021      	strmi	r1, [r4, #0]
 8007298:	b91b      	cbnz	r3, 80072a2 <_printf_i+0x15e>
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	f022 0220 	bic.w	r2, r2, #32
 80072a0:	6022      	str	r2, [r4, #0]
 80072a2:	2210      	movs	r2, #16
 80072a4:	e7b7      	b.n	8007216 <_printf_i+0xd2>
 80072a6:	064d      	lsls	r5, r1, #25
 80072a8:	bf48      	it	mi
 80072aa:	b29b      	uxthmi	r3, r3
 80072ac:	e7ef      	b.n	800728e <_printf_i+0x14a>
 80072ae:	4665      	mov	r5, ip
 80072b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80072b4:	fb02 3311 	mls	r3, r2, r1, r3
 80072b8:	5cc3      	ldrb	r3, [r0, r3]
 80072ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80072be:	460b      	mov	r3, r1
 80072c0:	2900      	cmp	r1, #0
 80072c2:	d1f5      	bne.n	80072b0 <_printf_i+0x16c>
 80072c4:	e7b9      	b.n	800723a <_printf_i+0xf6>
 80072c6:	6813      	ldr	r3, [r2, #0]
 80072c8:	6825      	ldr	r5, [r4, #0]
 80072ca:	1d18      	adds	r0, r3, #4
 80072cc:	6961      	ldr	r1, [r4, #20]
 80072ce:	6010      	str	r0, [r2, #0]
 80072d0:	0628      	lsls	r0, r5, #24
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	d501      	bpl.n	80072da <_printf_i+0x196>
 80072d6:	6019      	str	r1, [r3, #0]
 80072d8:	e002      	b.n	80072e0 <_printf_i+0x19c>
 80072da:	066a      	lsls	r2, r5, #25
 80072dc:	d5fb      	bpl.n	80072d6 <_printf_i+0x192>
 80072de:	8019      	strh	r1, [r3, #0]
 80072e0:	2300      	movs	r3, #0
 80072e2:	4665      	mov	r5, ip
 80072e4:	6123      	str	r3, [r4, #16]
 80072e6:	e7b9      	b.n	800725c <_printf_i+0x118>
 80072e8:	6813      	ldr	r3, [r2, #0]
 80072ea:	1d19      	adds	r1, r3, #4
 80072ec:	6011      	str	r1, [r2, #0]
 80072ee:	681d      	ldr	r5, [r3, #0]
 80072f0:	6862      	ldr	r2, [r4, #4]
 80072f2:	2100      	movs	r1, #0
 80072f4:	4628      	mov	r0, r5
 80072f6:	f000 f837 	bl	8007368 <memchr>
 80072fa:	b108      	cbz	r0, 8007300 <_printf_i+0x1bc>
 80072fc:	1b40      	subs	r0, r0, r5
 80072fe:	6060      	str	r0, [r4, #4]
 8007300:	6863      	ldr	r3, [r4, #4]
 8007302:	6123      	str	r3, [r4, #16]
 8007304:	2300      	movs	r3, #0
 8007306:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800730a:	e7a7      	b.n	800725c <_printf_i+0x118>
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	462a      	mov	r2, r5
 8007310:	4639      	mov	r1, r7
 8007312:	4630      	mov	r0, r6
 8007314:	47c0      	blx	r8
 8007316:	3001      	adds	r0, #1
 8007318:	d0aa      	beq.n	8007270 <_printf_i+0x12c>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	079b      	lsls	r3, r3, #30
 800731e:	d413      	bmi.n	8007348 <_printf_i+0x204>
 8007320:	68e0      	ldr	r0, [r4, #12]
 8007322:	9b03      	ldr	r3, [sp, #12]
 8007324:	4298      	cmp	r0, r3
 8007326:	bfb8      	it	lt
 8007328:	4618      	movlt	r0, r3
 800732a:	e7a3      	b.n	8007274 <_printf_i+0x130>
 800732c:	2301      	movs	r3, #1
 800732e:	464a      	mov	r2, r9
 8007330:	4639      	mov	r1, r7
 8007332:	4630      	mov	r0, r6
 8007334:	47c0      	blx	r8
 8007336:	3001      	adds	r0, #1
 8007338:	d09a      	beq.n	8007270 <_printf_i+0x12c>
 800733a:	3501      	adds	r5, #1
 800733c:	68e3      	ldr	r3, [r4, #12]
 800733e:	9a03      	ldr	r2, [sp, #12]
 8007340:	1a9b      	subs	r3, r3, r2
 8007342:	42ab      	cmp	r3, r5
 8007344:	dcf2      	bgt.n	800732c <_printf_i+0x1e8>
 8007346:	e7eb      	b.n	8007320 <_printf_i+0x1dc>
 8007348:	2500      	movs	r5, #0
 800734a:	f104 0919 	add.w	r9, r4, #25
 800734e:	e7f5      	b.n	800733c <_printf_i+0x1f8>
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1ac      	bne.n	80072ae <_printf_i+0x16a>
 8007354:	7803      	ldrb	r3, [r0, #0]
 8007356:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800735a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800735e:	e76c      	b.n	800723a <_printf_i+0xf6>
 8007360:	0800931d 	.word	0x0800931d
 8007364:	0800932e 	.word	0x0800932e

08007368 <memchr>:
 8007368:	b510      	push	{r4, lr}
 800736a:	b2c9      	uxtb	r1, r1
 800736c:	4402      	add	r2, r0
 800736e:	4290      	cmp	r0, r2
 8007370:	4603      	mov	r3, r0
 8007372:	d101      	bne.n	8007378 <memchr+0x10>
 8007374:	2300      	movs	r3, #0
 8007376:	e003      	b.n	8007380 <memchr+0x18>
 8007378:	781c      	ldrb	r4, [r3, #0]
 800737a:	3001      	adds	r0, #1
 800737c:	428c      	cmp	r4, r1
 800737e:	d1f6      	bne.n	800736e <memchr+0x6>
 8007380:	4618      	mov	r0, r3
 8007382:	bd10      	pop	{r4, pc}

08007384 <memcpy>:
 8007384:	b510      	push	{r4, lr}
 8007386:	1e43      	subs	r3, r0, #1
 8007388:	440a      	add	r2, r1
 800738a:	4291      	cmp	r1, r2
 800738c:	d100      	bne.n	8007390 <memcpy+0xc>
 800738e:	bd10      	pop	{r4, pc}
 8007390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007398:	e7f7      	b.n	800738a <memcpy+0x6>

0800739a <memmove>:
 800739a:	4288      	cmp	r0, r1
 800739c:	b510      	push	{r4, lr}
 800739e:	eb01 0302 	add.w	r3, r1, r2
 80073a2:	d807      	bhi.n	80073b4 <memmove+0x1a>
 80073a4:	1e42      	subs	r2, r0, #1
 80073a6:	4299      	cmp	r1, r3
 80073a8:	d00a      	beq.n	80073c0 <memmove+0x26>
 80073aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 80073b2:	e7f8      	b.n	80073a6 <memmove+0xc>
 80073b4:	4283      	cmp	r3, r0
 80073b6:	d9f5      	bls.n	80073a4 <memmove+0xa>
 80073b8:	1881      	adds	r1, r0, r2
 80073ba:	1ad2      	subs	r2, r2, r3
 80073bc:	42d3      	cmn	r3, r2
 80073be:	d100      	bne.n	80073c2 <memmove+0x28>
 80073c0:	bd10      	pop	{r4, pc}
 80073c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80073ca:	e7f7      	b.n	80073bc <memmove+0x22>

080073cc <_free_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4605      	mov	r5, r0
 80073d0:	2900      	cmp	r1, #0
 80073d2:	d043      	beq.n	800745c <_free_r+0x90>
 80073d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d8:	1f0c      	subs	r4, r1, #4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	bfb8      	it	lt
 80073de:	18e4      	addlt	r4, r4, r3
 80073e0:	f000 f8d0 	bl	8007584 <__malloc_lock>
 80073e4:	4a1e      	ldr	r2, [pc, #120]	; (8007460 <_free_r+0x94>)
 80073e6:	6813      	ldr	r3, [r2, #0]
 80073e8:	4610      	mov	r0, r2
 80073ea:	b933      	cbnz	r3, 80073fa <_free_r+0x2e>
 80073ec:	6063      	str	r3, [r4, #4]
 80073ee:	6014      	str	r4, [r2, #0]
 80073f0:	4628      	mov	r0, r5
 80073f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073f6:	f000 b8c6 	b.w	8007586 <__malloc_unlock>
 80073fa:	42a3      	cmp	r3, r4
 80073fc:	d90b      	bls.n	8007416 <_free_r+0x4a>
 80073fe:	6821      	ldr	r1, [r4, #0]
 8007400:	1862      	adds	r2, r4, r1
 8007402:	4293      	cmp	r3, r2
 8007404:	bf01      	itttt	eq
 8007406:	681a      	ldreq	r2, [r3, #0]
 8007408:	685b      	ldreq	r3, [r3, #4]
 800740a:	1852      	addeq	r2, r2, r1
 800740c:	6022      	streq	r2, [r4, #0]
 800740e:	6063      	str	r3, [r4, #4]
 8007410:	6004      	str	r4, [r0, #0]
 8007412:	e7ed      	b.n	80073f0 <_free_r+0x24>
 8007414:	4613      	mov	r3, r2
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	b10a      	cbz	r2, 800741e <_free_r+0x52>
 800741a:	42a2      	cmp	r2, r4
 800741c:	d9fa      	bls.n	8007414 <_free_r+0x48>
 800741e:	6819      	ldr	r1, [r3, #0]
 8007420:	1858      	adds	r0, r3, r1
 8007422:	42a0      	cmp	r0, r4
 8007424:	d10b      	bne.n	800743e <_free_r+0x72>
 8007426:	6820      	ldr	r0, [r4, #0]
 8007428:	4401      	add	r1, r0
 800742a:	1858      	adds	r0, r3, r1
 800742c:	4282      	cmp	r2, r0
 800742e:	6019      	str	r1, [r3, #0]
 8007430:	d1de      	bne.n	80073f0 <_free_r+0x24>
 8007432:	6810      	ldr	r0, [r2, #0]
 8007434:	6852      	ldr	r2, [r2, #4]
 8007436:	4401      	add	r1, r0
 8007438:	6019      	str	r1, [r3, #0]
 800743a:	605a      	str	r2, [r3, #4]
 800743c:	e7d8      	b.n	80073f0 <_free_r+0x24>
 800743e:	d902      	bls.n	8007446 <_free_r+0x7a>
 8007440:	230c      	movs	r3, #12
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	e7d4      	b.n	80073f0 <_free_r+0x24>
 8007446:	6820      	ldr	r0, [r4, #0]
 8007448:	1821      	adds	r1, r4, r0
 800744a:	428a      	cmp	r2, r1
 800744c:	bf01      	itttt	eq
 800744e:	6811      	ldreq	r1, [r2, #0]
 8007450:	6852      	ldreq	r2, [r2, #4]
 8007452:	1809      	addeq	r1, r1, r0
 8007454:	6021      	streq	r1, [r4, #0]
 8007456:	6062      	str	r2, [r4, #4]
 8007458:	605c      	str	r4, [r3, #4]
 800745a:	e7c9      	b.n	80073f0 <_free_r+0x24>
 800745c:	bd38      	pop	{r3, r4, r5, pc}
 800745e:	bf00      	nop
 8007460:	200005e8 	.word	0x200005e8

08007464 <_malloc_r>:
 8007464:	b570      	push	{r4, r5, r6, lr}
 8007466:	1ccd      	adds	r5, r1, #3
 8007468:	f025 0503 	bic.w	r5, r5, #3
 800746c:	3508      	adds	r5, #8
 800746e:	2d0c      	cmp	r5, #12
 8007470:	bf38      	it	cc
 8007472:	250c      	movcc	r5, #12
 8007474:	2d00      	cmp	r5, #0
 8007476:	4606      	mov	r6, r0
 8007478:	db01      	blt.n	800747e <_malloc_r+0x1a>
 800747a:	42a9      	cmp	r1, r5
 800747c:	d903      	bls.n	8007486 <_malloc_r+0x22>
 800747e:	230c      	movs	r3, #12
 8007480:	6033      	str	r3, [r6, #0]
 8007482:	2000      	movs	r0, #0
 8007484:	bd70      	pop	{r4, r5, r6, pc}
 8007486:	f000 f87d 	bl	8007584 <__malloc_lock>
 800748a:	4a21      	ldr	r2, [pc, #132]	; (8007510 <_malloc_r+0xac>)
 800748c:	6814      	ldr	r4, [r2, #0]
 800748e:	4621      	mov	r1, r4
 8007490:	b991      	cbnz	r1, 80074b8 <_malloc_r+0x54>
 8007492:	4c20      	ldr	r4, [pc, #128]	; (8007514 <_malloc_r+0xb0>)
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	b91b      	cbnz	r3, 80074a0 <_malloc_r+0x3c>
 8007498:	4630      	mov	r0, r6
 800749a:	f000 f863 	bl	8007564 <_sbrk_r>
 800749e:	6020      	str	r0, [r4, #0]
 80074a0:	4629      	mov	r1, r5
 80074a2:	4630      	mov	r0, r6
 80074a4:	f000 f85e 	bl	8007564 <_sbrk_r>
 80074a8:	1c43      	adds	r3, r0, #1
 80074aa:	d124      	bne.n	80074f6 <_malloc_r+0x92>
 80074ac:	230c      	movs	r3, #12
 80074ae:	4630      	mov	r0, r6
 80074b0:	6033      	str	r3, [r6, #0]
 80074b2:	f000 f868 	bl	8007586 <__malloc_unlock>
 80074b6:	e7e4      	b.n	8007482 <_malloc_r+0x1e>
 80074b8:	680b      	ldr	r3, [r1, #0]
 80074ba:	1b5b      	subs	r3, r3, r5
 80074bc:	d418      	bmi.n	80074f0 <_malloc_r+0x8c>
 80074be:	2b0b      	cmp	r3, #11
 80074c0:	d90f      	bls.n	80074e2 <_malloc_r+0x7e>
 80074c2:	600b      	str	r3, [r1, #0]
 80074c4:	18cc      	adds	r4, r1, r3
 80074c6:	50cd      	str	r5, [r1, r3]
 80074c8:	4630      	mov	r0, r6
 80074ca:	f000 f85c 	bl	8007586 <__malloc_unlock>
 80074ce:	f104 000b 	add.w	r0, r4, #11
 80074d2:	1d23      	adds	r3, r4, #4
 80074d4:	f020 0007 	bic.w	r0, r0, #7
 80074d8:	1ac3      	subs	r3, r0, r3
 80074da:	d0d3      	beq.n	8007484 <_malloc_r+0x20>
 80074dc:	425a      	negs	r2, r3
 80074de:	50e2      	str	r2, [r4, r3]
 80074e0:	e7d0      	b.n	8007484 <_malloc_r+0x20>
 80074e2:	684b      	ldr	r3, [r1, #4]
 80074e4:	428c      	cmp	r4, r1
 80074e6:	bf16      	itet	ne
 80074e8:	6063      	strne	r3, [r4, #4]
 80074ea:	6013      	streq	r3, [r2, #0]
 80074ec:	460c      	movne	r4, r1
 80074ee:	e7eb      	b.n	80074c8 <_malloc_r+0x64>
 80074f0:	460c      	mov	r4, r1
 80074f2:	6849      	ldr	r1, [r1, #4]
 80074f4:	e7cc      	b.n	8007490 <_malloc_r+0x2c>
 80074f6:	1cc4      	adds	r4, r0, #3
 80074f8:	f024 0403 	bic.w	r4, r4, #3
 80074fc:	42a0      	cmp	r0, r4
 80074fe:	d005      	beq.n	800750c <_malloc_r+0xa8>
 8007500:	1a21      	subs	r1, r4, r0
 8007502:	4630      	mov	r0, r6
 8007504:	f000 f82e 	bl	8007564 <_sbrk_r>
 8007508:	3001      	adds	r0, #1
 800750a:	d0cf      	beq.n	80074ac <_malloc_r+0x48>
 800750c:	6025      	str	r5, [r4, #0]
 800750e:	e7db      	b.n	80074c8 <_malloc_r+0x64>
 8007510:	200005e8 	.word	0x200005e8
 8007514:	200005ec 	.word	0x200005ec

08007518 <_realloc_r>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	4607      	mov	r7, r0
 800751c:	4614      	mov	r4, r2
 800751e:	460e      	mov	r6, r1
 8007520:	b921      	cbnz	r1, 800752c <_realloc_r+0x14>
 8007522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007526:	4611      	mov	r1, r2
 8007528:	f7ff bf9c 	b.w	8007464 <_malloc_r>
 800752c:	b922      	cbnz	r2, 8007538 <_realloc_r+0x20>
 800752e:	f7ff ff4d 	bl	80073cc <_free_r>
 8007532:	4625      	mov	r5, r4
 8007534:	4628      	mov	r0, r5
 8007536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007538:	f000 f826 	bl	8007588 <_malloc_usable_size_r>
 800753c:	42a0      	cmp	r0, r4
 800753e:	d20f      	bcs.n	8007560 <_realloc_r+0x48>
 8007540:	4621      	mov	r1, r4
 8007542:	4638      	mov	r0, r7
 8007544:	f7ff ff8e 	bl	8007464 <_malloc_r>
 8007548:	4605      	mov	r5, r0
 800754a:	2800      	cmp	r0, #0
 800754c:	d0f2      	beq.n	8007534 <_realloc_r+0x1c>
 800754e:	4631      	mov	r1, r6
 8007550:	4622      	mov	r2, r4
 8007552:	f7ff ff17 	bl	8007384 <memcpy>
 8007556:	4631      	mov	r1, r6
 8007558:	4638      	mov	r0, r7
 800755a:	f7ff ff37 	bl	80073cc <_free_r>
 800755e:	e7e9      	b.n	8007534 <_realloc_r+0x1c>
 8007560:	4635      	mov	r5, r6
 8007562:	e7e7      	b.n	8007534 <_realloc_r+0x1c>

08007564 <_sbrk_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	2300      	movs	r3, #0
 8007568:	4c05      	ldr	r4, [pc, #20]	; (8007580 <_sbrk_r+0x1c>)
 800756a:	4605      	mov	r5, r0
 800756c:	4608      	mov	r0, r1
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	f7f9 fae0 	bl	8000b34 <_sbrk>
 8007574:	1c43      	adds	r3, r0, #1
 8007576:	d102      	bne.n	800757e <_sbrk_r+0x1a>
 8007578:	6823      	ldr	r3, [r4, #0]
 800757a:	b103      	cbz	r3, 800757e <_sbrk_r+0x1a>
 800757c:	602b      	str	r3, [r5, #0]
 800757e:	bd38      	pop	{r3, r4, r5, pc}
 8007580:	20000a54 	.word	0x20000a54

08007584 <__malloc_lock>:
 8007584:	4770      	bx	lr

08007586 <__malloc_unlock>:
 8007586:	4770      	bx	lr

08007588 <_malloc_usable_size_r>:
 8007588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800758c:	1f18      	subs	r0, r3, #4
 800758e:	2b00      	cmp	r3, #0
 8007590:	bfbc      	itt	lt
 8007592:	580b      	ldrlt	r3, [r1, r0]
 8007594:	18c0      	addlt	r0, r0, r3
 8007596:	4770      	bx	lr

08007598 <_init>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	bf00      	nop
 800759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759e:	bc08      	pop	{r3}
 80075a0:	469e      	mov	lr, r3
 80075a2:	4770      	bx	lr

080075a4 <_fini>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr
